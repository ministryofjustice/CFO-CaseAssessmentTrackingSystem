name: Create new release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Only get the latest commit - much faster!

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore Cake Tool
      run: dotnet tool restore

    - name: Build, Test & Publish
      run: dotnet cake build.cake 

    # Create zip archive of build artifacts for release
    # This creates the necessary ./artifacts.zip file on the runner's filesystem.
    - name: Create Build Artifacts Archive
      if: success()
      run: |
        # Use a single zip command from the root to create artifacts.zip
        zip -r artifacts.zip ./artifacts/ 

    # Generate tag and release names with daily build numbers
    - name: Set Release Version
      if: success()
      id: set_release_version
      run: |
        # Get current date in YYYY.MM.DD format
        DATE_PREFIX="v$(date +'%Y.%m.%d')"
        
        # Get existing tags for today using GitHub API
        EXISTING_TAGS=$(curl -s \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/tags" \
          | jq -r --arg prefix "$DATE_PREFIX" '.[] | select(.name | startswith($prefix)) | .name')
        
        # Count existing tags for today and increment
        if [ -z "$EXISTING_TAGS" ]; then
          BUILD_NUMBER="01"
        else
          # Extract build numbers, find max, and increment
          MAX_BUILD=$(echo "$EXISTING_TAGS" | sed "s/${DATE_PREFIX}.//g" | sort -n | tail -1)
          BUILD_NUMBER=$(printf "%02d" $((MAX_BUILD + 1)))
        fi
        
        # Set the final tag and release names
        TAG_NAME="${DATE_PREFIX}.${BUILD_NUMBER}"
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        echo "RELEASE_NAME=Release $TAG_NAME" >> $GITHUB_ENV
        
        echo "Generated tag: $TAG_NAME"

    # Create a new release
    - name: Create Release
      if: success()
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: ${{ env.RELEASE_NAME }}
        files: ./artifacts.zip
        draft: false
        prerelease: true
        generate_release_notes: true