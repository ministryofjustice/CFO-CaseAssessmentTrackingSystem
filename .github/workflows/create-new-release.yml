name: Create new release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore Cake Tool
      run: dotnet tool restore

    - name: Build, Test & Publish
      run: dotnet cake --target=Publish --configuration=Release

    - name: Generate Migration Script
      run: dotnet cake --target=Script --configuration=Release

    # Upload build artifacts
    - name: Upload Published App
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: published-app
        path: ./publish/
        retention-days: 90

    # Upload test results
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/TestResults/
          **/*.trx
        retention-days: 90

    # Create zip archive of build artifacts for release
    - name: Create Build Artifacts Archive
      if: success() && github.ref == 'refs/heads/main'
      run: |
        cd ./publish
        zip -r ../build-artifacts.zip .
        cd ..

    # Generate tag and release names with daily build numbers
    - name: Set Release Version
      if: success() && github.ref == 'refs/heads/main'
      id: set_release_version
      run: |
        # Get current date in YYYY.MM.DD format
        DATE_PREFIX="v$(date +'%Y.%m.%d')"
        
        # Get existing tags for today using GitHub API
        EXISTING_TAGS=$(curl -s \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/tags" \
          | jq -r --arg prefix "$DATE_PREFIX" '.[] | select(.name | startswith($prefix)) | .name')
        
        # Count existing tags for today and increment
        if [ -z "$EXISTING_TAGS" ]; then
          BUILD_NUMBER="01"
        else
          # Extract build numbers, find max, and increment
          MAX_BUILD=$(echo "$EXISTING_TAGS" | sed "s/${DATE_PREFIX}.//g" | sort -n | tail -1)
          BUILD_NUMBER=$(printf "%02d" $((MAX_BUILD + 1)))
        fi
        
        # Set the final tag and release names
        TAG_NAME="${DATE_PREFIX}.${BUILD_NUMBER}"
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        echo "RELEASE_NAME=Release $TAG_NAME" >> $GITHUB_ENV
        
        echo "Generated tag: $TAG_NAME"

    # Create a new release
    - name: Create Release
      if: success() && github.ref == 'refs/heads/main'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG_NAME }}
        release_name: ${{ env.RELEASE_NAME }}
        body: 'Automatic release based on date and time.'
        draft: false
        prerelease: false

    # Upload build artifacts to the release
    - name: Upload Release Asset
      if: success() && github.ref == 'refs/heads/main'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build-artifacts.zip
        asset_name: build-artifacts.zip
        asset_content_type: application/zip
