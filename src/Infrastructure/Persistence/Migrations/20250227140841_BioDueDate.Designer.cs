// <auto-generated />
using System;
using Cfo.Cats.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cfo.Cats.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250227140841_BioDueDate")]
    partial class BioDueDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cfo.Cats.Application.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedOnUtc");

                    b.ToTable("OutboxMessage", "Outbox");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInformation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CommencedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Definition")
                        .HasColumnType("int");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantCurrentContractId")
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("ParticipantCurrentLocationId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("ParticipantStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TookPlaceAtContractId")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("TookPlaceAtLocationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantCurrentContractId");

                    b.HasIndex("ParticipantCurrentLocationId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TookPlaceAtContractId");

                    b.HasIndex("TookPlaceAtLocationId");

                    b.ToTable("Activity", "Activities");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.ActivityEscalationQueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EditorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TenantId");

                    b.ToTable("ActivityEscalationQueue", "Activities");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.ActivityPqaQueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EditorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TenantId");

                    b.ToTable("ActivityPqaQueue", "Activities");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.ActivityQa1QueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EditorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TenantId");

                    b.ToTable("ActivityQa1Queue", "Activities");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.ActivityQa2QueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEscalated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EditorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TenantId");

                    b.ToTable("ActivityQa2Queue", "Activities");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Administration.Contract", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LotNumber")
                        .HasColumnType("int");

                    b.Property<string>("_tenantId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("LotNumber")
                        .IsUnique();

                    b.HasIndex("_tenantId");

                    b.ToTable("Contract", "Configuration");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Administration.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LocationType")
                        .HasColumnType("int")
                        .HasColumnName("LocationTypeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("_contractId")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("ContractId");

                    b.Property<int>("_genderProvisionId")
                        .HasColumnType("int")
                        .HasColumnName("GenderProvisionId");

                    b.Property<int?>("_parentLocationId")
                        .HasColumnType("int")
                        .HasColumnName("ParentLocationId");

                    b.HasKey("Id");

                    b.HasIndex("_contractId");

                    b.HasIndex("_parentLocationId");

                    b.ToTable("Location", "Configuration");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Administration.LocationMapping", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CodeType")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("DeliveryRegion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("_locationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationId");

                    b.HasKey("Code", "CodeType");

                    b.HasIndex("_locationId");

                    b.ToTable("LocationMapping", "Dms");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Administration.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tenant", "Configuration");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Assessments.ParticipantAssessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssessmentJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompletedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TenantId");

                    b.ToTable("Assessment", "Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.AuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuditType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryKey");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrail", "Audit");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Bios.ParticipantBio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BioJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompletedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Bio", "Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Documents.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("TenantId");

                    b.ToTable("Document", "Document");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.IdentityAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PerformedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserName", "DateTime")
                        .HasDatabaseName("idx_IdentityAudit_UserName_DateTime");

                    b.ToTable("IdentityAuditTrail", "Audit");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Inductions.HubInduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("InductionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EditorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantId", "Created");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("ParticipantId", "Created"));

                    b.ToTable("HubInduction", "Induction");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Inductions.WingInduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("InductionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EditorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantId", "Created");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("ParticipantId", "Created"));

                    b.ToTable("WingInduction", "Induction");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.KeyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("KeyValue", "Configuration");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.ManagementInformation.ActivityPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActivityApproved")
                        .HasColumnType("date");

                    b.Property<string>("ActivityCategory")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContractId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EligibleForPayment")
                        .HasColumnType("bit");

                    b.Property<string>("IneligibilityReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId", "ContractId", "ActivityCategory", "ActivityType", "ActivityApproved")
                        .HasDatabaseName("ix_ActivityPayment_ParticipantId");

                    b.ToTable("ActivityPayment", "Mi");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.ManagementInformation.DateDimension", b =>
                {
                    b.Property<DateTime>("TheDate")
                        .HasColumnType("date");

                    b.Property<bool>("Has53ISOWeeks")
                        .HasColumnType("bit");

                    b.Property<bool>("Has53Weeks")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLeapYear")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeekend")
                        .HasColumnType("bit");

                    b.Property<string>("MMYYYY")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Style101")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Style103")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Style112")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Style120")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TheDay")
                        .HasColumnType("int");

                    b.Property<string>("TheDayName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TheDayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("TheDayOfWeekInMonth")
                        .HasColumnType("int");

                    b.Property<int>("TheDayOfYear")
                        .HasColumnType("int");

                    b.Property<string>("TheDaySuffix")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("TheFirstOfMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("TheFirstOfNextMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("TheFirstOfQuarter")
                        .HasColumnType("date");

                    b.Property<DateTime>("TheFirstOfWeek")
                        .HasColumnType("date");

                    b.Property<DateTime>("TheFirstOfYear")
                        .HasColumnType("date");

                    b.Property<int>("TheISOYear")
                        .HasColumnType("int");

                    b.Property<int>("TheISOweek")
                        .HasColumnType("int");

                    b.Property<DateTime>("TheLastOfMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("TheLastOfNextMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("TheLastOfQuarter")
                        .HasColumnType("date");

                    b.Property<DateTime>("TheLastOfWeek")
                        .HasColumnType("date");

                    b.Property<DateTime>("TheLastOfYear")
                        .HasColumnType("date");

                    b.Property<int>("TheMonth")
                        .HasColumnType("int");

                    b.Property<string>("TheMonthName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TheQuarter")
                        .HasColumnType("int");

                    b.Property<int>("TheWeek")
                        .HasColumnType("int");

                    b.Property<int>("TheWeekOfMonth")
                        .HasColumnType("int");

                    b.Property<int>("TheYear")
                        .HasColumnType("int");

                    b.HasKey("TheDate");

                    b.ToTable("DateDimension", "Mi");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.ManagementInformation.EducationPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActivityApproved")
                        .HasColumnType("date");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("CourseLevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EligibleForPayment")
                        .HasColumnType("bit");

                    b.Property<string>("IneligibilityReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId", "ContractId", "ActivityApproved")
                        .HasDatabaseName("ix_ActivityPayment_ParticipantId");

                    b.ToTable("EducationPayment", "Mi");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.ManagementInformation.EmploymentPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActivityApproved")
                        .HasColumnType("date");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EligibleForPayment")
                        .HasColumnType("bit");

                    b.Property<string>("IneligibilityReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId", "ContractId", "ActivityApproved")
                        .HasDatabaseName("ix_ActivityPayment_ParticipantId");

                    b.ToTable("EmploymentPayment", "Mi");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.ManagementInformation.EnrolmentPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Approved")
                        .HasColumnType("date");

                    b.Property<DateTime>("ConsentAdded")
                        .HasColumnType("date");

                    b.Property<DateTime>("ConsentSigned")
                        .HasColumnType("date");

                    b.Property<string>("ContractId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EligibleForPayment")
                        .HasColumnType("bit");

                    b.Property<string>("IneligibilityReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasDefaultValue("");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("ReferralRoute")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("SubmissionToAuthority")
                        .HasColumnType("date");

                    b.Property<DateTime>("SubmissionToPqa")
                        .HasColumnType("date");

                    b.Property<int>("SubmissionsToAuthority")
                        .HasColumnType("int");

                    b.Property<string>("SupportWorker")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EnrolmentPayment", "Mi");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.ManagementInformation.InductionPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Approved")
                        .HasColumnType("date");

                    b.Property<string>("ContractId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EligibleForPayment")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Induction")
                        .HasColumnType("date");

                    b.Property<string>("IneligibilityReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasDefaultValue("");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("SupportWorker")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId", "ContractId")
                        .HasDatabaseName("ix_InductionPayment_ParticipantId");

                    b.ToTable("InductionPayment", "Mi");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.ManagementInformation.SupportAndReferralPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Approved")
                        .HasColumnType("date");

                    b.Property<string>("ContractId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EligibleForPayment")
                        .HasColumnType("bit");

                    b.Property<string>("IneligibilityReason")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<Guid>("PriId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupportType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SupportWorker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId", "ContractId", "SupportType", "Approved")
                        .HasDatabaseName("ix_ActivityPayment_ParticipantId");

                    b.ToTable("SupportAndReferralPayment", "Mi");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Link")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EditorId");

                    b.HasIndex("OwnerId", "NotificationDate", "ReadDate");

                    b.HasIndex(new[] { "NotificationDate" }, "clst_notification");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "NotificationDate" }, "clst_notification"));

                    b.ToTable("Notification", "Identity");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.PRIs.PRI", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AbandonJustification")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("AbandonReason")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AcceptedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("ActualReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CompletedBy")
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("CustodyLocationId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ExpectedReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("ExpectedReleaseRegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateOnly>("MeetingAttendedOn")
                        .HasColumnType("date");

                    b.Property<Guid>("ObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("PostReleaseCommunitySupportInformation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReasonCommunityDidNotAttendInPerson")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReasonCustodyDidNotAttendInPerson")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReasonParticipantDidNotAttendInPerson")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CompletedBy");

                    b.HasIndex("CustodyLocationId");

                    b.HasIndex("ExpectedReleaseRegionId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("PRI", "PRI");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.ParticipantAccessAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccessDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("AccessAuditTrail", "Audit");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.EnrolmentEscalationQueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ConsentDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("SupportWorkerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TenantId");

                    b.ToTable("EscalationQueue", "Enrolment");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.EnrolmentPqaQueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ConsentDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("SupportWorkerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TenantId");

                    b.ToTable("PqaQueue", "Enrolment");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.EnrolmentQa1QueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ConsentDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("SupportWorkerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TenantId");

                    b.ToTable("Qa1Queue", "Enrolment");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.EnrolmentQa2QueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ConsentDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEscalated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("SupportWorkerId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TenantId");

                    b.ToTable("Qa2Queue", "Enrolment");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.Participant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<bool>("ActiveInFeed")
                        .HasColumnType("bit");

                    b.Property<string>("ArchiveJustification")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ArchiveReason")
                        .HasColumnType("int");

                    b.Property<string>("AssessmentJustification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BioDue")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConsentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateOfFirstConsent")
                        .HasColumnType("date");

                    b.Property<string>("EditorId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("EnrolmentLocationJustification")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("EnrolmentStatus")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastSyncDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ReferralComments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReferralSource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegistrationDetailsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RiskDue")
                        .HasColumnType("datetime2");

                    b.Property<int>("_currentLocationId")
                        .HasColumnType("int")
                        .HasColumnName("CurrentLocationId");

                    b.Property<int?>("_enrolmentLocationId")
                        .HasColumnType("int")
                        .HasColumnName("EnrolmentLocationId");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("_currentLocationId");

                    b.HasIndex("_enrolmentLocationId");

                    b.ToTable("Participant", "Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.ParticipantEnrolmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("EnrolmentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EnrolmentHistory", "Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.ParticipantIncomingTransferQueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromContractId")
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("FromLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MoveOccured")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("ToContractId")
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("ToLocationId")
                        .HasColumnType("int");

                    b.Property<int>("TransferType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Completed");

                    b.HasIndex("FromContractId");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("ToContractId");

                    b.HasIndex("ToLocationId");

                    b.ToTable("IncomingTransferQueue", "Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.ParticipantLocationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("LocationHistory", "Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.ParticipantOutgoingTransferQueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromContractId")
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("FromLocationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReplaced")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MoveOccured")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("PreviousOwnerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("PreviousTenantId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ToContractId")
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("ToLocationId")
                        .HasColumnType("int");

                    b.Property<int>("TransferType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromContractId");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("IsReplaced");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("PreviousOwnerId");

                    b.HasIndex("PreviousTenantId");

                    b.HasIndex("ToContractId");

                    b.HasIndex("ToLocationId");

                    b.ToTable("OutgoingTransferQueue", "Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.ParticipantOwnershipHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TenantId");

                    b.ToTable("OwnershipHistory", "Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.PathwayPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("PathwayPlan", "Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.PriCode", b =>
                {
                    b.Property<string>("ParticipantId")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("ParticipantId");

                    b.ToTable("PriCode", "PRI");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.Risk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivityRecommendations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ActivityRecommendationsReceived")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActivityRestrictions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ActivityRestrictionsReceived")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompletedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool?>("IsRelevantToCommunity")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRelevantToCustody")
                        .HasColumnType("bit");

                    b.Property<int?>("IsSubjectToSHPO")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LicenseConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LicenseEnd")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NSDCase")
                        .HasColumnType("int");

                    b.Property<bool?>("NoLicenseEndDate")
                        .HasColumnType("bit");

                    b.Property<string>("PSFRestrictions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PSFRestrictionsReceived")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)");

                    b.Property<DateTime?>("ReferredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferrerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferrerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDetailsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewJustification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewReason")
                        .HasColumnType("int");

                    b.Property<int?>("RiskToChildrenInCommunity")
                        .HasColumnType("int");

                    b.Property<int?>("RiskToChildrenInCustody")
                        .HasColumnType("int");

                    b.Property<int?>("RiskToKnownAdultInCommunity")
                        .HasColumnType("int");

                    b.Property<int?>("RiskToKnownAdultInCustody")
                        .HasColumnType("int");

                    b.Property<int?>("RiskToOtherPrisonersInCustody")
                        .HasColumnType("int");

                    b.Property<int?>("RiskToPublicInCommunity")
                        .HasColumnType("int");

                    b.Property<int?>("RiskToPublicInCustody")
                        .HasColumnType("int");

                    b.Property<int?>("RiskToSelfInCommunity")
                        .HasColumnType("int");

                    b.Property<int?>("RiskToSelfInCustody")
                        .HasColumnType("int");

                    b.Property<int?>("RiskToStaffInCommunity")
                        .HasColumnType("int");

                    b.Property<int?>("RiskToStaffInCustody")
                        .HasColumnType("int");

                    b.Property<string>("SpecificRisk")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Risk", "Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.Timeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Line2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Line3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Timeline", "Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleRank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", "Identity");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", "Identity");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MemorableDate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MemorablePlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureDataUrl")
                        .HasColumnType("text");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequiresPasswordReset")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuperiorId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SuperiorId");

                    b.HasIndex("TenantId");

                    b.ToTable("User", "Identity");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", "Identity");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "Identity");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "Identity");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.PasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.ToTable("PasswordHistory", "Identity");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("TenantLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LocationId", "TenantId");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantLocation", "Configuration");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.EducationTrainingActivity", b =>
                {
                    b.HasBaseType("Cfo.Cats.Domain.Entities.Activities.Activity");

                    b.Property<DateTime>("CourseCommencedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CourseCompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseCompletionStatus")
                        .HasColumnType("int");

                    b.Property<string>("CourseLevel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CourseUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DocumentId");

                    b.ToTable("EducationTrainingActivity", "Activities");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.EmploymentActivity", b =>
                {
                    b.HasBaseType("Cfo.Cats.Domain.Entities.Activities.Activity");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmploymentCommenced")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("SalaryFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DocumentId");

                    b.ToTable("EmploymentActivity", "Activities");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.ISWActivity", b =>
                {
                    b.HasBaseType("Cfo.Cats.Domain.Entities.Activities.Activity");

                    b.Property<DateTime>("BaselineAchievedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("HoursPerformedDuring")
                        .HasColumnType("float");

                    b.Property<double>("HoursPerformedPost")
                        .HasColumnType("float");

                    b.Property<double>("HoursPerformedPre")
                        .HasColumnType("float");

                    b.Property<DateTime>("WraparoundSupportStartedOn")
                        .HasColumnType("datetime2");

                    b.HasIndex("DocumentId");

                    b.ToTable("IswActivity", "Activities");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.NonISWActivity", b =>
                {
                    b.HasBaseType("Cfo.Cats.Domain.Entities.Activities.Activity");

                    b.ToTable("NonIsqActivity", "Activities");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.Activity", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Contract", "ParticipantCurrentContract")
                        .WithMany()
                        .HasForeignKey("ParticipantCurrentContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "ParticipantCurrentLocation")
                        .WithMany()
                        .HasForeignKey("ParticipantCurrentLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Contract", "TookPlaceAtContract")
                        .WithMany()
                        .HasForeignKey("TookPlaceAtContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "TookPlaceAtLocation")
                        .WithMany()
                        .HasForeignKey("TookPlaceAtLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Editor");

                    b.Navigation("Owner");

                    b.Navigation("Participant");

                    b.Navigation("ParticipantCurrentContract");

                    b.Navigation("ParticipantCurrentLocation");

                    b.Navigation("TookPlaceAtContract");

                    b.Navigation("TookPlaceAtLocation");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.ActivityEscalationQueueEntry", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Activities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Activities.ActivityQueueEntryNote", "Notes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ActivityEscalationQueueEntryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CallReference")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<bool>("IsExternal")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<string>("TenantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("ActivityEscalationQueueEntryId");

                            b1.HasIndex("CreatedBy");

                            b1.HasIndex("LastModifiedBy");

                            b1.ToTable("EscalationNote", "Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityEscalationQueueEntryId");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CreatedByUser")
                                .WithMany()
                                .HasForeignKey("CreatedBy");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "LastModifiedByUser")
                                .WithMany()
                                .HasForeignKey("LastModifiedBy");

                            b1.Navigation("CreatedByUser");

                            b1.Navigation("LastModifiedByUser");
                        });

                    b.Navigation("Activity");

                    b.Navigation("Editor");

                    b.Navigation("Notes");

                    b.Navigation("Owner");

                    b.Navigation("Participant");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.ActivityPqaQueueEntry", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Activities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Activities.ActivityQueueEntryNote", "Notes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ActivityPqaQueueEntryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CallReference")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<string>("TenantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("ActivityPqaQueueEntryId");

                            b1.HasIndex("CreatedBy");

                            b1.HasIndex("LastModifiedBy");

                            b1.ToTable("PqaQueueNote", "Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityPqaQueueEntryId");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CreatedByUser")
                                .WithMany()
                                .HasForeignKey("CreatedBy");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "LastModifiedByUser")
                                .WithMany()
                                .HasForeignKey("LastModifiedBy");

                            b1.Navigation("CreatedByUser");

                            b1.Navigation("LastModifiedByUser");
                        });

                    b.Navigation("Activity");

                    b.Navigation("Editor");

                    b.Navigation("Notes");

                    b.Navigation("Owner");

                    b.Navigation("Participant");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.ActivityQa1QueueEntry", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Activities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Activities.ActivityQueueEntryNote", "Notes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ActivityQa1QueueEntryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CallReference")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<bool>("IsExternal")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<string>("TenantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("ActivityQa1QueueEntryId");

                            b1.HasIndex("CreatedBy");

                            b1.HasIndex("LastModifiedBy");

                            b1.ToTable("Qa1QueueNote", "Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityQa1QueueEntryId");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CreatedByUser")
                                .WithMany()
                                .HasForeignKey("CreatedBy");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "LastModifiedByUser")
                                .WithMany()
                                .HasForeignKey("LastModifiedBy");

                            b1.Navigation("CreatedByUser");

                            b1.Navigation("LastModifiedByUser");
                        });

                    b.Navigation("Activity");

                    b.Navigation("Editor");

                    b.Navigation("Notes");

                    b.Navigation("Owner");

                    b.Navigation("Participant");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.ActivityQa2QueueEntry", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Activities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Activities.ActivityQueueEntryNote", "Notes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ActivityQa2QueueEntryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CallReference")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<bool>("IsExternal")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<string>("TenantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("ActivityQa2QueueEntryId");

                            b1.HasIndex("CreatedBy");

                            b1.HasIndex("LastModifiedBy");

                            b1.ToTable("Qa2QueueNote", "Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityQa2QueueEntryId");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CreatedByUser")
                                .WithMany()
                                .HasForeignKey("CreatedBy");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "LastModifiedByUser")
                                .WithMany()
                                .HasForeignKey("LastModifiedBy");

                            b1.Navigation("CreatedByUser");

                            b1.Navigation("LastModifiedByUser");
                        });

                    b.Navigation("Activity");

                    b.Navigation("Editor");

                    b.Navigation("Notes");

                    b.Navigation("Owner");

                    b.Navigation("Participant");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Administration.Contract", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("_tenantId");

                    b.OwnsOne("Cfo.Cats.Domain.ValueObjects.Lifetime", "Lifetime", b1 =>
                        {
                            b1.Property<string>("ContractId")
                                .HasColumnType("nvarchar(12)");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("LifetimeEnd");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("LifetimeStart");

                            b1.HasKey("ContractId");

                            b1.ToTable("Contract", "Configuration");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.Navigation("Lifetime")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Administration.Location", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Contract", "Contract")
                        .WithMany("Locations")
                        .HasForeignKey("_contractId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "ParentLocation")
                        .WithMany("ChildLocations")
                        .HasForeignKey("_parentLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Cfo.Cats.Domain.ValueObjects.Lifetime", "Lifetime", b1 =>
                        {
                            b1.Property<int>("LocationId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("LifetimeEnd");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("LifetimeStart");

                            b1.HasKey("LocationId");

                            b1.ToTable("Location", "Configuration");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.Navigation("Contract");

                    b.Navigation("Lifetime")
                        .IsRequired();

                    b.Navigation("ParentLocation");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Administration.LocationMapping", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "Location")
                        .WithMany("LocationMappings")
                        .HasForeignKey("_locationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Administration.Tenant", b =>
                {
                    b.OwnsMany("Cfo.Cats.Domain.ValueObjects.TenantDomain", "Domains", b1 =>
                        {
                            b1.Property<string>("TenantId")
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Domain")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.HasKey("TenantId", "Domain");

                            b1.ToTable("TenantDomain", "Configuration");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.Navigation("Domains");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Assessments.ParticipantAssessment", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("Cfo.Cats.Domain.ValueObjects.PathwayScore", "Scores", b1 =>
                        {
                            b1.Property<Guid>("AssessmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Pathway")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<double>("Score")
                                .HasColumnType("float");

                            b1.HasKey("AssessmentId", "Pathway");

                            b1.ToTable("AssessmentPathwayScore", "Participant");

                            b1.WithOwner()
                                .HasForeignKey("AssessmentId");
                        });

                    b.Navigation("Editor");

                    b.Navigation("Owner");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.AuditTrail", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Bios.ParticipantBio", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Documents.Document", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Editor");

                    b.Navigation("Owner");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Inductions.HubInduction", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Editor");

                    b.Navigation("Location");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Inductions.WingInduction", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Inductions.InductionPhase", "Phases", b1 =>
                        {
                            b1.Property<Guid>("WingInductionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("CompletedDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("WingInductionId", "Number");

                            b1.ToTable("WingInductionPhase", "Induction");

                            b1.WithOwner()
                                .HasForeignKey("WingInductionId");
                        });

                    b.Navigation("Editor");

                    b.Navigation("Location");

                    b.Navigation("Owner");

                    b.Navigation("Phases");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editor");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.PRIs.PRI", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CompletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "CustodyLocation")
                        .WithMany()
                        .HasForeignKey("CustodyLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "ExpectedReleaseRegion")
                        .WithMany()
                        .HasForeignKey("ExpectedReleaseRegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustodyLocation");

                    b.Navigation("ExpectedReleaseRegion");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.ParticipantAccessAuditTrail", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.EnrolmentEscalationQueueEntry", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Participants.EnrolmentQueueEntryNote", "Notes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("CallReference")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<Guid>("EnrolmentEscalationQueueEntryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsExternal")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<string>("TenantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("CreatedBy");

                            b1.HasIndex("EnrolmentEscalationQueueEntryId");

                            b1.HasIndex("LastModifiedBy");

                            b1.ToTable("EscalationNote", "Enrolment");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CreatedByUser")
                                .WithMany()
                                .HasForeignKey("CreatedBy");

                            b1.WithOwner()
                                .HasForeignKey("EnrolmentEscalationQueueEntryId");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "LastModifiedByUser")
                                .WithMany()
                                .HasForeignKey("LastModifiedBy");

                            b1.Navigation("CreatedByUser");

                            b1.Navigation("LastModifiedByUser");
                        });

                    b.Navigation("Editor");

                    b.Navigation("Notes");

                    b.Navigation("Owner");

                    b.Navigation("Participant");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.EnrolmentPqaQueueEntry", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Participants.EnrolmentQueueEntryNote", "Notes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("CallReference")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<Guid>("EnrolmentPqaQueueEntryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<string>("TenantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("CreatedBy");

                            b1.HasIndex("EnrolmentPqaQueueEntryId");

                            b1.HasIndex("LastModifiedBy");

                            b1.ToTable("PqaQueueNote", "Enrolment");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CreatedByUser")
                                .WithMany()
                                .HasForeignKey("CreatedBy");

                            b1.WithOwner()
                                .HasForeignKey("EnrolmentPqaQueueEntryId");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "LastModifiedByUser")
                                .WithMany()
                                .HasForeignKey("LastModifiedBy");

                            b1.Navigation("CreatedByUser");

                            b1.Navigation("LastModifiedByUser");
                        });

                    b.Navigation("Editor");

                    b.Navigation("Notes");

                    b.Navigation("Owner");

                    b.Navigation("Participant");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.EnrolmentQa1QueueEntry", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Participants.EnrolmentQueueEntryNote", "Notes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("CallReference")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<Guid>("EnrolmentQa1QueueEntryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsExternal")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<string>("TenantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("CreatedBy");

                            b1.HasIndex("EnrolmentQa1QueueEntryId");

                            b1.HasIndex("LastModifiedBy");

                            b1.ToTable("Qa1QueueNote", "Enrolment");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CreatedByUser")
                                .WithMany()
                                .HasForeignKey("CreatedBy");

                            b1.WithOwner()
                                .HasForeignKey("EnrolmentQa1QueueEntryId");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "LastModifiedByUser")
                                .WithMany()
                                .HasForeignKey("LastModifiedBy");

                            b1.Navigation("CreatedByUser");

                            b1.Navigation("LastModifiedByUser");
                        });

                    b.Navigation("Editor");

                    b.Navigation("Notes");

                    b.Navigation("Owner");

                    b.Navigation("Participant");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.EnrolmentQa2QueueEntry", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Participants.EnrolmentQueueEntryNote", "Notes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("CallReference")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<Guid>("EnrolmentQa2QueueEntryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsExternal")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<string>("TenantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("CreatedBy");

                            b1.HasIndex("EnrolmentQa2QueueEntryId");

                            b1.HasIndex("LastModifiedBy");

                            b1.ToTable("Qa2QueueNote", "Enrolment");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CreatedByUser")
                                .WithMany()
                                .HasForeignKey("CreatedBy");

                            b1.WithOwner()
                                .HasForeignKey("EnrolmentQa2QueueEntryId");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "LastModifiedByUser")
                                .WithMany()
                                .HasForeignKey("LastModifiedBy");

                            b1.Navigation("CreatedByUser");

                            b1.Navigation("LastModifiedByUser");
                        });

                    b.Navigation("Editor");

                    b.Navigation("Notes");

                    b.Navigation("Owner");

                    b.Navigation("Participant");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.Participant", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("_currentLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Participant_Location");

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "EnrolmentLocation")
                        .WithMany()
                        .HasForeignKey("_enrolmentLocationId")
                        .HasConstraintName("FK_Participant_EnrolmentLocation");

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Participants.Consent", "Consents", b1 =>
                        {
                            b1.Property<string>("ParticipantId")
                                .HasColumnType("nvarchar(9)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<Guid>("_documentId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("DocumentId");

                            b1.HasKey("ParticipantId", "Id");

                            b1.HasIndex("_documentId");

                            b1.ToTable("Consent", "Participant");

                            b1.WithOwner()
                                .HasForeignKey("ParticipantId");

                            b1.HasOne("Cfo.Cats.Domain.Entities.Documents.Document", "Document")
                                .WithMany()
                                .HasForeignKey("_documentId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.OwnsOne("Cfo.Cats.Domain.ValueObjects.Lifetime", "Lifetime", b2 =>
                                {
                                    b2.Property<string>("ConsentParticipantId")
                                        .HasColumnType("nvarchar(9)");

                                    b2.Property<int>("ConsentId")
                                        .HasColumnType("int");

                                    b2.Property<DateTime>("EndDate")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("ValidTo");

                                    b2.Property<DateTime>("StartDate")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("ValidFrom");

                                    b2.HasKey("ConsentParticipantId", "ConsentId");

                                    b2.ToTable("Consent", "Participant");

                                    b2.WithOwner()
                                        .HasForeignKey("ConsentParticipantId", "ConsentId");
                                });

                            b1.Navigation("Document");

                            b1.Navigation("Lifetime")
                                .IsRequired();
                        });

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Participants.ExternalIdentifier", "ExternalIdentifiers", b1 =>
                        {
                            b1.Property<string>("Value")
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<string>("ParticipantId")
                                .HasColumnType("nvarchar(9)");

                            b1.HasKey("Value", "Type", "ParticipantId");

                            b1.HasIndex("ParticipantId");

                            b1.ToTable("ExternalIdentifier", "Participant");

                            b1.WithOwner()
                                .HasForeignKey("ParticipantId");
                        });

                    b.OwnsMany("Cfo.Cats.Domain.ValueObjects.Note", "Notes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("CallReference")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)");

                            b1.Property<string>("ParticipantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(9)");

                            b1.Property<string>("TenantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("CreatedBy");

                            b1.HasIndex("LastModifiedBy");

                            b1.HasIndex("ParticipantId");

                            b1.ToTable("Note", "Participant");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CreatedByUser")
                                .WithMany()
                                .HasForeignKey("CreatedBy");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "LastModifiedByUser")
                                .WithMany()
                                .HasForeignKey("LastModifiedBy");

                            b1.WithOwner()
                                .HasForeignKey("ParticipantId");

                            b1.Navigation("CreatedByUser");

                            b1.Navigation("LastModifiedByUser");
                        });

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Participants.RightToWork", "RightToWorks", b1 =>
                        {
                            b1.Property<string>("ParticipantId")
                                .HasColumnType("nvarchar(9)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<Guid?>("_documentId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("DocumentId");

                            b1.HasKey("ParticipantId", "Id");

                            b1.HasIndex("_documentId");

                            b1.ToTable("RightToWork", "Participant");

                            b1.WithOwner()
                                .HasForeignKey("ParticipantId");

                            b1.HasOne("Cfo.Cats.Domain.Entities.Documents.Document", "Document")
                                .WithMany()
                                .HasForeignKey("_documentId");

                            b1.OwnsOne("Cfo.Cats.Domain.ValueObjects.Lifetime", "Lifetime", b2 =>
                                {
                                    b2.Property<string>("RightToWorkParticipantId")
                                        .HasColumnType("nvarchar(9)");

                                    b2.Property<int>("RightToWorkId")
                                        .HasColumnType("int");

                                    b2.Property<DateTime>("EndDate")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("ValidTo");

                                    b2.Property<DateTime>("StartDate")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("ValidFrom");

                                    b2.HasKey("RightToWorkParticipantId", "RightToWorkId");

                                    b2.ToTable("RightToWork", "Participant");

                                    b2.WithOwner()
                                        .HasForeignKey("RightToWorkParticipantId", "RightToWorkId");
                                });

                            b1.Navigation("Document");

                            b1.Navigation("Lifetime")
                                .IsRequired();
                        });

                    b.OwnsOne("Cfo.Cats.Domain.Entities.Participants.Supervisor", "Supervisor", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("EmailAddress")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MobileNumber")
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)");

                            b1.Property<string>("Name")
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.Property<string>("ParticipantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(9)");

                            b1.Property<string>("TelephoneNumber")
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)");

                            b1.HasKey("Id");

                            b1.HasIndex("ParticipantId")
                                .IsUnique();

                            b1.ToTable("Supervisor", "Participant");

                            b1.WithOwner()
                                .HasForeignKey("ParticipantId");
                        });

                    b.Navigation("Consents");

                    b.Navigation("CurrentLocation");

                    b.Navigation("Editor");

                    b.Navigation("EnrolmentLocation");

                    b.Navigation("ExternalIdentifiers");

                    b.Navigation("Notes");

                    b.Navigation("Owner");

                    b.Navigation("RightToWorks");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.ParticipantIncomingTransferQueueEntry", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Contract", "FromContract")
                        .WithMany()
                        .HasForeignKey("FromContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Contract", "ToContract")
                        .WithMany()
                        .HasForeignKey("ToContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromContract");

                    b.Navigation("FromLocation");

                    b.Navigation("Participant");

                    b.Navigation("ToContract");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.ParticipantLocationHistory", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.ParticipantOutgoingTransferQueueEntry", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Contract", "FromContract")
                        .WithMany()
                        .HasForeignKey("FromContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("PreviousOwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", null)
                        .WithMany()
                        .HasForeignKey("PreviousTenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Contract", "ToContract")
                        .WithMany()
                        .HasForeignKey("ToContractId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromContract");

                    b.Navigation("FromLocation");

                    b.Navigation("Participant");

                    b.Navigation("ToContract");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.ParticipantOwnershipHistory", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.PathwayPlan", b =>
                {
                    b.OwnsMany("Cfo.Cats.Domain.Entities.Participants.Objective", "Objectives", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("Completed")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CompletedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<int?>("CompletedStatus")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Index")
                                .HasColumnType("int");

                            b1.Property<bool>("IsMandatory")
                                .HasColumnType("bit");

                            b1.Property<string>("Justification")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<Guid>("PathwayPlanId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("CompletedBy");

                            b1.HasIndex("PathwayPlanId");

                            b1.ToTable("Objective", "Participant");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CompletedByUser")
                                .WithMany()
                                .HasForeignKey("CompletedBy");

                            b1.WithOwner()
                                .HasForeignKey("PathwayPlanId");

                            b1.OwnsMany("Cfo.Cats.Domain.Entities.Participants.ObjectiveTask", "Tasks", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTime?>("Completed")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("CompletedBy")
                                        .HasMaxLength(36)
                                        .HasColumnType("nvarchar(36)");

                                    b2.Property<int?>("CompletedStatus")
                                        .HasColumnType("int");

                                    b2.Property<DateTime?>("Created")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("CreatedBy")
                                        .HasMaxLength(36)
                                        .HasColumnType("nvarchar(36)");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime>("Due")
                                        .HasColumnType("datetime2");

                                    b2.Property<int>("Index")
                                        .HasColumnType("int");

                                    b2.Property<bool>("IsMandatory")
                                        .HasColumnType("bit");

                                    b2.Property<string>("Justification")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateTime?>("LastModified")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("LastModifiedBy")
                                        .HasMaxLength(36)
                                        .HasColumnType("nvarchar(36)");

                                    b2.Property<Guid>("ObjectiveId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("Id");

                                    b2.HasIndex("CompletedBy");

                                    b2.HasIndex("ObjectiveId");

                                    b2.ToTable("ObjectiveTask", "Participant");

                                    b2.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CompletedByUser")
                                        .WithMany()
                                        .HasForeignKey("CompletedBy");

                                    b2.WithOwner()
                                        .HasForeignKey("ObjectiveId");

                                    b2.Navigation("CompletedByUser");
                                });

                            b1.Navigation("CompletedByUser");

                            b1.Navigation("Tasks");
                        });

                    b.OwnsMany("Cfo.Cats.Domain.Entities.Participants.PathwayPlanReviewHistory", "ReviewHistories", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<Guid>("PathwayPlanId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("PathwayPlanId");

                            b1.ToTable("PathwayPlanReviewHistory", "Participant");

                            b1.WithOwner()
                                .HasForeignKey("PathwayPlanId");
                        });

                    b.Navigation("Objectives");

                    b.Navigation("ReviewHistories");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.PriCode", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.Risk", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Participants.Timeline", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cfo.Cats.Domain.Entities.Participants.Participant", null)
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "Superior")
                        .WithMany()
                        .HasForeignKey("SuperiorId");

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Cfo.Cats.Domain.ValueObjects.Note", "Notes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("CallReference")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<DateTime?>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<DateTime?>("LastModified")
                                .HasColumnType("datetime2");

                            b1.Property<string>("LastModifiedBy")
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.Property<string>("TenantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UserId")
                                .IsRequired()
                                .HasMaxLength(36)
                                .HasColumnType("nvarchar(36)");

                            b1.HasKey("Id");

                            b1.HasIndex("CreatedBy");

                            b1.HasIndex("LastModifiedBy");

                            b1.HasIndex("UserId");

                            b1.ToTable("Note", "Identity");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "CreatedByUser")
                                .WithMany()
                                .HasForeignKey("CreatedBy");

                            b1.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "LastModifiedByUser")
                                .WithMany()
                                .HasForeignKey("LastModifiedBy");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.Navigation("CreatedByUser");

                            b1.Navigation("LastModifiedByUser");
                        });

                    b.Navigation("Notes");

                    b.Navigation("Superior");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.UserLogin", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TenantLocation", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Administration.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.EducationTrainingActivity", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Activities.Activity", null)
                        .WithOne()
                        .HasForeignKey("Cfo.Cats.Domain.Entities.Activities.EducationTrainingActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.EmploymentActivity", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Activities.Activity", null)
                        .WithOne()
                        .HasForeignKey("Cfo.Cats.Domain.Entities.Activities.EmploymentActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.ISWActivity", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cfo.Cats.Domain.Entities.Activities.Activity", null)
                        .WithOne()
                        .HasForeignKey("Cfo.Cats.Domain.Entities.Activities.ISWActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Activities.NonISWActivity", b =>
                {
                    b.HasOne("Cfo.Cats.Domain.Entities.Activities.Activity", null)
                        .WithOne()
                        .HasForeignKey("Cfo.Cats.Domain.Entities.Activities.NonISWActivity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Administration.Contract", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Entities.Administration.Location", b =>
                {
                    b.Navigation("ChildLocations");

                    b.Navigation("LocationMappings");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Cfo.Cats.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
