@inject IStringLocalizer<SharedResource> L
@inject IMediator Mediator

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3 mb-n1"/>
            @ConstantString.DeleteConfirmationTitle
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>@ContentText</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="Cancel">@CancelText</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" OnClick="Submit">@ConfirmText</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;

    [EditorRequired] [Parameter] public string? ContentText { get; set; }
    [EditorRequired] [Parameter] public IRequest<Result<int>> Command { get; set; } = default!;
    [Parameter] public string ConfirmText { get; set; } = @ConstantString.Confirm;
    [Parameter] public string CancelText { get; set; } = @ConstantString.Cancel;

    private async Task Submit()
    {
        var result = await Mediator.Send(Command);
        if (result.Succeeded)
        {
            Snackbar.Add($"{ConstantString.DeleteSuccess}", Severity.Info);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add($"{result.ErrorMessage}", Severity.Error);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}