@using ActualLab.Fusion.Extensions
@using ApexCharts
@using Cfo.Cats.Application.Features.Dashboard.Queries
@using Cfo.Cats.Domain.Common.Enums

@inherits CatsComponent<CasesPerLocationSupportWorkerDto>

@if (Loading)
{
    <MudLoading Text="Loading" />
}

@if (ErrorMessage is not null)
{
    <MudAlert Variant="Variant.Outlined" Severity="Severity.Error">
        @ErrorMessage
    </MudAlert>
}

@if (Data is not null && Data.Records.Any())
{
    <MudGrid Spacing="2">
        <!-- This is the left column -->
        <MudItem>
            <MudChip T="string">Custody (@Data.Custody)</MudChip>
            <MudChip T="string">Community (@Data.Community)</MudChip>
        </MudItem>
    </MudGrid>
    @if(VisualMode)
    {
		<ApexChart TItem="Details" Options="Options" Height="700">
			@{
				var chartData = ChartData();
				var statuses = chartData.Select(x => x.Status).OrderBy(x => x.LogicalOrder).Distinct();
			}
			@foreach (var status in statuses)
			{
				<ApexPointSeries TItem="Details"
									Name="@status.Name"
									Items="@chartData.Where(x => x.Status == status).ToList()"
									XValue="@(x => x.Location)"
									YValue="@(x => x.Count)"
									SeriesType="SeriesType.Bar"
									ShowDataLabels
									Color="@status.Colour" />
			}
		</ApexChart>
    }
    else
    {
        <MudTable Items="Data.Records"
                    Hover="true"
                    Striped="true"
					>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<(string Location, string Status, int Count), object>(x => x.Location)">
                        Location
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<(string Location, string Status, int Count), object>(x => x.Status)">
                        Status
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<(string Location, string Status, int Count), object>(x => x.Count)">
                        Count
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Location">@context.Location</MudTd>
                <MudTd DataLabel="Status">@context.Status</MudTd>
                <MudTd DataLabel="Count">@context.Count</MudTd>
            </RowTemplate>

        </MudTable>
    }
}
else
{
    <MudText Typo="Typo.body2" Color="Color.Secondary" Align="MudBlazor.Align.Center">No data available</MudText>
}