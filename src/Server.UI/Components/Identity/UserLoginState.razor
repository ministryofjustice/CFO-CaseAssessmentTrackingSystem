@using Severity = Severity
@using Cfo.Cats.Server.UI.Hubs
@using Cfo.Cats.Application.Common.Interfaces.Identity
@implements IDisposable

@code {

    [CascadingParameter] protected Task<AuthenticationState> AuthState { get; set; } = default!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] public IDispatcher Dispatcher { get; set; } = null!;
    [Inject] public IStringLocalizer<SharedResource> L { get; set; } = null!;

    public void Dispose()
    {
        Client.LoginEvent -= _client_Login;
        Client.LogoutEvent -= _client_Logout;
        AuthenticationStateProvider.AuthenticationStateChanged -= _authenticationStateProvider_AuthenticationStateChanged;
        GC.SuppressFinalize(this);
    }

    [Inject] private HubClient Client { get; set; } = default!;
    [Inject] private IUsersStateContainer UsersStateContainer { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Client.LoginEvent += _client_Login;
        Client.LogoutEvent += _client_Logout;
     
        AuthenticationStateProvider.AuthenticationStateChanged += _authenticationStateProvider_AuthenticationStateChanged;
        var state = await AuthState;
        if (state.User.Identity?.IsAuthenticated ?? false)
        {
            await Client.StartAsync().ConfigureAwait(false);
            var userName = state.User.Identity.Name;
            SetProfile(userName!);
        }
    }

    private void _client_Login(object? sender, UserStateChangeEventArgs args)
    {
        InvokeAsync(() =>
        {
            Snackbar.Add(string.Format(L["{0} has logged in."], args.UserName), Severity.Info);
            UsersStateContainer.AddOrUpdate(args.ConnectionId, args.UserName);
        });
    }

    private void _client_Logout(object? sender, UserStateChangeEventArgs args)
    {
        InvokeAsync(() =>
        {
            Snackbar.Add(string.Format(L["{0} has logged out."], args.UserName));
            UsersStateContainer.Remove(args.ConnectionId);
        });
    }

    private void _authenticationStateProvider_AuthenticationStateChanged(Task<AuthenticationState> authenticationState)
    {
        InvokeAsync(async () =>
        {
            var state = await authenticationState;
            if (state.User.Identity?.IsAuthenticated ?? false)
            {
                var userName = state.User.Identity.Name;
                SetProfile(userName!);
            }
        });
    }

    private void SetProfile(string userName)
    {
        Dispatcher.Dispatch(new FetchUserDtoAction { UserName = userName });
    }

}