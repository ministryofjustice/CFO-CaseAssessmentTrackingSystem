@using System.Net
@inject ILogger<CustomError> Logger
@inject IHostEnvironment HostEnvironment

<MudDialog Visible="true" Options="@Options">
    <TitleContent>
        <MudText Typo="Typo.h6" Color="Color.Error"> @Title </MudText>
    </TitleContent>
    <DialogContent>
        <div Class="px-6 rounded-lg d-flex flex-column">
            <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Class="pb-4" Style="height:100px;width:100px;margin:auto" Color="Color.Warning" />

            <div class="d-flex align-center gap-4">
                <MudText Typo="Typo.subtitle2">@Message</MudText>
                <MudText Typo="Typo.subtitle2">@DateTime.Now</MudText>
                @if (HostEnvironment.IsDevelopment())
                {
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => ShowStackTrace = !ShowStackTrace)">More</MudButton>
                }
            </div>
            @if (HostEnvironment.IsDevelopment() && ShowStackTrace)
            {
                <MudText Typo="Typo.body2" Class="mt-2">@StackTrace</MudText>
            }
            else
            {
                <MudText>For more information, contact your system administrator</MudText>
            }
            <MudDivider Class="my-3" />
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="OnRefresh">@ConstantString.Refresh</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;

    [EditorRequired][Parameter] public Exception Exception { get; set; } = default!;

    private string? Message { get; set; }
    private bool ShowStackTrace { get; set; }
    private string? StackTrace { get; set; }
    private string? Title { get; set; } = "An error has occurred";

    private DialogOptions Options => new DialogOptions()
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Large
        };

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState;
        var userName = state.User.GetUserName();

        switch (Exception)
        {
            case ServerException e:
                Title = HostEnvironment.IsDevelopment() ? e.StatusCode.ToString() : "Error";
                Message = HostEnvironment.IsDevelopment() ? string.Join(", ", e.ErrorMessages.ToArray()) : "A server error has occurred.";
                break;
            default:
                if (Exception.InnerException != null)
                {
                    while (Exception.InnerException != null)
                    {
                        Exception = Exception.InnerException;
                    }
                }

                Message = HostEnvironment.IsDevelopment() ? Exception.Message : "An unexpected error has occurred.";
                break;
        }

        StackTrace = Exception.StackTrace;
        Logger.LogError(Exception, "{Message}. request url: {@url} {@UserName}", Message, Navigation.Uri, userName);
    }

    private void OnRefresh() => Navigation.NavigateTo(Navigation.Uri, true);
}
