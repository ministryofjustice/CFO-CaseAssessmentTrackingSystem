@layout MainLayout
@inherits LayoutComponentBase

@inject LayoutService LayoutService
<MudLayout>
    <AuthorizeView>
        <NotAuthorized>
            <RedirectToLogin/>
        </NotAuthorized>
        <Authorized>
            <HeaderMenu NavigationMenuDrawerOpen="_navigationMenuDrawerOpen"
                        OpenSearchDialog="OpenSearchDialog"
                        IsDarkMode="@LayoutService.IsDarkMode"
                        ToggleNavigationMenuDrawer="ToggleNavigationMenuDrawer"
                        RightToLeft="false"
                        RightToLeftToggle="LayoutService.ToggleRightToLeft"
                        OnSettingClick="@(() => _themingDrawerOpen = true)"/>
            <NavigationMenu DrawerOpen="_navigationMenuDrawerOpen" Roles="@_userProfile?.AssignedRoles"
                            DrawerOpenChanged="NavigationMenuDrawerOpenChangedHandler"/>
            <ThemesMenu ThemingDrawerOpen="_themingDrawerOpen"
                        ThemingDrawerOpenChanged="ThemingDrawerOpenChangedHandler"
                        UserPreferences="@LayoutService.UserPreferences"
                        UserPreferencesChanged="LayoutService.UpdateUserPreferences"/>
            <ThemesButton OnClick="@(() => _themingDrawerOpen = true)"/>
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mb-4 mt-4">
                    <ErrorBoundary @ref="ErrorBoundary">
                        <ChildContent>
                            <CascadingValue Value="@_userProfile">
                                @Body
                            </CascadingValue>
                        </ChildContent>
                        <ErrorContent Context="exception">
                            <CustomError Exception="exception"></CustomError>
                        </ErrorContent>
                    </ErrorBoundary>
                </MudContainer>
            </MudMainContent>
          
            <UserLoginState UserProfileStateChanged="OnUserProfileStateChanged" />
        </Authorized>
    </AuthorizeView>
</MudLayout>


@code
{
    private bool _commandPaletteOpen;
    private bool _navigationMenuDrawerOpen = false;
    private bool _themingDrawerOpen = false;
    private UserProfile? _userProfile;
    private ErrorBoundary? ErrorBoundary { set; get; }
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState;
        _userProfile = state.User.GetUserProfileFromClaim();
    }

    protected override void OnParametersSet()
    {
        ResetBoundary();
    }
    private void OnUserProfileStateChanged(UserProfileState state)
    {
        if (state.UserProfile is not null)
        {
            _userProfile = state.UserProfile;
        }
        
    }
    private void ResetBoundary()
    {
        // On each page navigation, reset any error state
        ErrorBoundary?.Recover();
    }

    protected void NavigationMenuDrawerOpenChangedHandler(bool state)
    {
        _navigationMenuDrawerOpen = state;
    }

    protected void ThemingDrawerOpenChangedHandler(bool state)
    {
        _themingDrawerOpen = state;
    }

    protected void ToggleNavigationMenuDrawer()
    {
        _navigationMenuDrawerOpen = !_navigationMenuDrawerOpen;
    }

    private async Task OpenSearchDialog()
    {
        if (!_commandPaletteOpen)
        {
            var options = new DialogOptions
            {
                NoHeader = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

            var commandPalette = await DialogService.ShowAsync<SearchDialog>("", options);
            _commandPaletteOpen = true;

            await commandPalette.Result;
            _commandPaletteOpen = false;
        }
    }
}