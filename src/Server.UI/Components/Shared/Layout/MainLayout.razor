@inherits LayoutComponentBase
@using Cfo.Cats.Server.UI.Constants
@implements IDisposable

@inject LayoutService LayoutService
@inject NavigationManager NavigationManager


<PageTitle>@ApplicationSettings.AppName</PageTitle>
<MudRTLProvider RightToLeft="@LayoutService.IsRTL">
    <MudThemeProvider />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudThemeProvider @ref="@_mudThemeProvider" Theme="@LayoutService.CurrentTheme" IsDarkMode="@LayoutService.IsDarkMode" IsDarkModeChanged="@LayoutService.SetDarkMode"/>
    @Body
</MudRTLProvider>

@code
{

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState {get;set;} = default!;



    private System.Timers.Timer? _timer; 

    

    [Inject]
    protected IConfiguration Configuration { get; set; } = default!;

    private MudThemeProvider _mudThemeProvider = null!;
    private bool _defaultDarkMode;

    public void Dispose()
    {
        LayoutService.MajorUpdateOccured -= LayoutServiceOnMajorUpdateOccured;
        GC.SuppressFinalize(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await ApplyUserPreferences();
            StateHasChanged();

            int idleTimeOutMinutes = int.Parse(Configuration["IdleTimeoutMinutes"] ?? "20");
        

            _timer = new System.Timers.Timer(60000 * idleTimeOutMinutes); 
            _timer.Elapsed += UpdateTimer;
            _timer.AutoReset = false;

            await JS.InvokeVoidAsync("timeOutCall", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]  
    public void TimerInterval()  
    {  
        // Resetting the Timer if the user in active state.  
        _timer!.Stop();  
        // Call the TimeInterval to logout when the user is inactive.  
        _timer!.Start();  
    }  

    private void UpdateTimer(object? source, System.Timers.ElapsedEventArgs e)  
    {  
         InvokeAsync(async() => {  
             // Log out when the user is inactive.  
             var authstate = await AuthenticationState;  
             var user = authstate?.User;
             if (user?.Identity is not null && user.Identity.IsAuthenticated)
             {  
                 NavigationManager.NavigateTo(IdentityComponentsEndpointRouteBuilderExtensions.Logout, true);  
             }  
         });  
     }  

    private async Task ApplyUserPreferences()
    {
        _defaultDarkMode = await _mudThemeProvider.GetSystemPreference();
        await LayoutService.ApplyUserPreferences(_defaultDarkMode);
    }

    protected override void OnInitialized()
    {
        LayoutService.MajorUpdateOccured += LayoutServiceOnMajorUpdateOccured;

        string primaryColour = Configuration["PrimaryColour"] ?? Theme.DefaultPrimaryColour;

        LayoutService.SetBaseTheme(Theme.ApplicationTheme(primaryColour));
    }

    private void LayoutServiceOnMajorUpdateOccured(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

}
