@inherits LayoutComponentBase
@using Cfo.Cats.Server.UI.Constants

@inject NavigationManager NavigationManager

<PageTitle>@ApplicationSettings.AppName</PageTitle>
<MudRTLProvider RightToLeft="false">
    <MudThemeProvider />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudThemeProvider 
        @ref="_mudThemeProvider"
        Theme="@_theme" 
        @bind-IsDarkMode="_isDarkMode"/>
    <CascadingValue Value="@_isDarkMode" Name="IsDarkMode">
        @Body
    </CascadingValue>
    
</MudRTLProvider>

@code
{
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider = null!;

    private MudTheme _theme = null!;
    
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState {get;set;} = null!;

    private System.Timers.Timer? _timer;
    private DateTime _lastActivity = DateTime.Now;

    [Inject]
    protected IConfiguration Configuration { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _theme = Theme.ApplicationTheme(Configuration["PrimaryColour"] 
                                                      ?? Theme.DefaultPrimaryColour);
            _isDarkMode = await _mudThemeProvider.GetSystemDarkModeAsync();
            await _mudThemeProvider.WatchSystemDarkModeAsync(OnSystemDarkModeChanged);
            StateHasChanged();            
            
            int idleTimeOutMinutes = int.Parse(Configuration["IdleTimeoutMinutes"] ?? "20");

            _timer = new System.Timers.Timer(60000 * idleTimeOutMinutes); 
            _timer.Elapsed += UpdateTimer;
            _timer.AutoReset = false;
            _timer.Start();
            await JSRuntime.InvokeVoidAsync("timeOutCall", DotNetObjectReference.Create(this));
        }
    }

    private Task OnSystemDarkModeChanged(bool arg)
    {
        _isDarkMode = arg;
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]  
    public void TimerInterval()  
    {  
        int idleTimeOutMinutes = int.Parse(Configuration["IdleTimeoutMinutes"] ?? "20");
        DateTime maximumAge = _lastActivity.AddMinutes(idleTimeOutMinutes);
        if (maximumAge < DateTime.Now)
        {
            Logout();
        }
        else
        {
            _lastActivity = DateTime.Now;
        }


        _timer!.Stop();  
        _timer!.Start();  
    }  

    private void UpdateTimer(object? source, System.Timers.ElapsedEventArgs e)  
    {  
         Logout();
    }

    private void Logout()
    {
        InvokeAsync(async() => {  
            // Log out when the user is inactive.  
            var authstate = await AuthenticationState;  
            var user = authstate?.User;
            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {  
                NavigationManager.NavigateTo(IdentityComponentsEndpointRouteBuilderExtensions.Logout, true);  
            }  
        });  
    }
}
