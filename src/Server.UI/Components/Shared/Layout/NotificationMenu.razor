@using Cfo.Cats.Application.Features.Notifications.DTOs
@using Cfo.Cats.Application.Features.Notifications.Queries
@using Humanizer
@inherits CatsComponentBase

@inject IStringLocalizer<HeaderMenu> L

<MudTooltip Arrow="true" Text="@L["Notification"]">
    <MudBadge Color="Color.Warning" Dot="true" Overlap="true" Visible="_newNotificationsAvailable">
        <MudMenu Icon="@Icons.Material.Outlined.Notifications" Color="Color.Tertiary" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter" PopoverClass="docs-layout-menu-shadow" ListClass="pa-2 docs-menu-list" LockScroll="true">
            <div class="d-flex justify-space-between align-center px-2">
                <MudText Typo="Typo.subtitle2">@L["Notifications"]</MudText>
            </div>
            @if (_messages != null && _newNotificationsAvailable)
            {
                @foreach (var (message, isRead) in _messages.Take(5))
                {
                    <MudMenuItem Class="px-2 py-0 rounded" Href="@( message.Link ?? "/pages/notifications" )">
                        <MudText Typo="Typo.subtitle2">@message.Heading</MudText>
                        <MudText Typo="Typo.body2">@($"{message.NotificationDate.Humanize()}")</MudText>
                    </MudMenuItem>
                    <MudDivider Class="my-2"/>
                }
            }
            else
            {
                <div class="d-flex justify-center align-center px-2 py-8 relative">
                    <MudText Class="mud-text-secondary my-12">@L["Nothing new :("]</MudText>
                </div>
            }
            <div class="d-flex px-2">
                <MudButton Variant="Variant.Text" Color="Color.Primary" Class="ml-16 mr-n2" Href="/pages/notifications">@L["View All"]</MudButton>
            </div>
        </MudMenu>
    </MudBadge>
</MudTooltip>

@code
{
    private UserProfile? UserProfile { get; set; }
    
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;
    
    private bool _newNotificationsAvailable = false;
    private IDictionary<NotificationDto, bool>? _messages = null;

    protected override async Task OnInitializedAsync()
    {
        if (UserProfile is null)
        {
            var state = await AuthState;
            this.UserProfile = state.User.GetUserProfileFromClaim();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var mediator = GetNewMediator();
            var query = new NotificationsWithPaginationQuery.Query()
            {
                CurrentUser = UserProfile,
                PageSize = 5,
                IncludeReadNotifications = false,
                SortDirection = "desc",
                OrderBy = "Created"
            };

            var results = await mediator.Send(query);

            _newNotificationsAvailable = results.TotalItems > 0;
            _messages = results.Items.ToDictionary((i) => i, (i) => true);
            
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

}