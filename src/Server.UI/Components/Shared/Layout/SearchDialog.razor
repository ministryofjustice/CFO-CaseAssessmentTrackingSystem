@using Cfo.Cats.Application.SecurityConstants
@using Toolbelt.Blazor.HotKeys2
@inject IStringLocalizer<SharedResource> L
@inject HotKeys HotKeys
@inject NavigationManager Navigation

<MudDialog>
    <DialogContent>
        <MudContainer>
            <MudFocusTrap>
                <MudTextField @bind-Value="@search"
                                Class="mb-3"
                                Clearable="true" 
                                Placeholder="@L["Search..."]"
                                TextChanged="@(SearchPages)"
                                Immediate="true"
                                @onkeydown="HandleTextFieldKeyDown" />
                <MudList T="string" ReadOnly="false"
                            Style="height: 300px; overflow-y: auto">
                    @foreach (var (key, value) in pagesFiltered)
                    {
                        <MudListItem T="string" OnClick="@(() => Navigation.NavigateTo(value))" @onkeypress="@(e => HandleListItemKeyDown(e, value))">
                            <MudHighlighter HighlightedText="@search"
                                            Text="@key"/>
                        </MudListItem>
                    }
                </MudList>
            </MudFocusTrap>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code
{

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = default!;
    
    private readonly Dictionary<string, string> pages = new();
    private HotKeysContext? hotKeysContext;
    private Dictionary<string, string> pagesFiltered = new();
    private string search = string.Empty;

    public void Dispose()
    {
        hotKeysContext?.DisposeAsync();
    }

    private void HandleTextFieldKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && pagesFiltered.Any())
        {
            // Assuming the first item should be navigated to on Enter
            var firstPage = pagesFiltered.First().Value;
            NavigateToPage(firstPage);
        }
    }

    private void HandleListItemKeyDown(KeyboardEventArgs e, string url)
    {
        if (e.Key == "Enter")
        {
            NavigateToPage(url);
        }
    }

    private void NavigateToPage(string url)
    {
        Navigation.NavigateTo(url);
    }

    protected override void OnInitialized()
    {
        pages.Add("Home", "/");
        pages.Add("Participants", "/pages/participants");
        pages.Add("New Enrolment", "/pages/candidates/search");
        
        pages.Add("Provider QA", "/pages/qa/enrolments/pqa");
        pages.Add("QA1", "/pages/qa/enrolments/qa1");
        pages.Add("QA2", "/pages/qa/enrolments/qa2");
        
        pagesFiltered = pages;

        hotKeysContext = HotKeys.CreateContext()
            .Add(Key.Escape, () => MudDialog.Close(), "Close command palette.");
    }

    private void SearchPages(string value)
    {
        pagesFiltered = new Dictionary<string, string>();

        if (!string.IsNullOrWhiteSpace(value))
        {
            pagesFiltered = pages
                .Where(x => x.Key
                    .Contains(value, StringComparison.InvariantCultureIgnoreCase))
                .ToDictionary(x => x.Key, x => x.Value);
        }
        else
        {
            pagesFiltered = pages;
        }
    }
}