@using Cfo.Cats.Application.Features.Activities.DTOs
@using Cfo.Cats.Application.Features.KeyValues.DTOs
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Activities.Components

@inherits CatsComponentBase

@inject IStringLocalizer<Employment> L
@if (Model is not null)
{
    <MudForm Model="Model" Validation="Validator.ValidateValue(Model)">
        <MudGrid>
            <MudItem xs="12">
                <MudSelect @bind-Value="Model.EmploymentType" 
                For="() => Model.EmploymentType"
                Label="@Model.GetMemberDescription(x => x.EmploymentType)">
                    @foreach (var employmentType in PicklistService.DataSource
                .Where(c => c.Name == Picklist.EmploymentType)
                .OrderBy(c => c.Text))
                    {
                        <MudSelectItem Value="@employmentType.Value">@employmentType.Text</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="@Model.GetMemberDescription(x => x.EmployerName)" For="() => Model.EmployerName" @bind-Value="Model.EmployerName" />
            </MudItem>    
            <MudItem xs="12">
                <MudAutocomplete
                Label="@Model.GetMemberDescription(x => x.JobTitle)" 
                @bind-Value="Model.JobTitle"
                @bind-Value:after="OnJobTitleValueChange"
                SearchFunc="@SearchJobTitles"
                ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                AdornmentColor="Color.Primary" MaxItems="null"/>
            </MudItem>
            <MudItem xs="12">
                <MudItem xs="12">
                    <MudNumericField Label="@Model.GetMemberDescription(x => x.Salary)" For="() => Model.Salary" @bind-Value="Model.Salary" />
                </MudItem>
                <MudSelect @bind-Value="Model.SalaryFrequency"
                For="() => Model.SalaryFrequency"  Label="@Model.GetMemberDescription(x => x.SalaryFrequency)">
                    @foreach (var salaryFrequency in PicklistService.DataSource
                .Where(c => c.Name == Picklist.SalaryFrequency)
                .OrderBy(c => c.Text))
                    {
                        <MudSelectItem Value="@salaryFrequency.Value">@salaryFrequency.Text</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudDatePicker Label="@Model.GetMemberDescription(x => x.EmploymentCommenced)"
                @bind-Date="Model.EmploymentCommenced"
                For="(() => Model.EmploymentCommenced)"
                ImmediateText="true" Editable="false"  />
            </MudItem>
        </MudGrid>
    </MudForm>
}
@code {
    [Inject]
    private IPicklistService PicklistService { get; set; } = default!;

    [Parameter, EditorRequired]
    public required EmploymentDto Model { get; set; }

    private IEnumerable<KeyValueDto>? filteredJobTitles;
    protected override void OnInitialized()
    {
        filteredJobTitles = PicklistService.DataSource.Where(c => c.Name == Picklist.Occupation).ToList<KeyValueDto>();
    }

    private void OnJobTitleValueChange()
    {
        var jobs = PicklistService.DataSource.Where(c => c.Name == Picklist.Occupation);
        Model.JobTitleCode = jobs.FirstOrDefault(i => i.Text == Model.JobTitle)?.Value;
    }

    private Task<IEnumerable<string?>> SearchJobTitles(string? searchText, CancellationToken cancellationToken)
    {
        IEnumerable<string?> result;
        IEnumerable<KeyValueDto> jobs = PicklistService.DataSource.Where(c => c.Name == Picklist.Occupation).ToList<KeyValueDto>();
        if (string.IsNullOrEmpty(searchText))
        {
            result = jobs.Select(x => x.Text)!;
        }
        else
        {
            result = jobs.Where(x => x.Text!.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                          .Select(x => x.Text)!;
        }

        return Task.FromResult(result);
    }

}
