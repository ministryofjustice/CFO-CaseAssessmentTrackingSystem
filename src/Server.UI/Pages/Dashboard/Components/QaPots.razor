@using ApexCharts
@using Align=ApexCharts.Align
 
@inherits CatsComponentBase


@if (_loading)
{
    <MudItem xs="12" md="6" lg="3">
        <LoadingCard Title="QA Pots" />
    </MudItem>
}
else
{
    <MudItem xs="12" lg="3" md="6">
        <MudCard style="height:100%">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">QA Pots</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudList T="string">
                    <MudListSubheader>
                        Enrolments
                    </MudListSubheader>
                    <MudListItem T="string" OnClickPreventDefault="true">
                        <div class="d-flex justify-space-between align-center width-100">
                            <MudText Typo="Typo.body1">PQA</MudText>
                            <MudText Typo="Typo.body1" Color="@(_enrolmentPqa == 0 ? Color.Success : Color.Secondary)">@_enrolmentPqa</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem T="string" OnClickPreventDefault="true">
                        <div class="d-flex justify-space-between align-center width-100">
                            <MudText Typo="Typo.body1">First Pass</MudText>
                            <MudText Typo="Typo.body1" Color="@(_enrolmentQa1 == 0 ? Color.Success : Color.Secondary)">@_enrolmentQa1</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem T="string" OnClickPreventDefault="true">
                        <div class="d-flex justify-space-between align-center width-100">
                            <MudText Typo="Typo.body1">Second Pass</MudText>
                            <MudText Typo="Typo.body1" Color="@(_enrolmentQa2 == 0 ? Color.Success : Color.Secondary)">@_enrolmentQa2</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem T="string" OnClickPreventDefault="true">
                        <div class="d-flex justify-space-between align-center width-100">
                            <MudText Typo="Typo.body1">Escalation</MudText>
                            <MudText Typo="Typo.body1" Color="@(_enrolmentEscalation == 0 ? Color.Success : Color.Secondary)">@_enrolmentEscalation</MudText>
                        </div>
                    </MudListItem>
                    <MudDivider/>
                    <MudListSubheader>
                        Activities
                    </MudListSubheader>
                    <MudListItem T="string" OnClickPreventDefault="true">
                        <div class="d-flex justify-space-between align-center width-100">
                            <MudText Typo="Typo.body1">PQA</MudText>
                            <MudText Typo="Typo.body1" Color="@(_activityPqa == 0 ? Color.Success : Color.Secondary)">@_activityPqa</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem T="string" OnClickPreventDefault="true">
                        <div class="d-flex justify-space-between align-center width-100">
                            <MudText Typo="Typo.body1">First Pass</MudText>
                            <MudText Typo="Typo.body1" Color="@(_activityQa1 == 0 ? Color.Success : Color.Secondary)">@_activityQa1</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem T="string" OnClickPreventDefault="true">
                        <div class="d-flex justify-space-between align-center width-100">
                            <MudText Typo="Typo.body1">Second Pass</MudText>
                            <MudText Typo="Typo.body1" Color="@(_activityQa2 == 0 ? Color.Success : Color.Secondary)">@_activityQa2</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem T="string" OnClickPreventDefault="true">
                        <div class="d-flex justify-space-between align-center width-100">
                            <MudText Typo="Typo.body1">Escalation</MudText>
                            <MudText Typo="Typo.body1" Color="@(_activityEscalation == 0 ? Color.Success : Color.Secondary)">@_activityEscalation</MudText>
                        </div>
                    </MudListItem>
                </MudList>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" md="6" lg="3">
        <MudCard Style="height:100%">
            <MudCardHeader>
                <MudText Typo="Typo.h5">QA Pots</MudText>
            </MudCardHeader>
            <MudCardContent>
                <ApexChart TItem="QueueData"
                           Title="QA Pots Breakdown"
                           Options="@_options">
                    <ApexPointSeries TItem="QueueData"
                                     Items="_enrolmentData"
                                     Name="Enrolment"
                                     SeriesType="SeriesType.Bar"
                                     XValue="@(e => e.Stage)"
                                     YValue="@(e => e.Count)" />

                    <ApexPointSeries TItem="QueueData"
                                     Items="_activityData"
                                     Name="Activity"
                                     SeriesType="SeriesType.Bar"
                                     XValue="@(e => e.Stage)"
                                     YValue="@(e => e.Count)" />
                </ApexChart>
            </MudCardContent>
        </MudCard>
    </MudItem>
}





@code {
    private bool _loading;
    private int _enrolmentPqa;
    private int _enrolmentQa1;
    private int _enrolmentQa2;
    private int _enrolmentEscalation;
    private int _activityPqa;
    private int _activityQa1;
    private int _activityQa2;
    private int _activityEscalation;
    
    private List<QueueData> _enrolmentData = new();
    private List<QueueData> _activityData = new();

   
    private ApexChartOptions<QueueData> _options = new()
    {
        Chart = new Chart
        {
            Height = "100%",
            Stacked = false,
            Toolbar = new ApexCharts.Toolbar
            {
                Show = true,
                Export = new ExportOptions
                {
                    Csv = new ApexCharts.ExportCSV()
                    {
                        Filename = "Participants",
                    },
                    Png = new ExportPng()
                    {
                        Filename = "Participants-Chart"
                    },
                    Svg = new ExportSvg()
                    {
                        Filename  = "Participants-Pie-Chart"
                    }
                }
            },
        },
        Xaxis = new XAxis
        {
            Title = new AxisTitle
            {
                Text = "Queue Stage"
            },
            Categories = new List<string> { "PQA", "QA1", "QA2", "Escalation" }
        },
        Yaxis =
        [
            new YAxis
            {
                Title = new AxisTitle
                {
                    Text = "Number of Items"
                },
                Min = 0
            }
        ],
        Legend = new Legend
        {
            Position = LegendPosition.Top,
            HorizontalAlign = Align.Center
        },
        DataLabels = new DataLabels
        {
            Enabled = true
        },
        Responsive =
        [
            new()
            {
                Breakpoint = 768,
                Options = new ApexChartOptions<QueueData>
                {
                    Chart = new Chart
                    {
                        Height = 300
                    },
                    Legend = new Legend
                    {
                        Position = LegendPosition.Bottom
                    }
                }
            }
        ]
    };

    [CascadingParameter] 
    public UserProfile UserProfile { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        var unitOfWork = GetNewUnitOfWork();

        var context = unitOfWork.DbContext;
        // pqa, first pass, second pass, escalation
        _enrolmentPqa = await context.EnrolmentPqaQueue.CountAsync(e => e.IsCompleted == false);
        _enrolmentQa1 = await context.EnrolmentQa1Queue.CountAsync(e => e.IsCompleted == false);
        _enrolmentQa2 = await context.EnrolmentQa2Queue.CountAsync(e => e.IsCompleted == false);
        _enrolmentEscalation = await context.EnrolmentEscalationQueue.CountAsync(e => e.IsCompleted == false);

        // pqa, first pass, second pass, escalation
        _activityPqa = await context.ActivityPqaQueue.CountAsync(e => e.IsCompleted == false);
        _activityQa1 = await context.ActivityQa1Queue.CountAsync(e => e.IsCompleted == false);
        _activityQa2 = await context.ActivityQa2Queue.CountAsync(e => e.IsCompleted == false);
        _activityEscalation = await context.ActivityEscalationQueue.CountAsync(e => e.IsCompleted == false);

        PrepareChartData();
        
        _loading = false;

    }
    
    private void PrepareChartData()
    {
        _enrolmentData =
        [
            new QueueData
            {
                Stage = "PQA",
                Count = _enrolmentPqa
            },
            new QueueData
            {
                Stage = "QA1",
                Count = _enrolmentQa1
            },
            new QueueData
            {
                Stage = "QA2",
                Count = _enrolmentQa2
            },
            new QueueData
            {
                Stage = "Escalation",
                Count = _enrolmentEscalation
            }
        ];

        _activityData =
        [
            new QueueData
            {
                Stage = "PQA",
                Count = _activityPqa
            },
            new QueueData
            {
                Stage = "QA1",
                Count = _activityQa1
            },
            new QueueData
            {
                Stage = "QA2",
                Count = _activityQa2
            },
            new QueueData
            {
                Stage = "Escalation",
                Count = _activityEscalation
            }
        ];
    }
    
    public class QueueData
    {
        public string Stage { get; set; } = string.Empty;
        public int Count { get; set; }
    }

} 
