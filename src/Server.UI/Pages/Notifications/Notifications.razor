@page "/pages/notifications"
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Notifications
@using Cfo.Cats.Application.SecurityConstants
@using Cfo.Cats.Application.Features.Notifications.DTOs
@using Cfo.Cats.Application.Features.Notifications.Queries
@using Cfo.Cats.Application.Features.Notifications.Specifications
@using Cfo.Cats.Application.Features.Notifications.Command
@using Humanizer

@inject IStringLocalizer<Notifications> L

@inherits CatsComponentBase


<PageTitle>@L["Notification"]</PageTitle>
@* <PageTitle>Notifications</PageTitle> *@
<style>
    .invisible {
    visibility: hidden;
    }
</style>

<MudDataGrid ServerData="@(ServerReload)"
             FixedHeader="true"
             FixedFooter="true"
             Virtualize="true"
             @bind-RowsPerPage="_defaultPageSize"
             Height="calc(100vh - 330px)"
             Loading="@_loading"
             MultiSelection="true"
             @bind-SelectedItem="_currentDto"
             Hover="true"
             @ref="_table">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex flex-column">
                <MudSwitch T="bool" Class="mt-10" Value="@Query.IncludeReadNotifications" Label="Include Read Notifications" Color="Color.Primary" ValueChanged="OnIncludeReadNotificationsChanged"></MudSwitch>
            </div>
        </div>
        <div class="d-flex flex-column justify-end">                
            <div class="d-flex">
                <MudButton Variant="Variant.Outlined"
                            Size="Size.Small"
                            Disabled="@(SelectedNotifications.Any() == false || _loading)"
                           OnClick="@(() => MarkAsUnread())"
                            StartIcon="@Icons.Material.Filled.MoveDown" IconColor="Color.Surface" Color="Color.Primary"
                            Style="margin-right: 4px; margin-bottom:4px">
                    @ConstantString.MarkAsUnread
                </MudButton>   
                <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true"></MudHidden>
                <MudButton Variant="Variant.Outlined"
                            Size="Size.Small"
                            Disabled="@(SelectedNotifications.Any() == false || _loading)"
                            OnClick="@(() => MarkAsRead())"
                            StartIcon="@Icons.Material.Filled.MoveDown" IconColor="Color.Surface" Color="Color.Primary"
                            Style="margin-right: 4px; margin-bottom:4px">
                    @ConstantString.MarkAsRead
                </MudButton>   
                <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true"></MudHidden>
            </div>
        </div>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Select" Sortable="false">
            <CellTemplate>
                <MudCheckBox T="bool" @onclick="()=>OnNotificationCheckedChanged(context.Item.Id)"></MudCheckBox>                
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Heading" Title="Heading" Sortable="false">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2">
                        <MudLink Href="@context.Item.Link">
                            @context.Item.Heading
                        </MudLink>
                    </MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Details" Title="Details" Sortable="false">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2">@context.Item.Details</MudText>
                    <MudText Typo="Typo.body2">@context.Item.NotificationDate.Humanize()</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
    </Columns>
    <NoRecordsContent>
        <MudText>@ConstantString.NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ConstantString.Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new[] { 10, 15, 30, 50 })" />
    </PagerContent>
</MudDataGrid>

@code {

    //[Inject]
    //public string? Title { get; private set; }
    private int _defaultPageSize = 15;

    private MudDataGrid<NotificationDto> _table = default!;
    private bool _loading;

    private NotificationDto _currentDto = new() { Heading = "" };

    private NotificationsWithPaginationQuery.Query Query { get; set; } = new();

    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;
    [CascadingParameter] private UserProfile? UserProfile { get; set; }

    private List<Guid> SelectedNotifications { get; set; } = new();

    private async Task<GridData<NotificationDto>> ServerReload(GridState<NotificationDto> state)
    {
        try
        {
            _loading = true;
            Query.CurrentUser = UserProfile;
            Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Created";
            Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            var result = await GetNewMediator().Send(Query).ConfigureAwait(false);
            return new GridData<NotificationDto> { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }
    }
    private async Task MarkAsRead()
    {
        Result<bool>? result = false;
        try
        {

            result = await GetNewMediator().Send(new MarkAsRead.Command
            {
                CurrentUser = UserProfile,
                NotificationsToMarkAsRead = SelectedNotifications.ToArray()
            });
        }
        finally
        {
            if(result is not { Succeeded: true })
            {
                Snackbar.Add(result?.ErrorMessage ?? "An unknown issue occurred when marking noticiation(s) as read", Severity.Error);
            }
            SelectedNotifications.Clear();
            StateHasChanged();            
        }
           
        await _table.ReloadServerData();
    }    
    private async Task MarkAsUnread()
    {
        Result<bool>? result = false;
        try
        {

            result = await GetNewMediator().Send(new MarkAsUnread.Command
            {
                CurrentUser = UserProfile,
                NotificationsToMarkAsUnread = SelectedNotifications.ToArray()
            });
        }
        finally
        {
            if(result is not { Succeeded: true })
            {
                Snackbar.Add(result?.ErrorMessage ?? "An unknown issue occurred when marking noticiation(s) as unread", Severity.Error);
            }
            SelectedNotifications.Clear();
            StateHasChanged();
        }

        await _table.ReloadServerData();
    }

    private void OnNotificationCheckedChanged(Guid notificationId)
    {
        if (!SelectedNotifications.Remove(notificationId))
        {
            SelectedNotifications.Add(notificationId);
        }    
        //await NotificationService.MarkNotificationsAsRead();
    }
    private async Task OnIncludeReadNotificationsChanged(bool value)
    {
        Query.IncludeReadNotifications = value;
        await _table.ReloadServerData();
    }

}