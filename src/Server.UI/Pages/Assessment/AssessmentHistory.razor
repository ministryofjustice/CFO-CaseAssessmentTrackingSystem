@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Application.Features.Participants.Queries

@* @using Cfo.Cats.Application.Features.Assessments.Commands *@
@using Cfo.Cats.Application.Features.Assessments.DTOs
@using Cfo.Cats.Application.Features.Assessments.Queries
@using Cfo.Cats.Server.UI.Pages.Participants.Components

@inherits CatsComponentBase

@page "/pages/participants/{Upci}/assessmenthistory"


@if (_model is not null)
{
    var orderedTitles = new List<string> { "Working", "Housing", "Money", "Education", "Health & Addiction", "Relationships", "Thoughts & Behaviours", "Wellbeing & Mental Health" };
    var modelList = _model.Reverse().ToList(); // newest to Oldest
    
    <MudGrid Class="pa-1" Justify="Justify.FlexStart">
    @* @foreach(var pdto in _model){ *@
    @for (int i = 0; i < modelList.Count; i++)
    {
        var pdto = modelList[i];
        var previous = i > 0 ? modelList[i - 1] : null;
        <MudItem  md="12">
        @foreach (var title in orderedTitles)
        {
            @* var pathway = pdto.PathwayScore.FirstOrDefault(p => p.Pathway == title); *@
            var currentPathway = pdto.PathwayScore.FirstOrDefault(p => p.Pathway == title);
            var previousPathway = previous?.PathwayScore.FirstOrDefault(p => p.Pathway == title);

            if (currentPathway != null)
            {
                double scoreChange = 0;
                if (previousPathway != null)
                    scoreChange = currentPathway.Score - previousPathway.Score;
                <RagComponent Pathway="currentPathway">
                    <TooltipContent>
                                <MudIcon Icon="@(scoreChange > 0 ? @Icons.Material.Filled.TrendingUp : @Icons.Material.Filled.TrendingDown)" Color="@(scoreChange > 0 ? GetColor(scoreChange) : Color.Primary)" />
                                <span> Score: @currentPathway.Score Change in Score:  @scoreChange</span>
                    </TooltipContent>
                </RagComponent>

            }
        }
        <MudDivider Class="my-3" />
        </MudItem>
    }
    </MudGrid>
}

@code {
    private IEnumerable<ParticipantAssessmentDto> _model = Enumerable.Empty<ParticipantAssessmentDto>();
    
    [CascadingParameter] public UserProfile UserProfile { get; set; } = default!;

    [Parameter]
    public string Upci { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Upci))
        {
            var query = new GetAssessmentScores.Query()
            {
                ParticipantId = Upci
            };

            var result = await GetNewMediator().Send(query);

            if (result.Succeeded && result.Data != null)
            {
                _model =  result.Data.OrderByDescending(pa => pa.CreatedDate);
            }
        }
    }
    private Color GetColor(double scoreChange) =>
        scoreChange switch
        {
            > 0 => Color.Success,
            _ => Color.Error,
        };
}