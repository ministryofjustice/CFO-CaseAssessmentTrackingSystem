@using Cfo.Cats.Application.Features.Assessments.DTOs
@using Cfo.Cats.Application.Features.Assessments.DTOs.AssessmentModelQuestions
@using Cfo.Cats.Server.UI.Components.Stepper


<style>
    .two-columns {
        display: grid;
        grid-template-columns: repeat(2, 1fr); /* Two columns */
        gap: 10px; /* Adjust the gap between items as needed */
    }

    .toggle-item {
        box-sizing: border-box; /* Ensure padding and borders are included in width/height */
        padding: 10px; /* Add padding if needed */
        justify-content: left !important;
    }
</style>

@if (Model != null)
{
    <CatsMudStep Icon="@Model.Pathway.Icon" Title="@Model.Pathway.Name" Condition="@Validate">
        <ChildContent>
            <MudForm @ref="@form" Model="@Model" Validation="@(Validator.ValidateAsync(Model))" >
    
                <CascadingValue Value="@Model">
                    <MudGrid Class="mb-4 px-10">

                        @foreach (var question in Model.Questions)
                        {

                            <MudItem xs="4">
                                <Cfo.Cats.Server.UI.Pages.Assessment.AssessmentComponents.AssessmentQuestion Question="@question.Question" HelperText="@question.HelperText" />
                                @if (validateCalled && question.IsValid() == false)
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Error">
                                        You must select an option!
                                    </MudText>
                                }
                            </MudItem>

                            <MudItem xs="8">
                                    @if (question is AssessmentToggleQuestionDto atq)
                                    {
                                    <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="@atq.SelectedOption" CheckMark FixedContent Color="Color.Primary">
                                            @foreach (var item in atq.Options)
                                            {
                                                <MudToggleItem Value="@item" Text="@item" />
                                            }
                                        </MudToggleGroup>

                                        @*<AssessmentToggleQuestion Dto="atq" @bind-Value="@(atq.SelectedOption)"/>*@
                                    }
                                    @if (question is AssessmentMultipleChoiceQuestionDto amcq)
                                    {
                                        <MudToggleGroup T="string" Class="two-columns" Vertical SelectionMode="SelectionMode.MultiSelection" @bind-Values="@amcq.Toggles" CheckMark Color="Color.Primary" Outlined="false" Delimiters="false">
                                            @foreach (var item in amcq.Options)
                                            {
                                                <MudToggleItem Class="toggle-item" Value="@item" Text="@item" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" />
                                            }
                                        </MudToggleGroup>
                                    }
                            </MudItem>

                            @if (question != Model.LastQuestion)
                            {
                                <MudDivider />
                            }

                        }
                    </MudGrid>
                </CascadingValue>
            </MudForm>
        </ChildContent>
    </CatsMudStep>
}

@code {

    private MudForm form = new();

    private bool validateCalled = false;


    [Parameter, EditorRequired]
    public AssessmentPathwayDto? Model { get; set; } 

    private async Task<bool> Validate()
    {
        try
        {
            validateCalled = true;
            AssessmentPathwayValidator validator = new AssessmentPathwayValidator();
            var result = await validator.ValidateAsync(Model!);
            return result.IsValid;
        }
        catch
        {
            return false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("removeInlineStyle", ".two-columns");
        }
    }
}
