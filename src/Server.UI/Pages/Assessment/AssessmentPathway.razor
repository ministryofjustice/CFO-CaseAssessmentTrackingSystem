@using Cfo.Cats.Application.Features.Assessments.DTOs
@using Cfo.Cats.Application.Features.Assessments.DTOs.AssessmentModelQuestions
@using Cfo.Cats.Server.UI.Components.Stepper
@using Cfo.Cats.Server.UI.Pages.Assessment.AssessmentQuestions

@if (Model != null)
{
    <CatsMudStep Icon="@Model.Pathway.Icon" Title="@Model.Pathway.Name" Condition="@Validate">
        <ChildContent>
            <MudForm @ref="@form" Model="@Model" Validation="@(Validator.ValidateAsync(Model))" >
    
                <CascadingValue Value="@Model">
                    <MudGrid Class="mb-4 px-10">
                        @foreach (var question in Model.Questions)
                        {
                            <MudItem xs="12">
                                @if (question is AssessmentToggleQuestionDto atq)
                                {
                                    <AssessmentToggleQuestion Dto="atq" @bind-Value="@(atq.SelectedOption)"/>
                                }

                                @if (question is AssessmentMultipleChoiceQuestionDto amcq)
                                {
                                    <AssessmentMultipleChoiceQuestion Dto="@amcq" @bind-Value="@(amcq.Toggles)"/>
                                }
                            </MudItem>
                            @if (question != Model.LastQuestion)
                            {
                                <MudDivider/>
                            }
                        }
                    </MudGrid>
                </CascadingValue>
            </MudForm>
        </ChildContent>
    </CatsMudStep>
}

@code {

    private MudForm form = new();
    
	[Parameter, EditorRequired]
	public AssessmentPathwayDto? Model { get; set; } 

	private async Task<bool> Validate()
	{
        try
        {
            AssessmentPathwayValidator validator = new AssessmentPathwayValidator();
            var result = await validator.ValidateAsync(Model!);
            return result.IsValid;
        }
        catch
        {
            return false;
        }
	}
}
