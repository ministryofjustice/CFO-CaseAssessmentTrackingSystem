@using Cfo.Cats.Application.Features.Assessments.Commands
@using Cfo.Cats.Application.Features.Assessments.DTOs
@using Cfo.Cats.Application.Features.Assessments.Queries
@using Cfo.Cats.Server.UI.Components.Stepper

@inherits CatsComponentBase

@page "/pages/participants/{Upci}/assessment/{AssessmentId:guid}"

@if (_model != null)
{
	<CatsMudStepper @ref="@Stepper" Color="Color.Primary" Variant="Variant.Filled"
					MobileView="false" HeaderBadgeView="HeaderBadgeView.All" HeaderTextView="HeaderTextView.All"
					ActiveStepChanged="@OnStepChange" ShowSkipButton="false"  >
		<ChildContent>
			<MudForm Model="@_model">
				@*This top-level form is responsible for submission *@
                
                @foreach (var pathway in _model.Pathways)
                {
                    <AssessmentPathway Model="pathway" />
                }
                <AssessmentResultStep Processing="@Processing" SubmissionSuccess="@SubmissionSuccess" />
			</MudForm>
		</ChildContent>
	</CatsMudStepper>
}

@code {


    [Parameter]
    public string Upci { get; set; } = string.Empty;

    [Parameter]
    public Guid AssessmentId { get; set; } = Guid.Empty;

    [Parameter]
    public Cfo.Cats.Application.Features.Assessments.DTOs.Assessment? Model { get; set; }

	private Cfo.Cats.Application.Features.Assessments.DTOs.Assessment? _model;

	private CatsMudStepper Stepper { get; set; } = new();

	private int TabsLength => Stepper.Steps.Count();

	//These should be local to result step component in future.
	private bool Processing { get; set; }
	private bool SubmissionSuccess { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
        _model ??= Model;

        if (_model is null)
        {
            var response = await GetNewMediator().Send(new GetAssessment.Query()
            {
                AssessmentId = AssessmentId,
                ParticipantId = Upci
            });

            if (response.Succeeded)
            {
                _model = response.Data!;
            }
        }
    }

	private async Task OnStepChange(int step)
	{
        //todo add an explicit save button.
        Processing = true;
        await GetNewMediator().Send(new SaveAssessment.Command()
        {
            Assessment = _model!
        });
		if (step == Stepper.Steps.Count())
        {
			await SubmitAssessment();
		}
        Processing = false;
    }

	private async Task SubmitAssessment()
	{
		if (Stepper.IsAllStepsCompleted())
        {
            var validator = new AssessmentValidator();
            var result = await validator.ValidateAsync(_model!);

			if (result.IsValid)
			{
				Processing = true;
                var response = await GetNewMediator().Send(new SaveAssessment.Command()
                {
                    Assessment = _model!,
                    Submit = true
                });
				Processing = false;
                SubmissionSuccess = response.Succeeded;
            }
			
		}
	}
}