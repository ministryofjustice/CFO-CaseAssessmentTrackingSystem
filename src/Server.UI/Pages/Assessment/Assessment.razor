@using Cfo.Cats.Application.Features.Assessments.Commands
@using Cfo.Cats.Application.Features.Assessments.DTOs
@using Cfo.Cats.Application.Features.Participants.DTOs;
@using Cfo.Cats.Application.Features.Assessments.Queries
@using Cfo.Cats.Server.UI.Components.Stepper
@using MudBlazor

@inherits CatsComponentBase

@page "/pages/participants/{Upci}/assessment/{AssessmentId:guid}"

@if (_model != null)
{
    <div tabindex="-1" @ref="topOfPageElement"></div>
    <CatsMudStepper @ref="@Stepper" Color="Color.Primary" Variant="Variant.Filled"
    MobileView="false" HeaderBadgeView="HeaderBadgeView.All" HeaderTextView="HeaderTextView.All"
    ActiveStepChanged="@OnStepChange" ShowSkipButton="false" ShowPreviousButton="@_showPrevious">
        <ChildContent>
            <MudForm Model="@_model">
                @*This top-level form is responsible for submission *@

                @foreach (var pathway in _model.Pathways)
                {
                    <AssessmentPathway Model="pathway" />
                }
                <StatusResultStep Processing="@Processing" SubmissionSuccess="@SubmissionSuccess" SuccessText="Assessment Submitted" FailureText="Assessment failed to submit" Upci="@Upci" />
            </MudForm>
        </ChildContent>
        <ActionContent>
            @if (_showDelete)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Error"
                StartIcon="@Icons.Material.Filled.Delete"
                OnClick="DeleteAssessment"
                Style="margin-right: 16px; margin-bottom:4px"
                IconColor="Color.Surface">@ConstantString.Delete</MudButton>
            }
        </ActionContent>

    </CatsMudStepper>
}

@code {
    private bool _showPrevious = false;
    private bool _showDelete = false;
    private bool _isRemoveable = false;

    private ElementReference topOfPageElement;

    //private ParticipantAssessmentDto? ParticipantCompletedAssessmentDto = null;

    [Parameter]
    public string Upci { get; set; } = string.Empty;

    [Parameter]
    public Guid AssessmentId { get; set; } = Guid.Empty;

    [Parameter]
    public Cfo.Cats.Application.Features.Assessments.DTOs.Assessment? Model { get; set; }

    private Cfo.Cats.Application.Features.Assessments.DTOs.Assessment? _model;

    private CatsMudStepper Stepper { get; set; } = new();

    private int TabsLength => Stepper.Steps.Count();

    //These should be local to result step component in future.
    private bool Processing { get; set; }
    private bool SubmissionSuccess { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        _model ??= Model;

        if (_model is null)
        {
            var response = await GetNewMediator().Send(new GetAssessment.Query()
                {
                    AssessmentId = AssessmentId,
                    ParticipantId = Upci
                });

            if (response.Succeeded)
            {
                _model = response.Data!;
            }
        }

        var query = new GetAssessmentScores.Query()
        {
            ParticipantId = Upci
        };

        var result = await GetNewMediator().Send(query);
        if (result is { Succeeded: true, Data: not null })
        {
            var earliestAssessment = result.Data.MinBy(pa => pa.CreatedDate);

            if (earliestAssessment != null)
            {
                _isRemoveable = earliestAssessment!.PathwayScore.Count(x => x.Score > 0) > 0;
            }
        }
        _showDelete = _isRemoveable;
    }

    private async Task OnStepChange(int step)
    {
        try
        {
            Processing = true;

            var result = await GetNewMediator().Send(new SaveAssessment.Command()
                {
                    Assessment = _model!
                });

            // Do not show the previous step on the first or last steps.
            _showPrevious = Stepper.GetActiveIndex() > 0 && Stepper.IsResultStep == false;
            //Show Delete button if it's not the last step and current assessment can be deleted i.e. there is atleast 1 completed assessment.
            _showDelete = _isRemoveable && Stepper.IsResultStep == false;
            if (result.Succeeded)
            {
                await topOfPageElement.FocusAsync();

                if (step == Stepper.Steps.Count())
                {
                    await SubmitAssessment();
                }
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }

        }
        finally
        {
            Processing = false;
        }

    }

    private async Task SubmitAssessment()
    {
        if (Stepper.IsAllStepsCompleted())
        {
            var validator = new AssessmentValidator();
            var result = await validator.ValidateAsync(_model!);

            if (result.IsValid)
            {
                Processing = true;
                var response = await GetNewMediator().Send(new SaveAssessment.Command()
                    {
                        Assessment = _model!,
                        Submit = true
                    });
                Processing = false;
                SubmissionSuccess = response.Succeeded;
            }

        }
    }
    private async Task DeleteAssessment()
    {
        var parameters = new DialogParameters<DeleteConfirmation>
        {
            { x => x.Command, new DeleteAssessment.Command() { AssessmentId = _model!.Id } },
            { x => x.ContentText, "This action will permanently delete this assessment and revert to the last completed one. Are you sure you want to do this?" },
            { x => x.ConfirmText, "Yes" },
            { x => x.CancelText, "No" }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<DeleteConfirmation>("Delete Confirmation", parameters, options);
        var result = await dialog.Result;
        if (!result!.Canceled)
        {
            Snackbar.Add("Deletion Successful!", Severity.Info);
            Navigation.NavigateTo(string.Format("/pages/participants/{0}", Upci), true);
        }
    }
}