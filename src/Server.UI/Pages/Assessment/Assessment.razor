@using Cfo.Cats.Application.Features.Assessments.DTOs
@using Cfo.Cats.Application.Features.Assessments.PostAssessmentCommand
@using Cfo.Cats.Application.Features.Assessments.Queries.GetAssessment
@using Cfo.Cats.Server.UI.Components.Stepper

@page "/Assessment/{Upci}"
@page "/Assessment"

@if (Model != null)
{
	<CatsMudStepper @ref="@Stepper" Color="Color.Primary" Variant="Variant.Filled"
					MobileView="false" HeaderBadgeView="HeaderBadgeView.All" HeaderTextView="HeaderTextView.All"
					ActiveStepChanged="@OnStepChange" DisableSkipButton="true">
		<ChildContent>
			<MudForm Model="@Model">
				@*This top-level form is responsible for submission *@
                
                @foreach (var pathway in Model.Pathways)
                {
                    <AssessmentPathway Model="pathway" />
                }
                <AssessmentResultStep Processing="@Processing" SubmissionSuccess="@SubmissionSuccess" />
			</MudForm>
		</ChildContent>
	</CatsMudStepper>
}

@code {
    
	[Inject]
	private ILogger<Assessment> Logger { get; init; } = null!;

	[Parameter]
	public string Upci { get; set; } = string.Empty;

	private AssessmentDto? Model;

	private CatsMudStepper Stepper { get; set; } = new();

	private int TabsLength => Stepper.Steps.Count();

	//These should be local to result step component in future.
	private bool Processing { get; set; }
	private bool SubmissionSuccess { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
        if (Model is null)
        {
            var response = await Mediator.Send(new GetAssessmentQuery());

            if (response.Succeeded)
            {
                Model = response.Data!;
            }
        }
    }

	private async Task OnStepChange(int step)
	{
		await Task.CompletedTask;

		if (step == Stepper.Steps.Count())
		{
			await SubmitAssessment();
		}
	}

	private async Task SubmitAssessment()
	{
		if (Stepper.IsAllStepsCompleted())
		{
			var isValid = Validator?.Validate(Model!).IsValid;

			if (isValid ?? false)
			{
				Processing = true;
				await Task.Delay(10000); //Simulates a genuine POST request in UI.

				SubmissionSuccess = await Mediator.Send(new PostAssessmentCommand(Model!));

				Processing = false;
			}
			else //Navigate to step where first error is. Uncomplete invalid sections/pathways.
			{
				
			}
		}
	}
}