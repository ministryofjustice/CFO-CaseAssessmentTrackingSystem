
@using System.Diagnostics.CodeAnalysis
@using System.Linq.Expressions
@using Cfo.Cats.Application.Features.Assessments.DTOs
@using Cfo.Cats.Application.Features.Assessments.DTOs.AssessmentModelQuestions
@using Cfo.Cats.Server.UI.Pages.Assessment.AssessmentComponents

@inherits InputBase<string>;

<MudGrid>
	<MudItem xs="4">
		<AssessmentQuestionBase Question="@Dto.Question" HelperText="@Dto.HelperText" />
		@*<ValidationMessage style="color: red;" For="() => Dto.SelectedOption" />*@ 
	</MudItem>
	<MudItem xs="8">
		<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
			@foreach (var option in Dto.Options)
			{
				@*Think you have to do toggle the mud-theme class if I remember correctly.*@
				<MudButton OnClick="() => ValueChanged(option)" ButtonType="ButtonType.Button" Color="Color.Primary"
					Class="@(Dto.SelectedOption == option ? "mud-theme-primary" : "")">
					<MudIcon Icon="@(Dto.SelectedOption == option ? @Icons.Material.Filled.Check : "")" />
					<MudText>
						@option
					</MudText>
					<MudIcon /> @*For symmetry*@
				</MudButton>
			}
		</MudButtonGroup>
	</MudItem>
</MudGrid>

@code {

	private FieldIdentifier fieldIdentifier;

	[CascadingParameter]
	public required AssessmentPathwayDto AssessmentPathwayDto { get; set; }

	[Parameter, EditorRequired]
	public required AssessmentToggleQuestionDto Dto { get; set; }

	public string ToggleGroupWidth => "width: "+(Dto.Options.Length * 150).ToString()+"px;";

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		fieldIdentifier = FieldIdentifier.Create(() => Dto.SelectedOption); 
	}

	private new void ValueChanged(string newValue)
	{
		Dto.SelectedOption = newValue;
        StateHasChanged();
		//EditContext.NotifyFieldChanged(fieldIdentifier);
	}

	protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out string result, [NotNullWhen(false)] out string validationErrorMessage)
	{
		result = value;
		validationErrorMessage = string.Empty;

		return false;
	}
}
