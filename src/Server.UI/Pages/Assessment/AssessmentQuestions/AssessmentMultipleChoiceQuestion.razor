@using System.Linq.Expressions
@using System.Diagnostics.CodeAnalysis
@using Cfo.Cats.Application.Features.Assessments.DTOs
@using Cfo.Cats.Application.Features.Assessments.DTOs.AssessmentModelQuestions
@using Cfo.Cats.Server.UI.Pages.Assessment.AssessmentComponents

@inherits InputBase<bool[]>;

<MudGrid>
	<MudItem xs="4">
		<AssessmentQuestionBase Question="@Dto.Question" HelperText="@Dto.HelperText" />
		<ValidationMessage style="color: red;" For="() => Dto.Toggles" />
	</MudItem>
	<MudItem xs="8">
		<MudGrid>
			@foreach(var option in Dto.Options)
			{
				<MudItem Class="pa-0 ma-0" xs="12" lg="6">
					<MudStack Class="d-flex align-center cursor-pointer" Row="true"
							  @onclick="() => OnValueChanged(Array.IndexOf(Dto.Options, option))">
						<MudCheckBox T="bool" @bind-Value="@(Dto.Toggles[Array.IndexOf(Dto.Options, option)])" />
						<MudText Typo="Typo.body2">@option</MudText>
						<MudSpacer />
					</MudStack>
				</MudItem>
			}
		</MudGrid>
	</MudItem>
</MudGrid>

@code {

	private FieldIdentifier fieldIdentifier;

	[CascadingParameter]
	public required AssessmentPathwayDto AssessmentPathwayDto { get; set; }

	[Parameter, EditorRequired]
	public required AssessmentMultipleChoiceQuestionDto Dto { get; set; } 

	protected override void OnInitialized()
	{
		base.OnInitialized();

		Dto.Toggles = new bool[Dto.Options.Length];
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		fieldIdentifier = FieldIdentifier.Create(() => Dto.Toggles);
	}

	private void OnValueChanged(int index)
	{
		Dto.Toggles[index] = !Dto.Toggles[index];
		EditContext.NotifyFieldChanged(fieldIdentifier);
	}

	//Extending MudInput forces you to override this. 
	protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out bool[] result, [NotNullWhen(false)] out string validationErrorMessage)
	{
		throw new NotImplementedException();
	}
}
