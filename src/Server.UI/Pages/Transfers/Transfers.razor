@page "/pages/participants/transfers"

@using Cfo.Cats.Application.Features.Transfers.Commands
@using Cfo.Cats.Application.Features.Transfers.DTOs
@using Cfo.Cats.Application.Features.Transfers.Queries
@using Cfo.Cats.Application.SecurityConstants
@using Cfo.Cats.Server.UI.Pages.Transfers.Components
@using Humanizer

@inherits CatsComponentBase

@attribute [Authorize(Policy = SecurityPolicies.UserHasAdditionalRoles)]


<MudTable Items="@incomingTransfers" 
          Hover="true" 
          Breakpoint="Breakpoint.Sm" 
          Loading="@isLoadingIncomingTransfers" 
          LoadingProgressColor="Color.Info" 
          Class="mb-8 pa-4"
          Filter="new Func<IncomingTransferDto, bool>(FilterIncoming1)">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.Input" Size="Size.Large" />
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption">Incoming Transfers</MudText>
                    <MudText Typo="Typo.body1">Entered your contract/region</MudText>
                </div>
            </div>
        </div>
        <div class="d-flex flex-column justify-end">
            <MudTextField @bind-Value="_searchIncomingString" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </div>
    </ToolBarContent>
    <HeaderContent>
            <MudTh>@ConstantString.Actions</MudTh>
            <MudTh>Participant</MudTh>
            <MudTh>Occurred</MudTh>
            <MudTh>From</MudTh>
            <MudTh>To</MudTh>
            <MudTh>Type</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@ConstantString.Actions">
            <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small" Dense="true" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                <MudMenuItem OnClick="async() => await Process(context)">Process and Assign</MudMenuItem>
                <MudMenuItem OnClick="() => View(context.ParticipantId)">View Participant</MudMenuItem>
            </MudMenu>            
        </MudTd>    
        <MudTd DataLabel="Participant">
            <div class="d-flex flex-column">
                <MudText Typo="Typo.body2">@context.ParticipantFullName</MudText>
                <MudText Typo="Typo.body2">@context.ParticipantId</MudText>
            </div>
        </MudTd>
        <MudTd DataLabel="Occurred">
            <div class="d-flex flex-column">
                <MudText Typo="Typo.body2">@context.MoveOccured.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudText>
                <MudText Typo="Typo.body2">@context.MoveOccured.Humanize()</MudText>
            </div>
        </MudTd>
        <MudTd DataLabel="From">
            <div class="d-flex flex-column">
                <MudText Typo="Typo.body2">@context.FromLocation.Name</MudText>
                @if(context.FromContract is not null)
                {
                    <MudText Typo="Typo.body2">@context.FromContract</MudText>
                }
            </div>
        </MudTd>
        <MudTd DataLabel="To">
            <div class="d-flex flex-column">
                <MudText Typo="Typo.body2">@context.ToLocation.Name</MudText>
                @if(context.ToContract is not null)
                {
                    <MudText Typo="Typo.body2">@context.ToContract</MudText>
                }
            </div>
        </MudTd>
        <MudTd>
            @context.TransferType.Name
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

<MudTable Items="@outgoingTransfers" 
          Hover="true" 
          Breakpoint="Breakpoint.Sm" 
          Loading="@isLoadingOutgoingTransfers" 
          LoadingProgressColor="Color.Info" 
          Class="mb-8 pa-4"
          Filter="new Func<OutgoingTransferDto, bool>(FilterOutgoing1)">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.Output" Size="Size.Large" />
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption">Outgoing Transfers</MudText>
                    <MudText Typo="Typo.body1">Left your contract/region</MudText>
                </div>
            </div>
        </div>
        <div class="d-flex flex-column justify-end">
            <MudTextField @bind-Value="_searchOutgoingString" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </div>
    </ToolBarContent>
    <HeaderContent>
            <MudTh>Actions</MudTh>
            <MudTh>Participant</MudTh>
            <MudTh>Occurred</MudTh>
            <MudTh>From</MudTh>
            <MudTh>To</MudTh>
            <MudTh>Type</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@ConstantString.Actions">
            <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small" Dense="true" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                <MudMenuItem OnClick="() => View(context.ParticipantId)">View Participant</MudMenuItem>
            </MudMenu>
        </MudTd>
        <MudTd DataLabel="Participant">
            <div class="d-flex flex-column">
                <MudText Typo="Typo.body2">@context.ParticipantFullName</MudText>
                <MudText Typo="Typo.body2">@context.ParticipantId</MudText>
            </div>
        </MudTd>
        <MudTd DataLabel="Occurred">
            <MudText Typo="Typo.body2">@context.MoveOccured.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudText>
            <MudText Typo="Typo.body2">@context.MoveOccured.Humanize()</MudText>
        </MudTd>
        <MudTd DataLabel="From">
            <div class="d-flex flex-column">
                <MudText Typo="Typo.body2">@context.FromLocation.Name</MudText>
                @if(context.FromContract is not null)
                {
                    <MudText Typo="Typo.body2">@context.FromContract</MudText>
                }
            </div>
        </MudTd>
        <MudTd DataLabel="To">
            <div class="d-flex flex-column">
                <MudText Typo="Typo.body2">@context.ToLocation.Name</MudText>
                @if(context.ToContract is not null)
                {
                    <MudText Typo="Typo.body2">@context.ToContract</MudText>
                }
            </div>
        </MudTd>
        <MudTd>
            @context.TransferType.Name
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>



@code {

    private bool isLoadingIncomingTransfers = true;
    private bool isLoadingOutgoingTransfers = true;

    private List<IncomingTransferDto> incomingTransfers = [];
    private List<OutgoingTransferDto> outgoingTransfers = [];

    private string _searchIncomingString = "";
    private string _searchOutgoingString = "";

    protected async override Task OnInitializedAsync()
    {
        incomingTransfers = await GetIncomingTransfers();
        outgoingTransfers = await GetOutgoingTransfers();

        await base.OnInitializedAsync();
    }

    private async Task<List<IncomingTransferDto>> GetIncomingTransfers()
    {
        isLoadingIncomingTransfers = true;
        var query = await GetNewMediator().Send(new GetIncomingTransfers.Query());
        isLoadingIncomingTransfers = false;
        return query.Data?.ToList() ?? [];
    }

    private async Task<List<OutgoingTransferDto>> GetOutgoingTransfers()
    {
        isLoadingOutgoingTransfers = true;
        var query = await GetNewMediator().Send(new GetOutgoingTransfers.Query());
        isLoadingOutgoingTransfers = false;
        return query.Data?.ToList() ?? [];
    }

    async Task Process(IncomingTransferDto incomingTransfer)
    {
        var command = new ProcessIncomingTransfer.Command()
        {
            IncomingTransfer = incomingTransfer
        };

        var parameters = new DialogParameters<ProcessTransferDialog>()
        {
            { x => x.Model, command }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<ProcessTransferDialog>("Process and Assign", parameters, options);

        var state = await dialog.Result;

        if (state!.Canceled is false)
        {
            var result = await GetNewMediator().Send(command);

            if (result.Succeeded)
            {
                dialog.Close();
            }

            // Remove dto from UI
            incomingTransfers.Remove(incomingTransfer);
        }
    }

    private void View(string participantId) => Navigation.NavigateTo($"/pages/participants/{participantId}");
        
    private bool FilterIncoming1(IncomingTransferDto arg)
        => FilterIncoming(arg, _searchIncomingString);

    private bool FilterIncoming(IncomingTransferDto arg, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }

        if (arg.ParticipantId.Contains(searchString, StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }

        if (arg.ParticipantFullName.Contains(searchString, StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }

        if (arg.FromLocation.Name.Contains(searchString, StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }

        if (arg.ToLocation.Name.Contains(searchString, StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private bool FilterOutgoing1(OutgoingTransferDto arg)
        => FilterOutgoing(arg, _searchOutgoingString);

    private bool FilterOutgoing(OutgoingTransferDto arg, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }

        if (arg.ParticipantId.Contains(searchString, StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }

        if (arg.ParticipantFullName.Contains(searchString, StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }

        if (arg.FromLocation.Name.Contains(searchString, StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }

        if (arg.ToLocation.Name.Contains(searchString, StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }
        return false;
    }

}
