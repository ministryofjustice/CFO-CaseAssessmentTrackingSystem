@page "/pages/participants/transfers"

@using Cfo.Cats.Application.Features.Transfers.Commands
@using Cfo.Cats.Application.Features.Transfers.DTOs
@using Cfo.Cats.Application.Features.Transfers.Queries
@using Cfo.Cats.Application.SecurityConstants
@using Cfo.Cats.Server.UI.Pages.Transfers.Components

@inherits CatsComponentBase

@attribute [Authorize(Policy = SecurityPolicies.UserHasAdditionalRoles)]


<MudTable Items="@incomingTransfers" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@isLoadingIncomingTransfers" LoadingProgressColor="Color.Info" Class="mb-8 pa-4" >
    <ToolBarContent>
        <MudIcon Icon="@Icons.Material.Filled.Input" Size="Size.Large" Class="mr-2" />
        <MudText Typo="Typo.h6">Incoming Transfers</MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
            <MudTh>Participant</MudTh>
            <MudTh>Occurred</MudTh>
            <MudTh>From</MudTh>
            <MudTh>To</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Participant">
             <div class="d-flex flex-column">
                <MudText Typo="Typo.body2">@context.ParticipantFullName</MudText>
                <MudText Typo="Typo.body2">@context.ParticipantId</MudText>
             </div>
        </MudTd>
        <MudTd DataLabel="Occurred">
            @context.MoveOccured.ToLocalTime().ToString("dd/MM/yyyy HH:mm")
        </MudTd>
        <MudTd DataLabel="From">
            @context.FromLocation.Name (@context.FromLocation.LocationType.Name)
        </MudTd>
        <MudTd>
             @context.ToLocation.Name (@context.ToLocation.LocationType.Name)
        </MudTd>
        <MudTd>
            @context.TransferType.Name
        </MudTd>
        <MudTd>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="async() => await Process(context)">Process</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudTable Items="@outgoingTransfers" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@isLoadingOutgoingTransfers" LoadingProgressColor="Color.Info" Class="mb-8 pa-4" >
    <ToolBarContent>
        <MudIcon Icon="@Icons.Material.Filled.Output" Size="Size.Large" Class="mr-2" />
        <MudText Typo="Typo.h6">Outgoing Transfers</MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
            <MudTh>Participant</MudTh>
            <MudTh>Occurred</MudTh>
            <MudTh>From</MudTh>
            <MudTh>To</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Participant">
             <div class="d-flex flex-column">
                <MudText Typo="Typo.body2">@context.ParticipantFullName</MudText>
                <MudText Typo="Typo.body2">@context.ParticipantId</MudText>
             </div>
        </MudTd>
        <MudTd DataLabel="Occurred">
            @context.MoveOccured.ToLocalTime().ToString("dd/MM/yyyy HH:mm")
        </MudTd>
        <MudTd DataLabel="From">
            @context.FromLocation.Name (@context.FromLocation.LocationType.Name)
        </MudTd>
        <MudTd>
             @context.ToLocation.Name (@context.ToLocation.LocationType.Name)
        </MudTd>
        <MudTd>
            @context.TransferType.Name
        </MudTd>
        <MudTd>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="() => View(context)">View</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>



@code {

    private bool isLoadingIncomingTransfers = true;
    private bool isLoadingOutgoingTransfers = true;

    private List<IncomingTransferDto> incomingTransfers = [];
    private List<OutgoingTransferDto> outgoingTransfers = [];

    protected async override Task OnInitializedAsync()
    {
        incomingTransfers = await GetIncomingTransfers();
        outgoingTransfers = await GetOutgoingTransfers();

        await base.OnInitializedAsync();
    }

    private async Task<List<IncomingTransferDto>> GetIncomingTransfers()
    {
        isLoadingIncomingTransfers = true;
        var query = await GetNewMediator().Send(new GetIncomingTransfers.Query());
        isLoadingIncomingTransfers = false;
        return query.Data?.ToList() ?? [];
    }

    private async Task<List<OutgoingTransferDto>> GetOutgoingTransfers()
    {
        isLoadingOutgoingTransfers = true;
        var query = await GetNewMediator().Send(new GetOutgoingTransfers.Query());
        isLoadingOutgoingTransfers = false;
        return query.Data?.ToList() ?? [];
    }

    async Task Process(IncomingTransferDto incomingTransfer)
    {
        var command = new ProcessIncomingTransfer.Command()
        {
            IncomingTransfer = incomingTransfer
        };

        var parameters = new DialogParameters<ProcessTransferDialog>()
        {
            { x => x.Model, command }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var dialog = DialogService.Show<ProcessTransferDialog>("Process and Assign", parameters, options);

        var state = await dialog.Result;

        if (state!.Canceled is false)
        {
            var result = await GetNewMediator().Send(command);

            if (result.Succeeded)
            {
                dialog.Close();
            }

            // Remove dto from UI
            incomingTransfers.Remove(incomingTransfer);
        }
    }

    private void View(OutgoingTransferDto transfer) => Navigation.NavigateTo($"/pages/participants/{transfer.ParticipantId}");

}
