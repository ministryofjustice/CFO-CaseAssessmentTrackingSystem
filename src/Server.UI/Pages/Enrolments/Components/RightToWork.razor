@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Application.Features.Participants.DTOs


@if (Model is not null)
{
    if (RightToWorkDtos is not null && RightToWorkDtos.Length > 0)
    {
        <MudText Typo="Typo.body2">
            Right To Work supporting documentation already updated 
        </MudText>
        
        <MudList T="string">
            @foreach (var c in RightToWorkDtos)
            {
                <MudListItem T="string">
                    <MudText Typo="Typo.body2">
                        @c.FileName 
                    </MudText>
                </MudListItem>
            }    
        </MudList>
        
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error" @onclick="() => RightToWorkDtos = null">
            Add New
        </MudButton>
    }
    else
    {
        <MudForm @ref="Form">   
            <MudText Typo="Typo.caption">
                For anyone recorded on PNomis / NDelius as non-British / non-Irish, documentation is required to support their Right to Work. More information on this requirement can be found in the CFO Enrolment Guidance.
            </MudText>
            <MudText Typo="Typo.caption">
                To your knowledge, is any Right to Work (RTW) documentation required for the enrolment of this person?
            </MudText>
            <MudButtonGroup OverrideStyles="false" Class="my-4">
                <MudButton Color="Color.Primary" Variant="@(isRequired ? Variant.Filled : Variant.Outlined)" OnClick="() => isRequired = true">Yes, Right to Work is required</MudButton>
                <MudButton Color="Color.Primary" Variant="@(isRequired ? Variant.Outlined : Variant.Filled)" OnClick="() => isRequired = false">No, Right to Work is not required</MudButton>
            </MudButtonGroup>

            <MudDatePicker Label="Valid From" Editable="true"
                           MaxDate="DateTime.Now.Date"
                           MinDate="DateTime.Now.AddYears(-5).Date"
                           @bind-Date="Model.ValidFrom" Required/>

            <MudDatePicker Label="Valid To" Editable="true"
                           MaxDate="DateTime.MaxValue.Date"
                           MinDate="DateTime.Now.Date"
                           @bind-Date="Model.ValidTo" Required/>

        </MudForm>
    }
}


@code {

    private bool isRequired = true;
    
    [EditorRequired]
    [Parameter]
    public AddRightToWork.Command? Model { get; set; } 

    [Parameter]
    public RightToWorkDto[]? RightToWorkDtos { get; set; }
    
    private MudForm? Form { get; set; }

    public async Task<bool> Validate()
    {
        if (RightToWorkDtos is { Length: > 0 } )
        {
            return true;
        }
        
        await Form!.Validate();

        if (Form.IsValid)
        {
            var result = await Mediator.Send(Model!);
            if (result.Succeeded)
            {
                Snackbar.Add("Right to work evidence uploaded", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Error uploading Right to work evidence: {result.ErrorMessage}", Severity.Error);
            }
        }
        return Form.IsValid;
    }

}

@*
<div class="d-flex flex-column">





</div>

<MudForm @ref="Form" Disabled="isRequired is false">
    <MudDatePicker Label="Date of Expiry" Editable="true" MinDate="DateTime.UtcNow" Required="isRequired" />

    <div class="mb-4 mt-8">
        <CatsFileUpload UploadText="Upload Evidence" Accept=".pdf, .jpeg, .png" FilesChanged="FilesChanged" />
    </div>

    <MudCheckBox @ref="certify" Required="isRequired" Disabled="fileCount == 0" T="bool" RequiredError="You must upload a document and certify" Label="I certify that any documents uploaded are the original or true copies of the original documents, and will not be used to claim payments / results against any other Government contract" />
</MudForm>

@code {
    private bool isRequired = true;
    int fileCount = 0;

    MudCheckBox<bool> certify { get; set; } = default!;

    MudForm? Form { get; set; }

    async Task FilesChanged(int fileCount)
    {
        this.fileCount = fileCount;
        await certify.ResetAsync();
        StateHasChanged();
    }

    public async Task<bool> Validate()
    {
        await Task.CompletedTask;
        Form?.Validate();
        return Form?.IsValid ?? false;
    }
}*@
