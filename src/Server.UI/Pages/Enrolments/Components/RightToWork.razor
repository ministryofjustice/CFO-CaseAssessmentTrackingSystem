@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Domain.Common.Enums
@using Humanizer

@inherits CatsComponentBase

@if (Model is not null)
{
    if (RightToWorkDtos is not null && RightToWorkDtos.Length > 0)
    {
        <MudText Typo="Typo.body2">
            Right To Work supporting documentation already updated
        </MudText>

        <MudList T="string">
            @foreach (var c in RightToWorkDtos)
            {
                <MudListItem T="string">
                    <MudText Typo="Typo.body2">
                        @c.FileName
                    </MudText>
                </MudListItem>
            }
        </MudList>

        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error" @onclick="() => RightToWorkDtos = null">
            Add New
        </MudButton>
    }
    else
    {
        <MudForm @ref="form" Model="Model" Validation="@(Validator.ValidateValue(Model))">
            <MudText Typo="Typo.caption">
                For anyone recorded on PNomis / NDelius as non-British / non-Irish, documentation is required to support their Right to Work. More information on this requirement can be found in the CFO Enrolment Guidance.
            </MudText>

            <MudText Typo="Typo.caption">
                To your knowledge, is any Right to Work (RTW) documentation required for the enrolment of this person?
            </MudText>

            <MudToggleGroup @bind-Value="Model.RightToWorkRequired">
                <MudToggleItem Value="true">Yes, Right to Work is required</MudToggleItem>
                <MudToggleItem Value="false">No, Right to Work is not required</MudToggleItem>
            </MudToggleGroup>
            <MudTextField ReadOnly Underline="false" For="@(() => Model.RightToWorkRequired)" hidden />

            @if (Model.RightToWorkRequired)
            {
                <MudCheckBox @bind-Value="Model.IndefiniteRightToWork"
                             Label="@Model.GetMemberDescription(x => x.IndefiniteRightToWork)"
                             For="() => Model.IndefiniteRightToWork" />

                <MudDatePicker @bind-Date="Model.ValidFrom"
                               For="() => Model.ValidFrom"
                               Label="@Model.GetMemberDescription(x => x.ValidFrom)"
                               MaxDate="DateTime.Now.Date"
                               MinDate="DateTime.Now.AddYears(-5).Date"
                               Editable="true" />

                @if (Model.IndefiniteRightToWork is false)
                {
                    <MudDatePicker @bind-Date="Model.ValidTo"
                                   For="() => Model.ValidTo"
                                   Label="@Model.GetMemberDescription(x => x.ValidTo)"
                                   MaxDate="DateTime.MaxValue.Date"
                                   MinDate="DateTime.Now.Date"
                                   Editable="true" />
                }

                <div class="mb-4 mt-8">
                    <MudFileUpload @bind-Files="Model.Document" 
                                   For="() => Model.Document"
                                   MaximumFileCount="1" 
                                   Accept=".pdf">
                        <ActivatorContent>
                            <MudLoadingButton Loading="_uploading"
                                              Variant="Variant.Outlined"
                                              Color="Color.Primary"
                                              StartIcon="@Icons.Material.Filled.Upload">
                                @if (_uploading)
                                {
                                    @ConstantString.Uploading
                                }
                                else
                                {
                                    @ConstantString.Upload
                                }
                            </MudLoadingButton>
                        </ActivatorContent>
                    </MudFileUpload>
                </div>
            }
        </MudForm>
    }
}

@code {
    private bool _uploading = false;

    [Parameter, EditorRequired]
    public required AddRightToWork.Command Model { get; set; }

    [Parameter]
    public RightToWorkDto[]? RightToWorkDtos { get; set; }

    private MudForm? form { get; set; }

    public async Task<bool> Validate()
    {
        try
        {
            if (RightToWorkDtos is { Length: > 0 } || Model.RightToWorkRequired == false)
            {
                return true;
            }

            await form!.Validate();

            if (form.IsValid)
            {
                var result = await GetNewMediator().Send(Model);

                if (result.Succeeded)
                {
                    Snackbar.Add("Right to work evidence uploaded", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Error uploading Right to work evidence: {result.ErrorMessage}", Severity.Error);
                }
            }

            return form.IsValid;
        }
        catch
        {
            return false;
        }
    }

}