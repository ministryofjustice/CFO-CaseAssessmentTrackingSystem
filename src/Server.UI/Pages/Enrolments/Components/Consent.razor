@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Domain.Common.Enums
@using Humanizer;

@inherits CatsComponentBase

@if (Model is not null)
{
    if (ConsentDto is not null && ConsentDto.Length > 0)
    {
        <MudText Typo="Typo.body2">
            Consent documentation already uploaded:
        </MudText>
        
        <MudList T="string">
            @foreach (var c in ConsentDto)
            {
                <MudListItem T="string">
                    <MudText Typo="Typo.body2">
                        @c.FileName 
                    </MudText>
                </MudListItem>
            }    
        </MudList>
    }
    else
    {
        <MudForm @ref="form" Model="@Model" Validation="@(Validator.ValidateValue(Model))">

        <MudDatePicker @bind-Date="Model.ConsentDate" 
                        For="() => Model.ConsentDate"
                        Label="@Model.GetMemberDescription(x => x.ConsentDate)"
                        MaxDate="DateTime.Now.Date"
                        MinDate="DateTime.Today.AddMonths(-3)"
                        PickerVariant="PickerVariant.Dialog"
                        Editable="true" />

        <div class="mb-4 mt-8">
            <MudFileUpload @bind-Files="Model.Document" 
                            For="() => Model.Document"
                            MaximumFileCount="1" 
                            Accept=".pdf">
                <ActivatorContent>                         
                         @if(!consentUploaded)
                    { 
                    <MudLoadingButton Loading="_uploading"
                                        Variant="Variant.Outlined"
                                        Color="Color.Primary"
                                        StartIcon="@Icons.Material.Filled.Upload">
                            
                        @if (_uploading)
                        {
                            @ConstantString.Uploading
                        }
                        else
                        {
                            @ConstantString.Upload
                        }                      
                    </MudLoadingButton>
                     } 
                </ActivatorContent>
                <SelectedTemplate>
                    <br />
                        @if (@Model.Document==null)
                    {
                            <MudText>No Files</MudText>                        
                    }
                    else
                    {
                            <MudText>
                                Consent documentation uploaded:  @Model.Document.Name
                            </MudText>
                        }
                    <br />
                </SelectedTemplate>
            </MudFileUpload>               
      
            <MudSelect @bind-Value="Model.DocumentVersion" 
                        Label="@Model.GetMemberDescription(x => x.DocumentVersion)" 
                        For="() => Model.DocumentVersion"
                        AnchorOrigin="Origin.BottomLeft">
                @foreach (var version in Documents.Consent.Versions)
                {
                    <MudSelectItem Value="@version">Version @version</MudSelectItem>
                }
            </MudSelect>
        </div>

        <MudCheckBox @bind-Value="Model.Certify"
                        Label="@Model.GetMemberDescription(x => x.Certify)"
                        For="() => Model.Certify"
                        Disabled="Model.Document is null" />
    </MudForm>
    }  
}

@code {
    private bool _uploading = false;

    [Parameter, EditorRequired]
    public required AddConsent.Command Model { get; set; }

    [Parameter]
    public ConsentDto[]? ConsentDto { get; set; }

    private MudForm? form { get; set; }

    private bool consentUploaded;

    //Guard for mulitple next clicks
    private bool uploadingFile;

    public async Task<bool> Validate()
    {
        try
        {
            if (ConsentDto is not null && ConsentDto.Length > 0 || consentUploaded || uploadingFile)
            {
                return true;
            }

            await form!.Validate();

            if (form.IsValid)
            {
                uploadingFile = true;
                var result = await GetNewMediator().Send(Model);

                if (result.Succeeded)
                {
                    Snackbar.Add("Consent form uploaded", Severity.Success);
                    consentUploaded = true;
                }
                else
                {
                    Snackbar.Add($"Error uploading consent {result.ErrorMessage}", Severity.Error);
                    uploadingFile = false;
                    return false;
                }
            }

            return form.IsValid;
        }
        catch
        {
            return false;
        }
    }
}