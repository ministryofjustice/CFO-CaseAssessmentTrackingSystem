@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Domain.Common.Enums

@if (Model is not null)
{
    <MudForm @ref="Form">
        <MudDatePicker Label="Date of Consent" Editable="true" bind MaxDate="DateTime.UtcNow.Date" @bind-Date="Model.ConsentDate" Required/>
        <div class="mb-4 mt-8">

            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" MaximumFileCount="1">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="@context.Id">
                        Upload Files
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>

            <MudSelect T="string" Label="Document Version" AnchorOrigin="Origin.BottomCenter" Required>
                @foreach (var version in documentVersions)
                {
                    <MudSelectItem Value="@version"/>
                }
            </MudSelect>
        </div>

        <MudCheckBox @ref="certify" Disabled="fileCount == 0" T="bool" Required="true" RequiredError="You must upload a document and certify" Label="I certify that any documents uploaded are the original or true copies of the original documents, and will not be used to claim payments / results against any other Government contract"/>
    </MudForm>
}

@code {
    
    
    MudCheckBox<bool> certify { get; set; } = default!;

    [EditorRequired]
    [Parameter]
    public AddConsent.Command? Model { get; set; }

    List<string> documentVersions = new List<string>
    {
        "Version 1.1",
        "Version 1.0",
    };

    int fileCount = 0;

    private async Task UploadFiles(IBrowserFile? file)
    {
        if (file is not null)
        {
            await using var stream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            
            Model!.UploadRequest = new UploadRequest(file.Name, UploadType.Document, memoryStream.ToArray());
            fileCount = 1;
        }
    }

    private MudForm? Form { get; set; }

    public async Task<bool> Validate()
    {
        await Form!.Validate();

        if (Form.IsValid)
        {
            await Mediator.Send(Model!);
        }

        return Form.IsValid;
    }
}
