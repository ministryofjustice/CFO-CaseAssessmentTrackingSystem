@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Domain.Common.Enums
@using Humanizer;

@inherits CatsComponentBase

@if (Model is not null)
{
    if (ConsentDto is not null && ConsentDto.Length > 0)
    {
        <MudText Typo="Typo.body2">
            Consent documentation already uploaded
        </MudText>
        
        <MudList T="string">
            @foreach (var c in ConsentDto)
            {
                <MudListItem T="string">
                    <MudText Typo="Typo.body2">
                        @c.FileName 
                    </MudText>
                </MudListItem>
            }    
        </MudList>
        
        
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error" @onclick="() => ConsentDto = null">
            Add New
        </MudButton>
    }
    else
    {
        <MudForm @ref="Form" Model="@Model" Validation="@(Validator.ValidateAsync(Model))">
            <MudDatePicker Label="Date of Consent" Editable="true" MaxDate="DateTime.Now.Date" @bind-Date="Model.ConsentDate" Required/>
            <div class="mb-4 mt-8">
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" MaximumFileCount="1" Accept=".pdf">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Upload">
                            @if (_uploading)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                @ConstantString.Uploading
                            }
                            else
                            {
                                @ConstantString.Upload
                            }
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>

                <MudSelect T="string" Label="Document Version" AnchorOrigin="Origin.BottomCenter" Required>
                    @foreach (var version in documentVersions)
                    {
                        <MudSelectItem Value="@version"/>
                    }
                </MudSelect>
            </div>

            <MudCheckBox @ref="Certify" Disabled="fileCount == 0" T="bool" Required="true" RequiredError="You must upload a document and certify" Label="I certify that any documents uploaded are the original or true copies of the original documents, and will not be used to claim payments / results against any other Government contract"/>
        </MudForm>
    }
   
}

@code {
    
    private bool _uploading = false;
    
    MudCheckBox<bool> Certify { get; set; } = default!;

    [EditorRequired]
    [Parameter]
    public AddConsent.Command? Model { get; set; }
    
    [Parameter]
    public ConsentDto[]? ConsentDto { get; set; }

    List<string> documentVersions = new()
    {
        "Version 1.1",
        "Version 1.0",
    };

    int fileCount = 0;

    private async Task UploadFiles(IBrowserFile? file)
    {
        if (file is not null)
        {
            const int maxFileSize = 5242880; // 5MB
            if (file.Size > maxFileSize)
            {
                Snackbar.Add($"File {file.Name} exceeds the maximum allowed size of {maxFileSize.Bytes().Humanize()}", Severity.Error);
            }
            else
            {
                _uploading = true;
                await using var stream = file.OpenReadStream(maxFileSize);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                
                Model!.UploadRequest = new UploadRequest(file.Name, UploadType.Document, memoryStream.ToArray());
                fileCount = 1;
                _uploading = false;
            }
            
        }

    }

    private MudForm? Form { get; set; }

    public async Task<bool> Validate()
    {
        if (ConsentDto is not null && ConsentDto.Length > 0)
        {
            return true;
        }

        await Form!.Validate();

        if (Form.IsValid)
        {
           var result = await GetNewMediator().Send(Model!);
           if (result.Succeeded)
           {
               Snackbar.Add("Consent form uploaded", Severity.Success);
           }
           else
           {
               Snackbar.Add($"Error uploading consent {result.ErrorMessage}", Severity.Error);
           }
        }

        return Form.IsValid;
    }
}
