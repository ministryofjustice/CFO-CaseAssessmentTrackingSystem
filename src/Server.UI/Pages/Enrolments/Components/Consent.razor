@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Domain.Common.Enums
@using Humanizer;

@inherits CatsComponentBase

@if (Model is not null)
{
    if (ConsentDto is not null && ConsentDto.Length > 0)
    {
        <MudText Typo="Typo.body2">
            Consent documentation already uploaded
        </MudText>
        
        <MudList T="string">
            @foreach (var c in ConsentDto)
            {
                <MudListItem T="string">
                    <MudText Typo="Typo.body2">
                        @c.FileName 
                    </MudText>
                </MudListItem>
            }    
        </MudList>

        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error" @onclick="() => ConsentDto = null">
            Add New
        </MudButton>
    }
    else
    {
        <MudForm @ref="form" Model="@Model" Validation="@(Validator.ValidateValue(Model))">

            <MudDatePicker @bind-Date="Model.ConsentDate" 
                           For="() => Model.ConsentDate"
                           Label="@Model.GetMemberDescription(x => x.ConsentDate)"
                           MaxDate="DateTime.Now.Date"
                           Editable="true" />

            <div class="mb-4 mt-8">
                <MudFileUpload @bind-Files="Model.Document" 
                               For="() => Model.Document"
                               MaximumFileCount="1" 
                               Accept=".pdf">
                    <ActivatorContent>
                        <MudLoadingButton Loading="_uploading"
                                          Variant="Variant.Outlined"
                                          Color="Color.Primary"
                                          StartIcon="@Icons.Material.Filled.Upload">
                            @if (_uploading)
                            {
                                @ConstantString.Uploading
                            }
                            else
                            {
                                @ConstantString.Upload
                            }
                        </MudLoadingButton>
                    </ActivatorContent>
                </MudFileUpload>

                <MudSelect @bind-Value="Model.DocumentVersion" 
                           Label="@Model.GetMemberDescription(x => x.DocumentVersion)" 
                           For="() => Model.DocumentVersion"
                           AnchorOrigin="Origin.BottomCenter">
                    @foreach (var version in Documents.Consent.Versions)
                    {
                        <MudSelectItem Value="@version">Version @version</MudSelectItem>
                    }
                </MudSelect>
            </div>

            <MudCheckBox @bind-Value="Model.Certify"
                         Label="@Model.GetMemberDescription(x => x.Certify)"
                         For="() => Model.Certify"
                         Disabled="Model.Document is null" />
        </MudForm>
    }
   
}

@code {
    private bool _uploading = false;

    [Parameter, EditorRequired]
    public required AddConsent.Command Model { get; set; }

    [Parameter]
    public ConsentDto[]? ConsentDto { get; set; }

    private MudForm? form { get; set; }

    public async Task<bool> Validate()
    {
        try
        {
            if (ConsentDto is not null && ConsentDto.Length > 0)
            {
                return true;
            }

            await form!.Validate();

            if (form.IsValid)
            {
                var result = await GetNewMediator().Send(Model);

                if (result.Succeeded)
                {
                    Snackbar.Add("Consent form uploaded", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Error uploading consent {result.ErrorMessage}", Severity.Error);
                }
            }

            return form.IsValid;
        }
        catch
        {
            return false;
        }
    }

}
