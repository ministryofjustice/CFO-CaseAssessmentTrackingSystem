@using Cfo.Cats.Application.Features.Locations.DTOs
@using Cfo.Cats.Application.Features.Participants.Commands
@using Severity=MudBlazor.Severity

@if (Model is not null && Locations is not [])
{
    <MudForm @ref="_form" Validation="@(Validator.ValidateValue(Model))">
        <MudTextField T="string" Label="Location" Value="@Model.CurrentLocation.Name" Disabled/>

        <MudCheckBox T="bool" @bind-Value="Model.EnrolFromOtherLocation" Label="Enrol at alternative location"/>

        <MudSelect T="LocationDto" @bind-Value="Model.EnrolmentLocation" Label="Alternative Location" AnchorOrigin="Origin.BottomCenter" Disabled="!Model.EnrolFromOtherLocation">
            @foreach (var location in Locations!)
            {
                <MudSelectItem Value="location">
                    @location.Name
                </MudSelectItem>
            }
        </MudSelect>
        <MudTextFieldExtended T="string" @bind-Value="Model.JustificationReason" Label="Reason for alternative location enrolment" Disabled="!Model.EnrolFromOtherLocation"/>
    </MudForm>
}

@code {

    MudForm? _form;
    
    SetEnrolmentLocation.Validator _modelValidator = new();

    [EditorRequired]
    [Parameter]
    public SetEnrolmentLocation.Command? Model { get; set; } 

    [EditorRequired]
    [Parameter]
    public LocationDto[]? Locations { get; set; } 

    public async Task<bool> Validate()
    {
        try
        {
            await _form!.Validate().ConfigureAwait(false);

            if (_form.IsValid)
            {
                var result = await Mediator.Send(Model);
                if (result.Succeeded)
                {
                    Snackbar.Add("Location details saved", Severity.Info);
                }
                else
                {
                    Snackbar.Add(result.ErrorMessage, Severity.Error);
                }
            }

            return _form.IsValid;
        }
        catch
        {
            return false;
        }
    }



    

}
