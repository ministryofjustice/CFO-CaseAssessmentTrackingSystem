@using Cfo.Cats.Application.Features.Locations.DTOs
@using Cfo.Cats.Application.Features.Locations.Queries.GetAll
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Application.Features.Locations.DTOs


@if (Participant is not null)
{
    <MudForm @ref="Form">
        <MudTextField T="string" Label="Location" Value="@Participant.CurrentLocation.Name" Disabled />

        <MudCheckBox T="bool" @bind-Value="enrolFromOtherLocation" Label="Enrol at alternative location" />

        @if (enrolFromOtherLocation)
        {
            <MudSelect T="LocationDto" @bind-Value="selectedLocation" Label="Alternative Location" AnchorOrigin="Origin.BottomCenter" Required>
                @foreach (var location in Locations.Where(l => l.Name != Participant.CurrentLocation.Name))
                {
                    <MudSelectItem Value="location">
                        @location.Name
                    </MudSelectItem>
                }
            </MudSelect>
            <MudTextFieldExtended T="string" @bind-Value="_justification" Label="Reason for alternative location enrolment" Disabled="!enrolFromOtherLocation" Required="enrolFromOtherLocation"/>
        }

    </MudForm>

}


@code {
    
    [CascadingParameter]
    public UserProfile? UserProfile { get; set; }

    [Parameter, EditorRequired]
    public ParticipantDto Participant { get; set; } = null!;
    
    private LocationDto? selectedLocation;
    private string? _justification;
    bool enrolFromOtherLocation;

    MudForm? Form { get; set; }

    LocationDto[] Locations { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var response = await Mediator.Send(new GetAllLocationsQuery()
        {
            UserProfile = UserProfile!
        });

        if (response.Succeeded)
        {
            Locations = response.Data!;
            selectedLocation = Participant.EnrolmentLocation;
            enrolFromOtherLocation = Participant.EnrolmentLocation is not null && Participant.EnrolmentLocation.Id != Participant.CurrentLocation.Id;
            _justification = Participant.EnrolmentLocationJustification;
        }
        
        await base.OnInitializedAsync();
    }

    public async Task<bool> Validate()
    {
        await Form!.Validate();

        if (Form.IsValid)
        {
            SetEnrolmentLocation.Command command = new SetEnrolmentLocation.Command(
                Participant.Id,
                Participant.CurrentLocation.Id,
                selectedLocation?.Id ?? Participant.CurrentLocation.Id,
                _justification
            );
            var result = await Mediator.Send(command);
        }

        return Form.IsValid;
    }

}
