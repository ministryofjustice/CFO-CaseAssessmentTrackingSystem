@using Cfo.Cats.Application.Features.Locations.DTOs
@using Cfo.Cats.Application.Features.Participants.Commands
@inject IStringLocalizer<Location> L

@if (Model is not null && Locations is not [])
{
    <MudForm Model="Model" @ref="_form" Validation="@(Validator.ValidateValue(Model))">

        <MudGrid>
            <MudItem xs="12">
                <MudTextField Label="@L[Model.GetMemberDescription(x => x.CurrentLocation)]" 
                              @bind-Value="Model.CurrentLocation.Name" 
                              ReadOnly="true"
                              Variant="Variant.Text">
                </MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudCheckBox T="bool" @bind-Value="Model.EnrolFromOtherLocation"
                             Label="@L[Model.GetMemberDescription(x => x.EnrolFromOtherLocation)]">
                </MudCheckBox>
            </MudItem>
            @if (Model.EnrolFromOtherLocation)
            {
                <MudItem xs="12">
                    <MudSelect T="LocationDto"
                               Label="@L["Alternative Location"]"
                               Required="true"
                               @bind-Value="@Model.EnrolmentLocation"
                               For="@(()=>Model.EnrolmentLocation)">
                        @foreach (var item in Locations!)
                        {
                            <MudSelectItem T="LocationDto" Value="@item">
                                @item.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="@L[Model.GetMemberDescription(x => x.JustificationReason)]"
                                  @bind-Value="Model.JustificationReason"
                                  For="@(()=>Model.JustificationReason)">
                    </MudTextField>
                </MudItem>
            }
        </MudGrid>

        @* 

       
        <MudTextFieldExtended T="string" @bind-Value="Model.JustificationReason" Label="" Disabled="!Model.EnrolFromOtherLocation"/> *@
    </MudForm>
}

@code {

    MudForm? _form;
    
    SetEnrolmentLocation.Validator _modelValidator = new();

    [EditorRequired]
    [Parameter]
    public SetEnrolmentLocation.Command? Model { get; set; } 

    [EditorRequired]
    [Parameter]
    public LocationDto[]? Locations { get; set; } 

    public async Task<bool> Validate()
    {
        try
        {
            await _form!.Validate().ConfigureAwait(false);

            if (_form.IsValid)
            {
                var result = await Mediator.Send(Model);
                if (result.Succeeded)
                {
                    Snackbar.Add("Location details saved", Severity.Info);
                }
                else
                {
                    Snackbar.Add(result.ErrorMessage, Severity.Error);
                }
            }

            return _form.IsValid;
        }
        catch
        {
            return false;
        }
    }
}
