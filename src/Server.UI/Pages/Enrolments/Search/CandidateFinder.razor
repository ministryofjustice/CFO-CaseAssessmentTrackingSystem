@using System.Collections.Immutable
@using Cfo.Cats.Application.Features.Candidates.DTOs
@using MudExtensions


<MudGrid>
    <MudItem xs="MatchFound ? 8 : 12">
        <CascadingValue Value="response">
            <CandidateSearch @ref="search" />
        </CascadingValue>
        <MudContainer Class="d-flex px-0 pt-8">
            <MudSpacer />
            <MudLoadingButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Search" Loading="IsLoading" Disabled="MatchFound">
                Search
            </MudLoadingButton>
        </MudContainer>
    </MudItem>
    @if (MatchFound)
    {
        <MudItem xs="4">
            <CandidateView OnEnrol="Enrol" OnCancel="Reset" />
        </MudItem>
    }
</MudGrid>

@code {
    public bool IsLoading { get; set; } = false;

    [Parameter]
    public EventCallback<CandidateDto> OnCandidateFound { get; set; }

    [Parameter]
    public EventCallback<List<string>> OnUpdate { get; set; }

    private CandidateSearch? search;

    private CandidateDto[]? response;

    public bool MatchFound => response is { Length: 1 };

    public async Task Search()
    {
        IsLoading = true;

        search?.form?.Validate();

        if(search?.form?.IsValid is false)
        {
            IsLoading = false;
            return;
        }

        var result = await search?.Submit()!;

        response ??= result;

        //todo: handle too many or not enough

        StateHasChanged();
        search?.form?.Validate();

        IsLoading = false;
    }

    public async Task Enrol()
    {
        await OnUpdate.InvokeAsync([]);
        await OnCandidateFound.InvokeAsync(response!.First());
    }

    private void Reset()
    {
        response = null;
    }

}
