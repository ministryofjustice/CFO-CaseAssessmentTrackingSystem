@using Cfo.Cats.Application.Features.Activities.Queries
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.PathwayPlans.Commands
@using Cfo.Cats.Application.Features.PathwayPlans.DTOs
@using Cfo.Cats.Application.Features.PathwayPlans.Queries
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Objectives
@using Cfo.Cats.Server.UI.Pages.Objectives.Tasks
@using Cfo.Cats.Server.UI.Pages.Activities
@using Humanizer

@inherits CatsComponentBase

<MudListItem T="ObjectiveDto" Ripple="false" Expanded>
    <ChildContent>
        <div class="d-flex gap-2 align-center">
            @if(Model.IsCompleted)
            {
                <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Small" />
            }
            <MudText Typo="Typo.subtitle2">@Model.DisplayName</MudText>
            <MudText>(@Model.Tasks.Count(x => x.IsCompleted)/@Model.Tasks.Count())</MudText>
            @if(Model.IsCompleted)
            {
                @if (Model.CompletedStatus == CompletionStatus.Done)
                {
                    <MudChip T="string" Text="@Model.CompletedStatus.Name" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.Done" />
                }
                else if (Model.CompletedStatus == CompletionStatus.NotRequired)
                {
                    <MudChip T="string" Text="@Model.CompletedStatus.Name" Size="Size.Small" Color="Color.Dark" Icon="@Icons.Material.Filled.Close" />
                }
            }
            else
            {
                if(Model.Tasks.Any(task => task.IsOverdue))
                {
                    <MudIcon Color="Color.Error" Icon="@Icons.Material.Filled.AccessTime" />
                }
                else if(Model.Tasks.Any(task => task.IsDueSoon))
                {
                    <MudIcon Color="Color.Warning" Icon="@Icons.Material.Filled.AccessTime" />
                }
            }
        </div>
    </ChildContent>
    <NestedList>
        <CascadingValue Value="Model">
            @foreach (var task in Model.Tasks
            .Where(task => task.IsCompleted is false || HideCompletedTasks is false)
            .OrderBy(task => task.Created))
            {
                <ObjectiveTask Model="task" OnChange="async() => await OnChange.InvokeAsync()" ParticipantIsActive="ParticipantIsActive" PathwayPlanId="Model.PathwayPlanId" />
            }
        </CascadingValue>
        <div class="d-flex align-center ml-2 mt-4 mb-2">
            @if (Model.IsCompleted is false && ParticipantIsActive)
            {
                <MudTooltip Text="Complete">
                    <MudIconButton OnClick="Complete" Icon="@Icons.Material.Filled.Lock" Disabled="Model.IsCompleted" />
                </MudTooltip>

                @if(Model.CanBeRenamed)
                {
                    <MudTooltip Text="Rename">
                        <MudIconButton OnClick="Rename" Icon="@Icons.Material.Filled.EditNote" Disabled="Model.IsCompleted" />
                    </MudTooltip>
                }
            }

            <MudTooltip Text="Expand">
                <MudIconButton OnClick="Expand" Icon="@Icons.Material.Filled.OpenInNew" />
            </MudTooltip>

            <MudTooltip Text="Activity/ETE History">
                <MudIconButton OnClick="ShowActivityHistory" Icon="@Icons.Material.Filled.LibraryBooks" />
            </MudTooltip>

            @if (Model.IsCompleted is false && ParticipantIsActive)
            {
                <MudTooltip Text="New Task">
                    <MudIconButton OnClick="AddTask" Icon="@Icons.Material.Filled.Add" Disabled="Model.IsCompleted" />
                </MudTooltip>
            }
        </div>
    </NestedList>
</MudListItem>