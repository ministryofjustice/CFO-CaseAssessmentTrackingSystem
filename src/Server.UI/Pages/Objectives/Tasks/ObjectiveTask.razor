@using Cfo.Cats.Application.Features.Activities.Commands
@using Cfo.Cats.Application.Features.Activities.Queries
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.PathwayPlans.Commands
@using Cfo.Cats.Application.Features.PathwayPlans.DTOs
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Activities
@using Humanizer

@inherits CatsComponentBase

<MudListItem Value="@Model" Class="cursor-default mud-list-item-child" Ripple="false" OnClickPreventDefault>
    <AvatarContent>
        @if (Model.IsCompleted)
        {
            <MudIconButton Icon="@Icons.Material.Filled.CheckBox" Disabled />
        }
        else
        {
            <MudIconButton OnClick="Complete" Icon="@Icons.Material.Filled.CheckBoxOutlineBlank" />
        }
    </AvatarContent>
    <ChildContent>
        <div class="d-flex justify-space-between align-center">
            <div>
                <div class="d-flex gap-2 align-center">
                    <MudText>
                        @Model.DisplayName
                    </MudText>
                    @if (Model.IsCompleted)
                    {
                        <MudTooltip Text="Completed">
                            @if (Model.CompletedStatus == CompletionStatus.Done)
                            {
                                <MudChip T="string" Text="@Model.CompletedStatus.Name" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.Done" />
                            }
                            else if (Model.CompletedStatus == CompletionStatus.NotRequired)
                            {
                                <MudChip T="string" Text="@Model.CompletedStatus.Name" Size="Size.Small" Color="Color.Dark" Icon="@Icons.Material.Filled.Close" />
                            }
                        </MudTooltip>
                    }
                    else
                    {
                        if (Model.IsOverdue)
                        {
                            <MudTooltip>
                                <TooltipContent>
                                    Due @Model.Due.ToString("MMM, yyyy")
                                </TooltipContent>
                                <ChildContent>
                                    <MudChip T="string" Text="Overdue" Size="Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.AccessTime" />
                                </ChildContent>
                            </MudTooltip>
                        }
                        else if (Model.IsDueSoon)
                        {
                            <MudTooltip>
                                <TooltipContent>
                                    Due @Model.Due.ToString("MMM, yyyy")
                                </TooltipContent>
                                <ChildContent>
                                    <MudChip T="string" Text="Due soon" Size="Size.Small" Color="Color.Warning" Icon="@Icons.Material.Filled.AccessTime" />
                                </ChildContent>
                            </MudTooltip>
                        }
                    }
                </div>
                @if (Model.IsCompleted)
                {
                    <MudText Typo="Typo.body2">Completed @Model.Completed.Humanize()</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2">Due @Model.Due.ToString("MMM, yyyy")</MudText>
                }
            </div>
            <div class="d-flex gap-2 align-center mr-4">
                <MudTooltip Text="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Disabled="Model.IsCompleted" Size="Size.Small" Dense>
                        <MudMenuItem OnClick="AdjustDate">Adjust date</MudMenuItem>
                        @if(Model.CanBeRenamed)
                        {
                            <MudMenuItem OnClick="Rename">Rename</MudMenuItem>
                        }
                    </MudMenu>
                </MudTooltip>
                <MudTooltip Text="Record">
                    <MudMenu Icon="@Icons.Material.Filled.LibraryAdd" Variant="Variant.Filled" Disabled="Model.IsCompleted" Size="Size.Small" Dense>
                        @if(Model.CanAddActivity)
                        {
                            <MudMenuItem OnClick="AddActivity">Add Activity/ETE</MudMenuItem>
                        }
                        <MudMenuItem Disabled>Add PSF (Coming Soon)</MudMenuItem>
                    </MudMenu>
                </MudTooltip>
                <MudTooltip Text="Expand">
                    <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="Expand" Variant="Variant.Filled" Size="Size.Small" />
                </MudTooltip>
                @if(Model.CanAddActivity)
                {
                    <MudTooltip Text="Activity/ETE History">
                        <MudIconButton Icon="@Icons.Material.Filled.LibraryBooks" OnClick="ShowActivityHistory" Variant="Variant.Filled" Size="Size.Small" />
                    </MudTooltip>
                }
                <MudTooltip>
                    <TooltipContent>
                        Added @Model.Created.Humanize()
                    </TooltipContent>
                    <ChildContent>
                        <MudIcon Icon="@Icons.Material.Filled.Info" />
                    </ChildContent>
                </MudTooltip>
            </div>
        </div>
    </ChildContent>
</MudListItem>

@code {
    [CascadingParameter]
    public required ObjectiveDto Objective { get; set; }

    [Parameter, EditorRequired]
    public required ObjectiveTaskDto Model { get; set; }

    [Parameter, EditorRequired]
    public required Guid PathwayPlanId { get; set; }

    [Parameter]
    public EventCallback OnChange { get; set; }

    [CascadingParameter]
    public required ParticipantSummaryDto ParticipantSummaryDto { get; set; }

    public async Task Complete()
    {
        var command = new CompleteTask.Command()
        {
            TaskId = Model.Id,
            ObjectiveId = Model.ObjectiveId,
            PathwayPlanId = PathwayPlanId
        };

        var parameters = new DialogParameters<CompleteTaskDialog>()
        {
            { x => x.Model, command }
        };

        var options = SetDialogOptions();            
        var dialog = DialogService.Show<CompleteTaskDialog>("Complete task", parameters, options);

        var state = await dialog.Result;

        if (state!.Canceled is false)
        {
            try
            {
                var result = await GetNewMediator().Send(command);

                if (result.Succeeded)
                {
                    await OnChange.InvokeAsync();
                }
            }
            catch(ApplicationException ae)
            {
                Snackbar.Add(ae.Message, Severity.Error);
            }
        }
    }

    public async Task Expand()
    {
        var options = SetDialogOptions();

        await DialogService.ShowAsync<ExpandTaskDialog>(
            Model.Description,
            new DialogParameters<ExpandTaskDialog>()
                {
                    { x => x.Model, Model }
                },
                options
           );
    }

    public async Task AdjustDate()
    {
        var command = new EditTask.Command()
        {
            TaskId = Model.Id,
            ObjectiveId = Model.ObjectiveId,
            Description = Model.Description,
            Due = Model.Due,
            PathwayPlanId = PathwayPlanId
        };

        var parameters = new DialogParameters<AdjustDateTaskDialog>()
        {
            { x => x.Model, command }
        };

        var options = SetDialogOptions();
     
        var dialog = DialogService.Show<AdjustDateTaskDialog>("Adjust date", parameters, options);

        var state = await dialog.Result;

        if (state!.Canceled is false)
        {
            var result = await GetNewMediator().Send(command);

            if (result.Succeeded)
            {
                await OnChange.InvokeAsync();
            }
        }
    }

    public async Task Rename()
    {
        var command = new EditTask.Command()
        {
            TaskId = Model.Id,
            ObjectiveId = Model.ObjectiveId,
            Description = Model.Description,
            Due = Model.Due,
            PathwayPlanId = PathwayPlanId
        };

        var parameters = new DialogParameters<RenameTaskDialog>()
        {
            { x => x.Model, command }
        };

        var options = SetDialogOptions();
            
        var dialog = DialogService.Show<RenameTaskDialog>("Rename task", parameters, options);

        var state = await dialog.Result;

        if (state!.Canceled is false)
        {
            var result = await GetNewMediator().Send(command);

            if (result.Succeeded)
            {
                await OnChange.InvokeAsync();
            }
        }
    }

    async Task AddActivity()
    {
        var parameters = new DialogParameters<AddActivityDialog>()
        {
            { 
                x => x.Model, new AddActivity.Command() 
                { 
                    ParticipantId = ParticipantSummaryDto.Id,
                    TaskId = Model.Id
                } 
            }
        };

        var options = SetDialogOptions();

        var dialog = DialogService.Show<AddActivityDialog>("Add Activity/ETE", parameters, options);
                
        if (await dialog.Result is not { Canceled: true })
        {
            await OnChange.InvokeAsync();
        }
    }

    async Task ShowActivityHistory()
    {
        var parameters = new DialogParameters<ActivitiesDialog>()
        {
            {
                x => x.Model, new ActivitiesWithPagination.Query()
                {
                    ParticipantId = ParticipantSummaryDto.Id,
                    TaskId = Model.Id
                }
            },
            { x => x.Task, Model },
            { x => x.Objective, Objective }
        };

        var options = SetDialogOptions();

        var dialog = DialogService.Show<ActivitiesDialog>("Activity/ETE history for task", parameters, options);
                
        if (await dialog.Result is not { Canceled: true })
        {
            await OnChange.InvokeAsync();
        }
    }

    private DialogOptions SetDialogOptions()
    {
        return new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseButton = true,
                BackdropClick = false
            };
    }
}