@using Cfo.Cats.Application.Features.PathwayPlans.Commands
@using Cfo.Cats.Domain.Common.Enums

@inherits CatsComponentBase

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" Model="Model" Validation="@(Validator.ValidateValue(Model))">
            <MudSelect @bind-Value="Model.Reason"
                       Label="@Model.GetMemberDescription(x => x.Reason)"
                       For="@(() => Model.Reason)">
                @foreach(var status in CompletionStatus.List)
                {
                    <MudSelectItem Value="status">@status.Name</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="Model.Justification"
                          Label="@Model.GetMemberDescription(x => x.Justification)"
                          For="@(() => Model.Justification)"
                          Lines="5"
                          Class="mt-4" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="saving" Color="Color.Primary" OnClick="Submit">
            @($"{ConstantString.Complete} Task")
        </MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm? form;
    bool saving;

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter, EditorRequired]
    public required CompleteTask.Command Model { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        try
        {
            saving = true;

            if (form is null)
            {
                saving = false;
                return;
            }

            await form.Validate();

            if (form.IsValid)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }

        }
        finally
        {
            saving = false;
        }
    }


}
