@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Server.UI.Components.Stepper
@using FluentValidation.Internal

@inherits CatsComponentBase
@implements IValidatorStrategy<RiskDto>

@if (Model is not null)
{
    <MudGrid>
        @* Sexual Harm Prevention Order *@
        <MudItem xs="4">
            Is the person subject to a @Model.GetMemberDescription(x => x.IsSubjectToSHPO)
        </MudItem>
        <MudItem xs="8">
            <MudToggleGroup Class="readonly-toggle" @bind-Value="@Model.IsSubjectToSHPO" CheckMark>
                <MudToggleItem Value="(bool?)true">Yes</MudToggleItem>
                <MudToggleItem Value="(bool?)false">No</MudToggleItem>
            </MudToggleGroup>
            <MudTextField ReadOnly Underline="false" For="@(() => Model.IsSubjectToSHPO)" hidden />
        </MudItem>
        @* NSD Case *@
        <MudItem xs="4">
            @Model.GetMemberDescription(x => x.NSDCase)
        </MudItem>
        <MudItem xs="8">
            <MudTextField Placeholder="@Model.GetMemberDescription(x => x.NSDCase)"
                            @bind-Value="@Model.NSDCase"
                            For="@(() => Model.NSDCase)"
                            Disabled="@(Model.IsSubjectToSHPO is not true)" />
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter, EditorRequired]
    public required RiskDto Model { get; set; }

    [CascadingParameter]
    public MudForm? Form { get; set; }

    public bool ReadOnly { get; private set; } = false;

    protected override Task OnInitializedAsync()
    {
        if (Form is not null)
        {
            ReadOnly = Form.ReadOnly;
        }

        return base.OnInitializedAsync();
    }

    public Action<ValidationStrategy<RiskDto>> Strategy => (options) =>
    {
        options.IncludeProperties(x => x.IsSubjectToSHPO);
        options.IncludeProperties(x => x.NSDCase);
    };
}
