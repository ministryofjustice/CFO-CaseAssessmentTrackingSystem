@inherits CatsComponentBase

<MudTable Items="@Payments" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Created</MudTh>
        <MudTh>Approved</MudTh>
        <MudTh>Contract</MudTh>
        <MudTh>Participant Id</MudTh>
        <MudTh>Location</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Payable</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Created">@context.CreatedOn</MudTd>
        <MudTd DataLabel="Approved">@(context.Approved.HasValue ? context.Approved.Value.ToShortDateString() : "" )</MudTd>
        <MudTd DataLabel="Contract">@context.Contract</MudTd>
        <MudTd DataLabel="Participant Id">@context.ParticipantId</MudTd>
        <MudTd DataLabel="Participant Id">@context.Location</MudTd>
        <MudTd DataLabel="Participant Id">@context.LocationType</MudTd>
        <MudTd DataLabel="Payable">
            
            @if (context.EligibleForPayment)
            {
                @("Yes")
            }
            else
            {
                <MudTooltip Text="@context.IneligibilityReason">
                    No
                </MudTooltip>
            }

            
        </MudTd>
    </RowTemplate>
</MudTable>


@code {

    private bool _loading = true;

    [Parameter, EditorRequired]
    public int Month { get; set; }

    [Parameter, EditorRequired]
    public int Year { get; set; }

    private Data[] Payments { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var unitOfWork = GetNewUnitOfWork();


        var query = from ip in unitOfWork.DbContext.InductionPayments
                    join dd in unitOfWork.DbContext.DateDimensions on ip.Approved equals dd.TheDate
                    join c in unitOfWork.DbContext.Contracts on ip.ContractId equals c.Id 
                    join l in unitOfWork.DbContext.Locations on ip.LocationId equals l.Id   
        where dd.TheMonth == Month && dd.TheYear == Year
            select new
            {
                ip.CreatedOn,
                ip.Approved,
                ip.ParticipantId,
                ip.EligibleForPayment,
                Contract = c.Description,
                ip.LocationType,
                Location = l.Name,
                ip.IneligibilityReason
            };
        

        Payments = await query.AsNoTracking()
            .Select(x => new Data 
                { 
                    CreatedOn = x.CreatedOn,
                    Approved = x.Approved,
                    ParticipantId = x.ParticipantId,
                    EligibleForPayment = x.EligibleForPayment,
                    Contract = x.Contract,
                    Location = x.Location,
                    LocationType = x.LocationType,
                    IneligibilityReason = x.IneligibilityReason
                }
                )
            .ToArrayAsync();

        _loading = false;

    }

    private class Data
    {
        public DateTime CreatedOn { get; set; }
        public DateTime? Approved { get; set; }
        public string Contract { get; set; } = "";
        public string ParticipantId { get; set; } = "";
        public bool EligibleForPayment { get; set; }
        public string LocationType { get; set; } = "";
        public string Location { get; set; } = "";
        public string? IneligibilityReason { get; set; }
    }


}