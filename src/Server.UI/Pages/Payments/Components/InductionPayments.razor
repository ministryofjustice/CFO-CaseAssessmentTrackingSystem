@inherits CatsComponentBase

<style type="text/css">

    .centered {
    text-align: center;
    }

    .mud-table-head th {
    text-align: center;
    font-weight: bold;
    }

</style>

<MudGrid>
    <MudItem xs="12">
        <MudSwitch @bind-Value="DataView" Label="Data View" Color="Color.Info"/>
    </MudItem>

    @if (DataView)
    {
        <MudItem xs="12">
            <MudTable Items="@Payments" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
            GroupBy="_groupDefinition"
            GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
            GroupFooterClass="mb-4">
                <HeaderContent>
                    <MudTh>Created</MudTh>
                    <MudTh>Approved</MudTh>
                    <MudTh>Participant Id</MudTh>
                    <MudTh>Location</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Payable</MudTh>
                </HeaderContent>
                <GroupHeaderTemplate>
                    <MudTh Class="mud-table-cell-custom-group" colspan="6">@context.Key</MudTh>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd DataLabel="Created">@context.CreatedOn</MudTd>
                    <MudTd DataLabel="Approved">@(context.Approved.HasValue ? context.Approved.Value.ToShortDateString() : "" )</MudTd>
                    <MudTd DataLabel="Participant Id">@context.ParticipantId</MudTd>
                    <MudTd DataLabel="Participant Id">@context.Location</MudTd>
                    <MudTd DataLabel="Participant Id">@context.LocationType</MudTd>
                    <MudTd DataLabel="Payable">
                        @if (context.EligibleForPayment)
                        {
                            @("Yes")
                        }
                        else
                        {
                            <MudTooltip Text="@context.IneligibilityReason">
                                No
                            </MudTooltip>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12" md="6">
            <ApexChart TItem="SummaryDataModel" 
                       Title="Inductions By Contract">
                <ApexPointSeries TItem="SummaryDataModel"
                Items="SummaryData"
                Name="Wing"
                SeriesType="SeriesType.Bar"
                XValue="e => e.Contract"
                YValue="e => e.Wings"
                ShowDataLabels="true" />


                <ApexPointSeries TItem="SummaryDataModel"
                Items="SummaryData"
                Name="Hub"
                SeriesType="SeriesType.Bar"
                XValue="e => e.Contract"
                YValue="e => e.Hubs"
                ShowDataLabels="true"/>
            </ApexChart>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTable Items="@SummaryData" 
            Hover="true" 
            Breakpoint="Breakpoint.Sm" 
            Loading="_loading" 
            LoadingProgressColor="Color.Info"
            Striped="true"
            Bordered="true"
            HeaderClass="table-head-bordered"
            CustomHeader="true">
                <HeaderContent>
                    <MudTHeadRow Class="centered">
                        <MudTh>

                        </MudTh>
                        <MudTh colspan="3">
                            Wing
                        </MudTh>
                        <MudTh colspan="3">
                            Hub
                        </MudTh>
                    </MudTHeadRow>
                    <MudTHeadRow Class="centered">
                        <MudTh>Contract</MudTh>
                        <MudTh>Ach</MudTh>
                        <MudTh>Tgt</MudTh>
                        <MudTh>%</MudTh>
                        <MudTh>Ach</MudTh>
                        <MudTh>Tgt</MudTh>
                        <MudTh>%</MudTh>
                    </MudTHeadRow>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Contract">@context.Contract</MudTd>
                    <MudTd Class="centered">@context.Wings</MudTd>
                    <MudTd Class="centered">@context.WingsTarget</MudTd>
                    <MudTd Class="centered">@context.WingsPercentage</MudTd>
                    <MudTd Class="centered">@context.Hubs</MudTd>
                    <MudTd Class="centered">@context.HubsTarget</MudTd>
                    <MudTd Class="centered">@context.HubsPercentage</MudTd>
                </RowTemplate>
            </MudTable>    
        </MudItem>
    }

</MudGrid>





@code {

    private bool _loading = true;

    private bool DataView { get; set; }

    [Parameter]
    public int Month { get; set; }

    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public ContractDto? Contract { get; set; }

    [CascadingParameter]
    public UserProfile CurrentUser { get; set; } = default!;

    private RawData[] Payments { get; set; } = [];

    private TableGroupDefinition<RawData> _groupDefinition = new()
    {
        GroupName = "Contract",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.Contract
    };

    protected override async Task OnInitializedAsync()
    {
        var unitOfWork = GetNewUnitOfWork();

        var query = from ip in unitOfWork.DbContext.InductionPayments
                    join dd in unitOfWork.DbContext.DateDimensions on ip.Approved equals dd.TheDate
                    join c in unitOfWork.DbContext.Contracts on ip.ContractId equals c.Id 
                    join l in unitOfWork.DbContext.Locations on ip.LocationId equals l.Id   
                    where dd.TheMonth == Month && dd.TheYear == Year
                    select new
                    {
                        ip.CreatedOn,
                        ip.Approved,
                        ip.ParticipantId,
                        ip.EligibleForPayment,
                        Contract = c.Description,
                        ContractId = c.Id,
                        ip.LocationType,
                        Location = l.Name,
                        ip.IneligibilityReason,
                        TenantId = c!.Tenant!.Id!
                    };

        query = Contract is null 
                ? query.Where(q => q.TenantId.StartsWith(CurrentUser.TenantId!)) 
                : query.Where(q => q.ContractId == Contract.Id);


        Payments = await query.AsNoTracking()
            .Select(x => new RawData 
                { 
                    CreatedOn = x.CreatedOn,
                    Approved = x.Approved,
                    ParticipantId = x.ParticipantId,
                    EligibleForPayment = x.EligibleForPayment,
                    Contract = x.Contract,
                    Location = x.Location,
                    LocationType = x.LocationType,
                    IneligibilityReason = x.IneligibilityReason
                })
            .OrderBy(e =>  e.Contract)
            .ThenByDescending(e => e.CreatedOn)
            .ToArrayAsync();

        this.SummaryData = Payments
            .Where(e => e.EligibleForPayment)
            .GroupBy(e => e.Contract)
            .Select(x => new SummaryDataModel
            {
                Contract = x.Key,
                Wings = x.Count(g => g.LocationType == "Wing"),
                Hubs = x.Count(g => g.LocationType == "Hub"),
                WingsTarget = TargetProvider.GetTarget(x.Key, Month, Year).Wings, 
                HubsTarget = TargetProvider.GetTarget(x.Key, Month, Year).Hubs,
            })
            .OrderBy(c => c.Contract)
            .ToList();

        _loading = false;

    }

    private List<SummaryDataModel> SummaryData = [];

    private class RawData
    {
        public DateTime CreatedOn { get; set; }
        public DateTime? Approved { get; set; }
        public string Contract { get; set; } = "";
        public string ParticipantId { get; set; } = "";
        public bool EligibleForPayment { get; set; }
        public string LocationType { get; set; } = "";
        public string Location { get; set; } = "";
        public string? IneligibilityReason { get; set; }
    }

    private class SummaryDataModel
    {
        public required string Contract { get; set; }
        public int Wings { get; set; }
        public int WingsTarget { get; set; }
        public decimal WingsPercentage => Wings.CalculateCappedPercentage(WingsTarget);
        public int Hubs { get; set; }
        public int HubsTarget { get; set; }
        public decimal HubsPercentage => Hubs.CalculateCappedPercentage(HubsTarget);
    }
}