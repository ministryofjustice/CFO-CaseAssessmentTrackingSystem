@using Size = MudBlazor.Size
@inherits CatsComponentBase

<style type="text/css">

    .centered {
    text-align: center;
    }

    .mud-table-head th {
    text-align: center;
    font-weight: bold;
    }

</style>

<MudGrid>
    <MudItem xs="12">
        <MudSwitch @bind-Value="DataView" Label="Data View" Color="Color.Info" />
    </MudItem>
    @if (DataView)
    {
        <MudItem xs="12">
            <MudTable Items="@Payments"
                      Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      Loading="@_loading"
                      LoadingProgressColor="Color.Info"
                      Filter="new Func<RawData, bool>(FilterFunc1)">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Activities</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>

                    @if (Contract is null)
                    {
                        <MudTh>Contract</MudTh>
                    }

                    <MudTh>Created</MudTh>
                    <MudTh>Commenced On</MudTh>
                    <MudTh>Approved</MudTh>
                    <MudTh>Participant</MudTh>
                    <MudTh>Location</MudTh>
                    <MudTd>Activity</MudTd>
                    <MudTh>Payable</MudTh>
                </HeaderContent>
                <RowTemplate>
                    @if (Contract is null)
                    {
                        <MudTd DataLabel="Contract">
                            @context.Contract
                        </MudTd>
                    }
                    <MudTd DataLabel="Created">@context.CreatedOn.ToShortDateString()</MudTd>
                    <MudTd DataLabel="Commenced On">@context.CommencedOn.ToShortDateString()</MudTd>
                    <MudTd DataLabel="Approved">@context.ActivityApproved.ToShortDateString()</MudTd>
                    <MudTd DataLabel="Participant">
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body1">@context.ParticipantName</MudText>
                            <MudText Typo="Typo.body1">@context.ParticipantId</MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Location">
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body1">@context.Location</MudText>
                            <MudText Typo="Typo.body1">@context.LocationType</MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="">
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.body1">@context.Type</MudText>
                            <MudText Typo="Typo.body1">@context.Category</MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Payable">

                        @if (context.EligibleForPayment)
                        {
                            @("Yes")
                        }
                        else
                        {
                            <MudTooltip Text="@context.IneligibilityReason">
                                No
                            </MudTooltip>
                        }


                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudItem>
        
    }
    else
    {

        <MudItem xs="12">
            <MudTable Items="@SummaryData" 
            Hover="true" 
            Breakpoint="Breakpoint.Sm" 
            Loading="_loading" 
            LoadingProgressColor="Color.Info"
            Striped="true"
            Bordered="true"
            HeaderClass="table-head-bordered"
            CustomHeader="true">
                <HeaderContent>
                    <MudTHeadRow>
                        <MudTh>

                        </MudTh>
                        <MudTh colspan="3">
                            @ActivityType.SupportWork.Name
                        </MudTh>
                        <MudTh colspan="3">
                            @ActivityType.HumanCitizenship.Name
                        </MudTh>
                        <MudTh colspan="3">
                            @ActivityType.CommunityAndSocial.Name
                        </MudTh>
                        <MudTh colspan="3">
                            @ActivityType.InterventionsAndServicesWraparoundSupport.Name
                        </MudTh>
                    </MudTHeadRow>
                    <MudTHeadRow>
                        <MudTh>
                            Contract
                        </MudTh>
                        <MudTh>Ach</MudTh>
                        <MudTh>Tgt</MudTh>
                        <MudTh>%</MudTh>
                        <MudTh>Ach</MudTh>
                        <MudTh>Tgt</MudTh>
                        <MudTh>%</MudTh>
                        <MudTh>Ach</MudTh>
                        <MudTh>Tgt</MudTh>
                        <MudTh>%</MudTh>
                        <MudTh>Ach</MudTh>
                        <MudTh>Tgt</MudTh>
                        <MudTh>%</MudTh>
                    </MudTHeadRow>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Contract">@context.Contract</MudTd>
                    <MudTd DataLabel="Support" Class="centered">@context.SupportWork</MudTd>
                    <MudTd DataLabel="Target" Class="centered">@context.SupportWorkTarget</MudTd>
                    <MudTd DataLabel="Percentage" Class="centered">@context.SupportWorkPercentage</MudTd>
                    <MudTd DataLabel="Human Citizenship" Class="centered">@context.HumanCitizenship</MudTd>
                    <MudTd DataLabel="Target" Class="centered">@context.HumanCitizenshipTarget</MudTd>
                    <MudTd DataLabel="Percentage" Class="centered">@context.HumanCitizenshipPercentage</MudTd>
                    <MudTd DataLabel="Community and Social" Class="centered">@context.CommunityAndSocial</MudTd>
                    <MudTd DataLabel="Target" Class="centered">@context.CommunityAndSocialTarget</MudTd>
                    <MudTd DataLabel="Percentage" Class="centered">@context.CommunityAndSocialPercentage</MudTd>
                    <MudTd DataLabel="ISW" Class="centered">@context.ISWSupport</MudTd>
                    <MudTd DataLabel="Target" Class="centered">@context.ISWSupportTarget</MudTd>
                    <MudTd DataLabel="Percentage" Class="centered">@context.ISWSupportPercentage</MudTd>
                </RowTemplate>
            </MudTable>    
        </MudItem>
        <MudItem xs="12" md="6">
            <ApexChart TItem="SummaryDataModel"
            Title="Activities By Contract">
                <ApexPointSeries TItem="SummaryDataModel"
                Items="SummaryData"
                Name="@ActivityType.SupportWork.Name"
                SeriesType="SeriesType.Bar"
                XValue="e => e.Contract"
                YValue="e => e.SupportWork"
                />
                <ApexPointSeries TItem="SummaryDataModel"
                Items="SummaryData"
                Name="@ActivityType.HumanCitizenship.Name"
                SeriesType="SeriesType.Bar"
                XValue="e => e.Contract"
                YValue="e => e.HumanCitizenship"
                />
                <ApexPointSeries TItem="SummaryDataModel"
                Items="SummaryData"
                Name="@ActivityType.CommunityAndSocial.Name"
                SeriesType="SeriesType.Bar"
                XValue="e => e.Contract"
                YValue="e => e.CommunityAndSocial"
                />
                <ApexPointSeries TItem="SummaryDataModel"
                Items="SummaryData"
                Name="@ActivityType.InterventionsAndServicesWraparoundSupport.Name"
                SeriesType="SeriesType.Bar"
                XValue="e => e.Contract"
                YValue="e => e.ISWSupport"
                />
            </ApexChart> 
        </MudItem>
    }
</MudGrid>




@code {
    private readonly ApexChartOptions<SummaryDataModel> _options = new();

    private bool _loading = true;

    private bool DataView { get; set; }

    [Parameter]
    public int Month { get; set; }

    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public ContractDto? Contract { get; set; }

    [CascadingParameter] 
    public UserProfile CurrentUser { get; set; } = default!;

    private RawData[] Payments { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var unitOfWork = GetNewUnitOfWork();

        var query = from ep in unitOfWork.DbContext.ActivityPayments
                    join dd in unitOfWork.DbContext.DateDimensions on ep.ActivityApproved equals dd.TheDate
                    join c in unitOfWork.DbContext.Contracts on ep.ContractId equals c.Id
                    join l in unitOfWork.DbContext.Locations on ep.LocationId equals l.Id 
                    join a in unitOfWork.DbContext.Activities on ep.ActivityId equals a.Id
                    where dd.TheMonth == Month && dd.TheYear == Year
                    select new
                    {
                        ep.CreatedOn,
                        a.CommencedOn,
                        ep.ActivityApproved,
                        ep.ParticipantId,
                        ep.EligibleForPayment,
                        ep.ActivityCategory,
                        ep.ActivityType,
                        Contract = c.Description,
                        ContractId = c.Id,
                        ep.LocationType,
                        Location = l.Name,
                        ep.IneligibilityReason,
                        TenantId = c!.Tenant!.Id!,
                        ParticipantName = a.Participant!.FirstName + " " + a.Participant!.LastName
                    };

        query = Contract is null 
            ? query.Where(q => q.TenantId.StartsWith(CurrentUser.TenantId!)) 
            : query.Where(q => q.ContractId == Contract.Id);


        Payments = await query.AsNoTracking()
            .Select(x => new RawData 
                { 
                    CreatedOn = x.CreatedOn,
                    CommencedOn = x.CommencedOn,
                    ActivityApproved = x.ActivityApproved,
                    ParticipantId = x.ParticipantId,
                    EligibleForPayment = x.EligibleForPayment,
                    Contract = x.Contract,
                    Category = x.ActivityCategory,
                    Type = x.ActivityType,
                    Location = x.Location,
                    LocationType = x.LocationType,
                    IneligibilityReason = x.IneligibilityReason,
                    ParticipantName = x.ParticipantName
                })
            .OrderBy(e => e.Contract)
            .ThenByDescending(e => e.CreatedOn)
            .ToArrayAsync();

        this.SummaryData = Payments
            .Where(e => e.EligibleForPayment)
            .GroupBy(e => e.Contract)
            .Select(x => new SummaryDataModel
                {
                    Contract = x.Key,
                    SupportWork = x.Count(g => g.Type == ActivityType.SupportWork.Name),
                    SupportWorkTarget = TargetProvider.GetTarget(x.Key, Month, Year).SupportWork,
                    CommunityAndSocial = x.Count(g => g.Type == ActivityType.CommunityAndSocial.Name),
                    CommunityAndSocialTarget = TargetProvider.GetTarget(x.Key, Month, Year).CommunityAndSocial,
                    HumanCitizenship = x.Count(g => g.Type == ActivityType.HumanCitizenship.Name),
                    HumanCitizenshipTarget = TargetProvider.GetTarget(x.Key, Month, Year).HumanCitizenship,
                    ISWSupport = x.Count(g => g.Type == ActivityType.InterventionsAndServicesWraparoundSupport.Name),
                    ISWSupportTarget = TargetProvider.GetTarget(x.Key, Month, Year).Interventions
                })
            .OrderBy(c => c.Contract)
            .ToList();

        _loading = false;

    }

    private string _searchString = "";
    private List<SummaryDataModel> SummaryData = [];

    private class RawData
    {
        public DateTime CreatedOn { get; set; }
        public DateTime CommencedOn { get;set; }
        public DateTime ActivityApproved { get; set; }
        public string Contract { get; set; } = "";
        public string ParticipantId { get; set; } = "";
        public bool EligibleForPayment { get; set; }
        public string Category { get; set; } = "";
        public string Type { get; set; } = "";
        public string LocationType { get; set; } = "";
        public string Location { get; set; } = "";
        public string? IneligibilityReason { get; set; }
        public string ParticipantName { get; set; } = "";
    }

    private class SummaryDataModel
    {
        public required string Contract {get; set;}
        public int SupportWork { get; set; }
        public int SupportWorkTarget { get;set; }
        public decimal SupportWorkPercentage => SupportWork.CalculateCappedPercentage(SupportWorkTarget);
        public int CommunityAndSocial { get; set; }
        public int CommunityAndSocialTarget { get;set; }
        public decimal CommunityAndSocialPercentage => CommunityAndSocial.CalculateCappedPercentage(CommunityAndSocialTarget);
        public int HumanCitizenship { get; set; }
        public int HumanCitizenshipTarget { get;set; }
        public decimal HumanCitizenshipPercentage => HumanCitizenship.CalculateCappedPercentage(HumanCitizenshipTarget);
        public int ISWSupport { get; set; }
        public int ISWSupportTarget { get;set; }
        public decimal ISWSupportPercentage => ISWSupport.CalculateCappedPercentage(ISWSupportTarget);
    }

    private bool FilterFunc1(RawData data) => FilterFunc(data, _searchString);

    private bool FilterFunc(RawData data, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }

        if (data.ParticipantName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if (data.ParticipantId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if (data.IneligibilityReason is not null && data.IneligibilityReason.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if (data.Category.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if (data.Location.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if (data.LocationType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }


        return false;
    }
    

}