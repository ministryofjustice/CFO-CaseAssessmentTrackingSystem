@inherits CatsComponentBase


<MudGrid>
    <MudItem xs="12">
        <MudSwitch @bind-Value="DataView" Label="Data View" Color="Color.Info">

        </MudSwitch>
    </MudItem>
    @if (DataView)
    {
        <MudItem xs="12">

            <MudTable Items="@Payments" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
                      GroupBy="_groupDefinition"
                      GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
                      GroupFooterClass="mb-4">
                <HeaderContent>
                    <MudTh>Created</MudTh>
                    <MudTh>Approved</MudTh>
                    <MudTh>Participant Id</MudTh>
                    <MudTh>Location</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Payable</MudTh>
                </HeaderContent>
                <GroupHeaderTemplate>
                    <MudTh Class="mud-table-cell-custom-group" colspan="6">@context.Key</MudTh>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd DataLabel="Created">@context.CreatedOn</MudTd>
                    <MudTd DataLabel="Approved">@(context.Approved.HasValue ? context.Approved.Value.ToShortDateString() : "")</MudTd>
                    <MudTd DataLabel="Participant Id">@context.ParticipantId</MudTd>
                    <MudTd DataLabel="Location">@context.Location</MudTd>
                    <MudTd DataLabel="Location Type">@context.LocationType</MudTd>
                    <MudTd DataLabel="Payable">
                        @if (context.EligibleForPayment)
                        {
                            @("Yes")
                        }
                        else
                        {
                            <MudTooltip Text="@context.IneligibilityReason">
                                No
                            </MudTooltip>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>





        </MudItem>
    }
    else
    {
        <MudItem xs="12" md="6">
           <ApexChart TItem="SummaryDataModel"
                      Title="Enrolments By Location">
               <ApexPointSeries TItem="SummaryDataModel"
                                Items="SummaryData"
                                Name="Custody"
                                SeriesType="SeriesType.Bar"
                                XValue="e => e.Contract"
                                YValue="e => e.Custody" />

               <ApexPointSeries TItem="SummaryDataModel"
                                Items="SummaryData"
                                Name="Community"
                                SeriesType="SeriesType.Bar"
                                XValue="e => e.Contract"
                                YValue="e => e.Community" />
           </ApexChart>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTable Items="@SummaryData" Hover="true" Breakpoint="Breakpoint.Sm" Loading="_loading" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>
                        Contract
                    </MudTh>
                    <MudTh>
                        Custody
                    </MudTh>
                    <MudTh>
                        Community
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Contract">@context.Contract</MudTd>
                    <MudTd DataLabel="Custody">@context.Custody</MudTd>
                    <MudTd DataLabel="Community">@context.Community</MudTd>
                </RowTemplate>
            </MudTable>    
        </MudItem>
    }
</MudGrid>






@code {

    private bool _loading = true;

    private bool DataView { get; set; }
    
    [Parameter]
    public int Month { get; set; }

    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public ContractDto? Contract { get; set; }

    [CascadingParameter] 
    public UserProfile CurrentUser { get; set; } = default!;

    private RawData[] Payments { get; set; } = [];

    private TableGroupDefinition<RawData> _groupDefinition = new()
    {
        GroupName = "Contract",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.Contract
    };

    protected override async Task OnInitializedAsync()
    {
        var unitOfWork = GetNewUnitOfWork();


        var query = from ep in unitOfWork.DbContext.EnrolmentPayments
                    join dd in unitOfWork.DbContext.DateDimensions on ep.Approved equals dd.TheDate
                    join c in unitOfWork.DbContext.Contracts on ep.ContractId equals c.Id 
                    join l in unitOfWork.DbContext.Locations on ep.LocationId equals l.Id   
        where dd.TheMonth == Month && dd.TheYear == Year
            select new
            {
                ep.CreatedOn,
                ep.Approved,
                ep.ParticipantId,
                ep.EligibleForPayment,
                Contract = c.Description,
                ContractId = c.Id,
                ep.LocationType,
                Location = l.Name,
                ep.IneligibilityReason,
                TenantId = c!.Tenant!.Id!
            };

        query = Contract is null 
            ? query.Where(q => q.TenantId.StartsWith(CurrentUser.TenantId!)) 
            : query.Where(q => q.ContractId == Contract.Id);

        Payments = await query.AsNoTracking()
            .Select(x => new RawData 
                { 
                    CreatedOn = x.CreatedOn,
                    Approved = x.Approved,
                    ParticipantId = x.ParticipantId,
                    EligibleForPayment = x.EligibleForPayment,
                    Contract = x.Contract,
                    Location = x.Location,
                    LocationType = x.LocationType,
                    IneligibilityReason = x.IneligibilityReason                    
                })
            .OrderBy(e =>  e.Contract)
            .ThenByDescending(e => e.CreatedOn)
            .ToArrayAsync();


        this.SummaryData = Payments
            .Where(e => e.EligibleForPayment)
            .GroupBy(e => e.Contract)
            .Select(x => new SummaryDataModel
            {
                Contract = x.Key,
                Custody = x.Count(g => g.IsCustody()),
                Community = x.Count(g => g.IsCustody() == false)
            })
            .OrderBy(c => c.Contract)
            .ToList();

        _loading = false;

    }

    private List<SummaryDataModel> SummaryData = [];

    private class RawData
    {
        public DateTime CreatedOn { get; set; }
        public DateTime? Approved { get; set; }
        public string Contract { get; set; } = "";
        public string ParticipantId { get; set; } = "";
        public bool EligibleForPayment { get; set; }
        public string LocationType { get; set; } = "";
        public string Location { get; set; } = "";
        public string? IneligibilityReason { get; set; }

        public bool IsCustody() 
        {
            Cfo.Cats.Domain.Common.Enums.LocationType type = SmartEnum<Cfo.Cats.Domain.Common.Enums.LocationType>.FromName(this.LocationType);
            return type.IsCustody;
        }
    }

    private class SummaryDataModel
    {
        public required string Contract {get; set;}
        public int Custody {get;set;}
        public int Community {get;set;}
    }


}    
    
