@inherits CatsComponentBase

<style type="text/css">
    .centered {
        text-align: center;
    }

    .mud-table-head th {
        text-align: center;
        font-weight: bold;
    }
</style>

<MudGrid>
    <MudItem xs="12">
        <MudSwitch @bind-Value="DataView" Label="Data View" Color="Color.Info" />
    </MudItem>
    @if (DataView)
    {
        <MudItem xs="12">
            <MudTable Items="@Payments" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
                      GroupBy="_groupDefinition"
                      GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
                      GroupFooterClass="mb-4">
                <HeaderContent>
                    <MudTh>Created</MudTh>
                    <MudTh>Approved</MudTh>
                    <MudTh>Participant Id</MudTh>
                    <MudTh>Location</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Payable</MudTh>
                </HeaderContent>
                <GroupHeaderTemplate>
                    <MudTh Class="mud-table-cell-custom-group" colspan="6">@context.Key</MudTh>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd DataLabel="Approved">@context.CreatedOn</MudTd>
                    <MudTd DataLabel="Approved">@context.ActivityApproved.ToShortDateString()</MudTd>
                    <MudTd DataLabel="Participant Id">@context.ParticipantId</MudTd>
                    <MudTd DataLabel="Location">@context.Location</MudTd>
                    <MudTd DataLabel="Location Type">@context.LocationType</MudTd>
                    <MudTd DataLabel="Payable">

                        @if (context.EligibleForPayment)
                        {
                            @("Yes")
                        }
                        else
                        {
                            <MudTooltip Text="@context.IneligibilityReason">
                                No
                            </MudTooltip>
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    }
    else
    {
        <MudItem xs="12" md="6">
            <ApexChart TItem="SummaryDataModel"
                       Title="Education & Training By Contract">
                <ApexPointSeries TItem="SummaryDataModel"
                                 Items="SummaryData"
                                 Name="Educations"
                                 SeriesType="SeriesType.Bar"
                                 XValue="e => e.Contract"
                                 YValue="e => e.Educations"
                                 ShowDataLabels="true"/>
            </ApexChart>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTable Items="@SummaryData"
                      Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      Loading="_loading"
                      LoadingProgressColor="Color.Info"
                      Striped="true"
                      Bordered="true"
                      HeaderClass="table-head-bordered"
                      CustomHeader="true">
                <HeaderContent>
                    <MudTHeadRow Class="centered">
                        <MudTh>

                        </MudTh>
                        <MudTh colspan="3">
                            Education & Training
                        </MudTh>
                    </MudTHeadRow>
                    <MudTh>
                        Contract
                    </MudTh>
                    <MudTh>Ach</MudTh>
                    <MudTh>Tgt</MudTh>
                    <MudTh>%</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Contract">@context.Contract</MudTd>
                    <MudTd DataLabel="Education & Training">@context.Educations</MudTd>
                    <MudTd DataLabel="Target">@context.EducationsTarget</MudTd>
                    <MudTd DataLabel="Percentage">@context.EducationsPercentage</MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    }
</MudGrid>





@code {
    
    private bool _loading = true;

    private bool DataView { get; set; }

    [Parameter]
    public int Month { get; set; }

    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public ContractDto? Contract { get; set; }

    [CascadingParameter]
    public UserProfile CurrentUser { get; set; } = default!;

    private RawData[] Payments { get; set; } = [];

    private TableGroupDefinition<RawData> _groupDefinition = new()
    {
        GroupName = "Contract",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.Contract
    };

    protected override async Task OnInitializedAsync()
    {
        var unitOfWork = GetNewUnitOfWork();


        var query = from ep in unitOfWork.DbContext.EducationPayments
            join dd in unitOfWork.DbContext.DateDimensions on ep.ActivityApproved equals dd.TheDate
            join c in unitOfWork.DbContext.Contracts on ep.ContractId equals c.Id
            join l in unitOfWork.DbContext.Locations on ep.LocationId equals l.Id 
        where dd.TheMonth == Month && dd.TheYear == Year
            select new
            {
                ep.CreatedOn,
                ep.ActivityApproved,
                ep.ParticipantId,
                ep.EligibleForPayment,
                Contract = c.Description,
                ep.LocationType,
                ContractId = c.Id,
                Location = l.Name,
                ep.IneligibilityReason,
                        TenantId = c!.Tenant!.Id!
            };

        query = Contract is null
            ? query.Where(q => q.TenantId.StartsWith(CurrentUser.TenantId!))
            : query.Where(q => q.ContractId == Contract.Id);
        
        Payments = await query.AsNoTracking()
            .Select(x => new RawData 
                { 
                    CreatedOn = x.CreatedOn,
                    ActivityApproved = x.ActivityApproved,
                    ParticipantId = x.ParticipantId,
                    EligibleForPayment = x.EligibleForPayment,
                    Contract = x.Contract,
                    Location = x.Location,
                    LocationType = x.LocationType,
                    IneligibilityReason = x.IneligibilityReason
                })
            .OrderByDescending(e => e.CreatedOn)
            .ToArrayAsync();

        this.SummaryData = Payments
            .Where(e => e.EligibleForPayment)
            .GroupBy(e => e.Contract)
            .Select(x => new SummaryDataModel
            {
                Contract = x.Key,
                Educations = x.Count(),
                EducationsTarget = TargetProvider.GetTarget(x.Key, Month, Year).TrainingAndEducation
            })
            .OrderBy(c => c.Contract)
            .ToList();

        _loading = false;

    }

    private List<SummaryDataModel> SummaryData = [];

    private class RawData
    {
        public DateTime CreatedOn { get; set; }
        public DateTime ActivityApproved { get; set; }
        public string Contract { get; set; } = "";
        public string ParticipantId { get; set; } = "";
        public bool EligibleForPayment { get; set; }
        public string LocationType { get; set; } = "";
        public string Location { get; set; } = "";
        public string? IneligibilityReason { get; set; }
    }

    private class SummaryDataModel
    {
        public required string Contract { get; set; } 
        public required int Educations { get; set; } 
        public required int EducationsTarget { get; set; }
        public decimal EducationsPercentage => Educations.CalculateCappedPercentage(EducationsTarget);
    }

}