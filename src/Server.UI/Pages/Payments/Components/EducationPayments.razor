@inherits CatsComponentBase

<MudTable Items="@Payments" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info"
          GroupBy="_groupDefinition"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4">
    <HeaderContent>
        <MudTh>Created</MudTh>
        <MudTh>Approved</MudTh>
        <MudTh>Participant Id</MudTh>
        <MudTh>Location</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Payable</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="6">@context.Key</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Approved">@context.CreatedOn</MudTd>
        <MudTd DataLabel="Approved">@context.ActivityApproved.ToShortDateString()</MudTd>
        <MudTd DataLabel="Participant Id">@context.ParticipantId</MudTd>
        <MudTd DataLabel="Location">@context.Location</MudTd>
        <MudTd DataLabel="Location Type">@context.LocationType</MudTd>
        <MudTd DataLabel="Payable">

            @if (context.EligibleForPayment)
            {
                @("Yes")
            }
            else
            {
                <MudTooltip Text="@context.IneligibilityReason">
                    No
                </MudTooltip>
            }


        </MudTd>
    </RowTemplate>
</MudTable>


@code {

    private bool _loading = true;

    [Parameter, EditorRequired]
    public int Month { get; set; }

    [Parameter, EditorRequired]
    public int Year { get; set; }

    private Data[] Payments { get; set; } = [];

    private TableGroupDefinition<Data> _groupDefinition = new()
    {
        GroupName = "Contract",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.Contract
    };

    protected override async Task OnInitializedAsync()
    {
        var unitOfWork = GetNewUnitOfWork();


        var query = from ep in unitOfWork.DbContext.EducationPayments
            join dd in unitOfWork.DbContext.DateDimensions on ep.ActivityApproved equals dd.TheDate
            join c in unitOfWork.DbContext.Contracts on ep.ContractId equals c.Id
            join l in unitOfWork.DbContext.Locations on ep.LocationId equals l.Id 
        where dd.TheMonth == Month && dd.TheYear == Year
            select new
            {
                ep.CreatedOn,
                ep.ActivityApproved,
                ep.ParticipantId,
                ep.EligibleForPayment,
                Contract = c.Description,
                ep.LocationType,
                Location = l.Name,
                ep.IneligibilityReason
            };
        

        Payments = await query.AsNoTracking()
            .Select(x => new Data 
                { 
                    CreatedOn = x.CreatedOn,
                    ActivityApproved = x.ActivityApproved,
                    ParticipantId = x.ParticipantId,
                    EligibleForPayment = x.EligibleForPayment,
                    Contract = x.Contract,
                    Location = x.Location,
                    LocationType = x.LocationType,
                    IneligibilityReason = x.IneligibilityReason
                })
            .OrderByDescending(e => e.CreatedOn)
            .ToArrayAsync();

        _loading = false;

    }

    private class Data
    {
        public DateTime CreatedOn { get; set; }
        public DateTime ActivityApproved { get; set; }
        public string Contract { get; set; } = "";
        public string ParticipantId { get; set; } = "";
        public bool EligibleForPayment { get; set; }
        public string LocationType { get; set; } = "";
        public string Location { get; set; } = "";
        public string? IneligibilityReason { get; set; }
    }


}