@page "/system/audittrails"

@using Cfo.Cats.Application.Features.AuditTrails.DTOs
@using Cfo.Cats.Application.Features.AuditTrails.Queries.PaginationQuery
@using Cfo.Cats.Application.Features.AuditTrails.Specifications
@using Cfo.Cats.Application.Features.AuditTrails.Caching
@using Cfo.Cats.Application.SecurityConstants

@attribute [Authorize(Roles = $"{RoleNames.SystemSupport}, {RoleNames.QAManager}")]

@inject IStringLocalizer<AuditTrails> L
@inject IMediator Mediator

@inherits CatsComponentBase

<PageTitle>@Title</PageTitle>

<MudDataGrid ServerData="@(ServerReload)"
             T="AuditTrailDto"
             FixedHeader="true"
             FixedFooter="true"
             Virtualize="true"
             @bind-RowsPerPage="defaultPageSize"
             Height="calc(100vh - 300px)"
             Loading="@loading"
             Hover="true" @ref="table"
             BreakPoint="Breakpoint.Sm">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.ReceiptLong" Size="Size.Large"/>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption" Class="mb-2">@Title</MudText>
                    <MudEnumSelect Style="min-width:120px" TEnum="AuditTrailListView" ValueChanged="OnChangedListView" Value="Query.ListView" Dense="true" Label="List View">
                    </MudEnumSelect>
                </div>
            </div>
            <div class="flex-grow-1"/>

            <div class="d-flex flex-column justify-end">
                <div class="d-flex">
                    <MudButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(() => OnRefresh())"
                               StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                               Style="margin-right: 4px; margin-bottom:4px">
                        @ConstantString.Refresh
                    </MudButton>
                </div>

                <MudStack Row="true" AlignItems="AlignItems.Stretch">
                    <MudEnumSelect TEnum="AuditType?" Placeholder="@L["Search for audit type"]" Value="@Query.AuditType" Clearable="true" ValueChanged="@(s => OnSearch(s))" Style="min-width:120px" FullWidth="true"> </MudEnumSelect>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Value="@Query.Keyword" Placeholder="Search" Adornment="Adornment.End" Style="min-width:120px" FullWidth="true"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                        </MudTextField>
                    </MudHidden>
                </MudStack>


            </div>
        </div>
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="AuditTrailDto" ButtonDisabledFunc="@(x => x.AuditType == AuditType.None)"/>
        <PropertyColumn Property="x => x.UserId" Title="@L[currentDto.GetMemberDescription(x => x.UserId)]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2">@context.Item.Owner?.UserName</MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.Item.UserId</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.AuditType" Title="@L[currentDto.GetMemberDescription(x => x.AuditType)]"/>
        <PropertyColumn Property="x => x.TableName" Title="@L[currentDto.GetMemberDescription(x => x.TableName)]"/>
        <PropertyColumn Property="x => x.PrimaryKey" Title="@L[currentDto.GetMemberDescription(x => x.PrimaryKey)]"/>
        <PropertyColumn Property="x => x.DateTime" Title="@L[currentDto.GetMemberDescription(x => x.DateTime)]">
            <CellTemplate>
                <ToLocal DateTime="@context.Item.DateTime.ToLocalTime()" Format="dd/mm/yyyy HH:MM:ss"></ToLocal>
            </CellTemplate>
        </PropertyColumn>
    </Columns>
    <ChildRowContent>
        <MudCard Elevation="0" Class="d-flex flex-grow-0">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">
                        <strong>@L[context.Item.TableName!]</strong>
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="py-3">
                <MudSimpleTable Hover="true" Bordered="true">
                    <thead>
                    <tr>
                        <th>@L["Field Name"]</th>
                        <th>@L[currentDto.GetMemberDescription(x => x.OldValues)]</th>
                        <th>@L[currentDto.GetMemberDescription(x => x.NewValues)]</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var field in context.Item.NewValues?.Any() ?? false ? context.Item.NewValues : context.Item.OldValues?.Any() ?? false ? context.Item.OldValues : new Dictionary<string, object?>())
                    {
                        <tr>
                            <td>@field.Key</td>
                            <td class="mud-text-secondary">@(context.Item.OldValues?.ContainsKey(field.Key) ?? false ? context.Item.OldValues[field.Key] : string.Empty)</td>
                            <td>@(context.Item.NewValues?.ContainsKey(field.Key) ?? false ? context.Item.NewValues[field.Key] : string.Empty)</td>
                        </tr>
                    }
                    </tbody>
                </MudSimpleTable>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>@ConstantString.NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ConstantString.Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new[] { 10, 15, 30, 50, 100, 500, 1000 })"/>
    </PagerContent>
</MudDataGrid>

<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>
@code {
    
    public string Title { get; private set; } = "Audit Trails";
    
    [CascadingParameter] 
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    
    [CascadingParameter] 
    private UserProfile? UserProfile { get; set; }
    
    private AuditTrailsWithPaginationQuery Query { get; } = new();
    

    
    private MudDataGrid<AuditTrailDto> table = null!;
    private bool loading;
    private int defaultPageSize = 15;
    private readonly AuditTrailDto currentDto = new();
    
    protected override async Task OnInitializedAsync()
    {
        Title = L[currentDto.GetClassDescription()];
        var state = await AuthState;
    }
    
    private async Task<GridData<AuditTrailDto>> ServerReload(GridState<AuditTrailDto> state)
    {
        try
        {
            loading = true;
            Query.CurrentUser = UserProfile;
            Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;

            var result = await Mediator.Send(Query).ConfigureAwait(false);
            return new GridData<AuditTrailDto> { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            loading = false;
        }
    }
    
    private async Task OnChangedListView(AuditTrailListView listview)
    {
        Query.ListView = listview;
        await table.ReloadServerData();
    }
    
    private async Task OnSearch(string text)
    {
        Query.Keyword = text;
        await table.ReloadServerData();
    }

    private async Task OnSearch(AuditType? val)
    {
        Query.AuditType = val;
        await table.ReloadServerData();
    }

    private async Task OnRefresh()
    {
        AuditTrailsCacheKey.Refresh();
        Query.Keyword = string.Empty;
        await table.ReloadServerData();
    }

    private Task OnShowDetail(AuditTrailDto dto)
    {
        dto.ShowDetails = !dto.ShowDetails;
        return Task.CompletedTask;
    }

}