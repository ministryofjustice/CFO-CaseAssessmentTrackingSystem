@page "/pages/participants/pre-release-inventory"

@using Cfo.Cats.Application.Common.Interfaces.Identity
@using Cfo.Cats.Application.Common.Interfaces.Locations
@using Cfo.Cats.Application.Features.PRIs.Commands
@using Cfo.Cats.Application.Features.PRIs.DTOs
@using Cfo.Cats.Application.Features.PRIs.Queries
@using Cfo.Cats.Application.Features.PRIs.Specifications
@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Application.SecurityConstants
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Infrastructure.Services.Identity
@using Cfo.Cats.Server.UI.Pages.PRIs.Components
@using Cfo.Cats.Server.UI.Pages.Participants.Components
@using Humanizer

@inject IStringLocalizer<ActivePRIs> L
@inject ICurrentUserService CurrentUser
@inject IUserService UserService

@inherits CatsComponentBase

@attribute [Authorize(Policy = SecurityPolicies.AuthorizedUser)]

<PageTitle>@Title</PageTitle>

<style>
    .mud-table-toolbar {
        height: 120px !important;
    }

    .pointer-cursor {
        cursor: pointer;
    }
</style>

 <MudDataGrid ServerData="@(ServerReload)"
                 FixedHeader="true"
                 FixedFooter="true"
                 Virtualize="true"
                 @bind-RowsPerPage="_defaultPageSize"
                 Height="calc(100vh - 260px)"
                 Loading="@_loading"
                 MultiSelection="true"
                 @bind-SelectedItems="_selectedItems"
                 Hover="true"
                 @ref="_table"
                 Breakpoint="Breakpoint.Sm">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">                                     
                <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Large" />
                <MudText Typo="Typo.caption">@L["Active Pre-Release Inventory (PRI)"]</MudText>

            <div class="d-flex flex-column">                
                <MudSwitch Class="mt-10" @bind-Value="@Query!.IncludeOutgoing" @bind-Value:after="OnOutgoingChange" Label="@Query?.GetMemberDescription(q => q.IncludeOutgoing)" Color="Color.Primary"></MudSwitch>
            </div>

            <div class="d-flex flex-column">
                <MudSwitch Class="mt-10" @bind-Value="@Query!.IncludeIncoming" @bind-Value:after="OnIncomingChange" Label="@Query?.GetMemberDescription(q => q.IncludeIncoming)" Color="Color.Primary"></MudSwitch>
            </div>

            <div class="flex-grow-1"></div>
            <div class="d-flex flex-column justify-end">
                <div class="d-flex">
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudHidden Breakpoint="Breakpoint.SmAndDown">
                            <MudButton Variant="Variant.Outlined"
                                       Size="Size.Small"
                                       Disabled="@_loading"
                                       OnClick="@(() => CreatePriCode())"
                                       StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface" Color="Color.Primary"
                                       Style="margin-right: 4px; margin-bottom:4px">
                                Generate PRI code
                            </MudButton>
                        </MudHidden>
                        <MudButton Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="@(() => OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">
                            @ConstantString.Refresh
                        </MudButton>             
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">

                    </MudHidden>
                </div>
                <MudTextField T="string" ValueChanged="@(OnSearch)" Value="@Query!.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                </MudTextField>               
            </div>            
        </div>
    </ToolBarContent>
    <Columns>
        <TemplateColumn CellClass="width:60px;" Title="@ConstantString.Actions" Sortable="false">
            <CellTemplate>
                <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small"
                         Dense="true"
                         EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">              

                    <MudMenuItem OnClick="@(()=> ViewParticipant(context.Item))">
                        @ConstantString.ViewParticipant
                    </MudMenuItem>

                    @if (context.Item.ActualReleaseDate == null)
                    {
                        <MudMenuItem OnClick="@(()=> AddActualReleaseDate(context.Item))">
                            @ConstantString.AddActualReleaseDate
                        </MudMenuItem>
                    }
                    else
                    {
                        if (CurrentUser.UserId == context.Item.AssignedTo)
                        {
                            <MudMenuItem OnClick="@(()=> CompletePRI(context.Item))">
                                @ConstantString.CompletePRI
                            </MudMenuItem>
                        }
                    }
                    <MudMenuItem OnClick="@(()=> AbandonPRI(context.Item))">
                        @ConstantString.AbandonPRI
                    </MudMenuItem>

                    <MudMenuItem OnClick="@(()=> PrintPRI(context.Item))" >
                        @ConstantString.PrintPRI
                    </MudMenuItem>
                </MudMenu>
            </CellTemplate>
        </TemplateColumn>

        <PropertyColumn Property="x => x.ParticipantName" Title="@L["Participant"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2">@context.Item.ParticipantName</MudText>
                    <MudText Typo="Typo.body2">@context.Item.ParticipantId</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.CreatedBy" Title="@L["Custody Support Worker"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2">@UserService.GetDisplayName(@context.Item.CreatedBy!)</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.AssignedTo" Title="@L["Community Support Worker"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2">@UserService.GetDisplayName(@context.Item.AssignedTo!)</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.ExpectedReleaseRegion" Title="@L["Expected Release Region"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2"> @context.Item.ExpectedReleaseRegion!.Name</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.ExpectedReleaseDate" Title="@L["Expected Date of Release"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2">
                        @context.Item.ExpectedReleaseDate
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @(context.Item.ExpectedReleaseDate == DateOnly.FromDateTime(DateTime.Today) ? "today" : context.Item.ExpectedReleaseDate.Humanize())
                    </MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.ActualReleaseDate" Title="@L["Actual Release Date"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    @if(context.Item.ActualReleaseDate is not null)
                    {
                        <MudText Typo="Typo.body2">
                            @context.Item.ActualReleaseDate
                        </MudText>
                        <MudText Typo="Typo.body2">
                            @(context.Item.ActualReleaseDate == DateOnly.FromDateTime(DateTime.Today) ? "today" : context.Item.ActualReleaseDate.Humanize())
                        </MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">Not set</MudText>
                    }
                </div>
            </CellTemplate>
        </PropertyColumn>
    </Columns>
    <NoRecordsContent>
        <MudText>@ConstantString.NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ConstantString.Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new[] { 10, 15, 30, 50 })" />
    </PagerContent>
</MudDataGrid>


@code {
    [CascadingParameter] private UserProfile? UserProfile { get; set; }

    // [SupplyParameterFromQuery(Name = "ListView")]
    // public string? ListView { get; set; }
    [SupplyParameterFromQuery(Name = "ListView")]
    public string? ListView { get; set; }

    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<PRIPaginationDto> _selectedItems = new();
    private MudDataGrid<PRIPaginationDto> _table = default!;
    private bool _loading;

    private GetActivePRIsByUserId.Query? Query { get; set; }

    protected override async Task OnInitializedAsync()
    {        
        Title = L["Active Pre-Release Inventory"];

        Query = new GetActivePRIsByUserId.Query()
        {
            CurrentUser = UserProfile        
        };        

        await base.OnInitializedAsync();
    }

    private async Task<GridData<PRIPaginationDto>> ServerReload(GridState<PRIPaginationDto> state)
    {
        try
        {
            _loading = true;
            Query!.CurrentUser = UserProfile;
            Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            var result = await GetNewMediator().Send(Query).ConfigureAwait(false);
            return new GridData<PRIPaginationDto> { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnRefresh()
    {
        _selectedItems = [];
        Query!.Keyword = string.Empty;
        await _table.ReloadServerData();
    }

    private async Task OnSearch(string text)
    {
        if (_loading)
        {
            return;
        }
        _selectedItems = new();
        Query!.Keyword = text;
        await _table.ReloadServerData();
    }

    private async Task OnOutgoingChange()
    {    
        if (Query!.IncludeOutgoing) // Only toggle the other off if this one is turned on
        {
            Query!.IncludeIncoming = false;
        }

        await _table.ReloadServerData();
    }

    private async Task OnIncomingChange()
    {
        if (Query!.IncludeIncoming) // Only toggle the other off if this one is turned on
        {
            Query!.IncludeOutgoing = false;
        }

        await _table.ReloadServerData();
    }

    private void ViewParticipant(PRIPaginationDto PRI)
    {
        Navigation.NavigateTo($"/pages/Participants/{PRI.ParticipantId}");
    }

    public async Task CreatePriCode()
    {        
        var parameters = new DialogParameters<PriGenerateCodeDialog>()
        {
            { x => x.Model, new UpsertPriCode.Command()
            {
                ParticipantId = ""
            } }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackdropClick = false };

        var dialog = DialogService.Show<PriGenerateCodeDialog>("Generate PRI Code", parameters, options);

        var state = await dialog.Result;

        if (!state!.Canceled)
        {
            await OnRefresh();
        }
    }

    private async Task AddActualReleaseDate(PRIPaginationDto PRI)
    {
        var parameters = new DialogParameters<AddActualReleaseDateDialog>()
        {
            { 
                x => x.Model, new  AddActualReleaseDate.Command()
                {
                    ParticipantId = PRI.ParticipantId
                } 
            }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackdropClick = false };

        var dialog = DialogService.Show<AddActualReleaseDateDialog>("Add Actual Release Date", parameters, options);

        var state = await dialog.Result;

        if (!state!.Canceled)
        {
            await OnRefresh();
        }
    }

    private async Task CompletePRI(PRIPaginationDto PRI)
    {
        var completePRICommand = new CompletePRI.Command()
         {
             ParticipantId = PRI.ParticipantId,
             CompletedBy = CurrentUser.UserId
         };
        
        var result = await GetNewMediator().Send(completePRICommand);

        if (result.Succeeded)
        {
            Snackbar.Add($"{L["PRI successfully completed"]}", Severity.Info);      
            await OnRefresh();
        }
        else
        {
            Snackbar.Add($"{result.ErrorMessage}", Severity.Error);
        }
    }

    private async Task AbandonPRI(PRIPaginationDto PRI)
    {
        var parameters = new DialogParameters<AbandonPriDialog>()
        {
            { x => x.Model, new AbandonPRI.Command()
            {
                ParticipantId = PRI.ParticipantId,
                AbandonJustification="",
                AbandonReason=PriAbandonReason.Other,
                AbandonedBy=CurrentUser.UserId!
            } }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, BackdropClick = false };

        var dialog = DialogService.Show<AbandonPriDialog>("Abandon PRI", parameters, options);

        var state = await dialog.Result;

        if (!state!.Canceled)
        {
            await OnRefresh();
        } 
    }
    private void PrintPRI(PRIPaginationDto PRI)
    {
        JS.InvokeVoidAsync("open", $"/pages/PrintPri/{PRI.Id}", "_blank");
        //Navigation.NavigateTo($"/pages/PrintPri/{PRI.Id}", true, true);

        
        // var parameters = new DialogParameters<PrintPRIDialog>(); 
        // parameters.Add(x => x._priId, PRI.Id);

        // var options = new DialogOptions { CloseButton = true, FullScreen = true, BackdropClick = false, FullWidth=true, NoHeader=true };

        // var dialog = DialogService.Show<PrintPRIDialog>(ConstantString.PRILabel, parameters, options);

        // var state = await dialog.Result;

        // if (!state!.Canceled)
        // {
        //     await OnRefresh();
        // }
    }
}