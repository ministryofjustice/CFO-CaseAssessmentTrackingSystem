@using Cfo.Cats.Application.Features.Inductions.Commands
@inherits CatsComponentBase

@inject IValidationService Validator

<MudDialog>
    <DialogContent>
        <MudPaper Height="300px;" Elevation="0">
            @if (Model is not null)
            {
                <MudForm @ref="form" Model="Model" Validation="@(Validator.ValidateValue(Model))">
                    <MudGrid xs="12">
                        <MudItem xs="12">
                            <MudDatePicker Label="@Model.GetMemberDescription(x => x.CompletionDate)"
                            @bind-Date="Model.CompletionDate"
                            For="(() => Model.CompletionDate)"
                            ImmediateText="true" Editable="false"
                            MinDate="EarliestCompletionDate"
                            MaxDate="DateTime.Today.Date" PickerVariant="PickerVariant.Dialog"/>
                        </MudItem>

                        @* Present warning if completion date is less than 6 weeks from the start date *@
                        @if(Model.CompletionDate < EarliestCompletionDate.AddDays((7 * 6)))
                        {
                            <MudItem xs="12">
                                <MudAlert Severity="Severity.Warning">
                                    The entered completion date is less than six weeks from the start date. 
                                    Are you sure you would like to continue?
                                </MudAlert>
                            </MudItem>
                        }

                    </MudGrid>
                </MudForm>
            }
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@saving" Color="Color.Primary" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    
    private MudForm? form;
    private bool saving;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;
    
    [EditorRequired]
    [Parameter]
    public CompleteInductionPhase.Command? Model { get; set; }
    
    [EditorRequired]
    [Parameter]
    public DateTime EarliestCompletionDate { get; set; }
    
    private void Cancel()
    { 
        MudDialog.Cancel();
    }
    
    private async Task Submit()
    {
        try
        {
            saving = true;

            await form!.Validate();

            if(form!.IsValid == false)
            {
                return;
            }

            var result = await GetNewMediator().Send(Model!);
            if(result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        finally
        {
            saving = false;
        }
    }
    
}