@using Cfo.Cats.Application.Features.Inductions.Commands
@inherits CatsComponentBase

@inject IValidationService Validator

<MudDialog>
    <DialogContent>
        @if (Model is not null)
        {
            <MudForm @ref="form" Model="Model" Validation="@(Validator.ValidateValue(Model))">
                <MudGrid xs="12">
                    <MudItem xs="12">
                        <MudDatePicker Label="@Model.GetMemberDescription(x => x.CompletionDate)"
                                       @bind-Date="Model.CompletionDate"
                                       For="(() => Model.CompletionDate)"
                                       ImmediateText="true" Editable="false"
                                       MinDate="EarliestCompletionDate"
                                       MaxDate="DateTime.Today.Date"/>    
                    </MudItem>
                </MudGrid>
            </MudForm>    
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@saving" Color="Color.Primary" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    
    private MudForm? form;
    private bool saving;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;
    
    [EditorRequired]
    [Parameter]
    public CompleteInductionPhase.Command? Model { get; set; }
    
    [EditorRequired]
    [Parameter]
    public DateTime EarliestCompletionDate { get; set; }
    
    private void Cancel()
    { 
        MudDialog.Cancel();
    }
    
    private async Task Submit()
    {
        try
        {
            saving = true;

            await form!.Validate().ConfigureAwait(false);

            if(form!.IsValid == false)
            {
                return;
            }

            var result = await GetNewMediator().Send(Model!);
            if(result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        finally
        {
            saving = false;
        }
    }
    
}