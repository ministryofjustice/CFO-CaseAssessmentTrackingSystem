@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.Timelines.DTOs
@using Cfo.Cats.Application.Features.Timelines.PaginationQuery
@using Cfo.Cats.Application.SecurityConstants
@using Cfo.Cats.Domain.Common.Enums
@using Humanizer

@inherits CatsComponentBase


    @if (_model is not null)
    {
        <MudTimeline TimelinePosition="TimelinePosition.Start" Modifiers="true">
            @foreach (var model in _model.Items)
            {
                Color color = GetColour(model);
                
                <MudTimelineItem Size="Size.Medium" Color="@color" Elevation="25">
                    <MudTooltip Text="@model.OccurredOn.ToLocalTime().ToString("ddd, dd MMM yyyy 'at' HH:mm")">
                        <MudCard Outlined="false" Elevation="25">
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@model.Line1</MudText>

                                @if (model.Line2 is not null)
                                {
                                    <MudText Typo="Typo.body2">@model.Line2</MudText>
                                }
                                @if (model.Line3 is not null)
                                {
                                    <MudText Typo="Typo.body2">@model.Line3</MudText>
                                }

                                @if (hideUser && CFOTenantIds.Contains(model.UserTenantId))
                                {
                                    <MudText Typo="Typo.body2">CFO User @model.OccurredOn.Humanize()</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2">@model.User @model.OccurredOn.Humanize()</MudText>
                                }

                            </MudCardContent>
                        </MudCard> </MudTooltip>
                </MudTimelineItem>

            }
        </MudTimeline>
    }


@code
{
    [CascadingParameter]
    public ParticipantSummaryDto ParticipantSummaryDto { get; set; } = default!;

    [CascadingParameter]
    public UserProfile UserProfile { get; set; } = default!;

    private PaginatedData<TimelineDto>? _model = null;

    //Hide CFO Users from providers on time line
    private bool hideUser = true;
    private HashSet<string> CFOTenantIds = new HashSet<string> { "1.", "1.1." };
    private string[] allowed = [RoleNames.QAOfficer, RoleNames.QASupportManager, RoleNames.QAManager, RoleNames.SMT, RoleNames.SystemSupport];

    protected override async Task OnInitializedAsync()
    {
        if (_model is null)
        {
            _model = await GetNewMediator().Send(new TimelinesWithPaginationQuery.Query()
            {
                ParticipantId = ParticipantSummaryDto.Id,
                CurrentUser = UserProfile,
                PageSize = 300
            });
        }
        
        if (UserProfile.AssignedRoles.Any(r => allowed.Contains(r)))
        {            
            hideUser = false;
        }
    }

    private Color GetColour(TimelineDto dto)
    {
        return dto.Title switch
        {
            nameof(TimelineEventType.Participant) => Color.Primary,
            nameof(TimelineEventType.Enrolment) => Color.Success,
            nameof(TimelineEventType.Consent) => Color.Secondary,
            nameof(TimelineEventType.Assessment) => Color.Info,
            nameof(TimelineEventType.PathwayPlan) => Color.Warning,
            nameof(TimelineEventType.Bio) => Color.Error,
            nameof(TimelineEventType.Dms) => Color.Dark,
            _ => Color.Primary
        };
    }
}