@using Cfo.Cats.Application.Features.Assessments.DTOs
@using Cfo.Cats.Application.Features.Assessments.Queries
@using Cfo.Cats.Domain.Common.Enums


@if (_notFound)
{
    <MudAlert>
        <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Square="true" Class="my-2">No assessment found.</MudAlert>
    </MudAlert>
}


@if (_model is not null)
{
    <MudExpansionPanels Class="pa-3 m-3" MultiExpansion="true">
        
        @foreach (var pathway in _model.Pathways)
        {
            <MudExpansionPanel>
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@pathway.Icon" Color="Color.Primary" class="mr-3"/>
                        <MudText>@pathway.Title</MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudGrid Class="mb-4 px-10">

                        @foreach (var question in pathway.Questions())
                        {

                        <MudItem xs="4">
                            <Cfo.Cats.Server.UI.Pages.Assessment.AssessmentComponents.AssessmentQuestion Question="@question.Question" HelperText="@question.OtherInformation" />
                        </MudItem>

                        <MudItem xs="8">
                            @if (question is SingleChoiceQuestion atq)
                            {
                            <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="@atq.Answer" CheckMark FixedContent Color="Color.Primary">
                                @foreach (var item in atq.Options)
                                {
                                    <MudToggleItem Value="@item" Text="@item" Disabled />
                                }
                            </MudToggleGroup>

                            }

                            @if (question is MultipleChoiceQuestion amcq)
                            {
                                <MudToggleGroup T="string" Class="two-columns" Vertical SelectionMode="SelectionMode.MultiSelection" @bind-Values="@amcq.Answers" CheckMark Color="Color.Primary" Outlined="false" Delimiters="false">
                                    @foreach (var item in amcq.Options)
                                    {
                                        <MudToggleItem Class="toggle-item" Value="@item" Text="@item" UnselectedIcon="@Icons.Material.Filled.CheckBoxOutlineBlank" SelectedIcon="@Icons.Material.Filled.CheckBox" Disabled/>
                                    }
                                </MudToggleGroup>
                            }
                        </MudItem>
                        <MudDivider />
                        }
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>
        }

    </MudExpansionPanels>
}



@code {

    private Assessment? _model;
    private bool _notFound = false;
    
    [Parameter]
    [EditorRequired]
    public string ParticipantId { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            _model = await Mediator.Send(new GetAssessment.Query()
            {
                ParticipantId = ParticipantId
            });
        }
        catch (NotFoundException)
        {
            _notFound = true;
        }
        
    }

}