@using Cfo.Cats.Application.Features.Inductions.Commands
@using Cfo.Cats.Application.Features.Locations.DTOs
@using Cfo.Cats.Application.Features.Participants.Queries
@inherits CatsComponentBase

@inject IValidationService Validator

<MudDialog>
    <DialogContent>
        <MudPaper Height="300px" Elevation="0">
            @if (Model is not null)
            {
                <MudForm @ref="form" Model="Model" Validation="@(Validator.ValidateValue(Model))">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudDatePicker Label="@Model.GetMemberDescription(x => x.InductionDate)"
                                           @bind-Date="Model.InductionDate" @bind-Date:after="CheckParticipantBeenAtThisLocationOnDate"
                                           For="(() => Model.InductionDate)"
                                           ImmediateText="true" Editable="false" MaxDate="DateTime.Today.Date" MinDate="DateTime.Today.AddMonths(-3)" PickerVariant="PickerVariant.Dialog" />
                        </MudItem>
                        
                        @if (hasParticpantBeenAtThisLocationOnThisDate is not true && Model.InductionDate is not null && Model.Location is not null)
                        {
                            <MudItem xs="12">
                                <MudAlert Severity="Severity.Warning">
                                    Participant was not at @Model.Location!.Name on selected date.
                                </MudAlert>
                            </MudItem>
                        }

                        <MudItem xs="12">
                                <MudAutocomplete T="LocationDto" Label="@Model.GetMemberDescription(x => x.Location)" 
                                                @bind-Value="Model.Location" @bind-Value:after="CheckParticipantBeenAtThisLocationOnDate"
                                                SearchFunc="@SearchLocations"
                                                 Required="true" RequiredError="Location is required"
                                                 ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                                                 AdornmentColor="Color.Primary" ToStringFunc="@(e => e == null ? null : e.Name)" />
                        </MudItem>                        
                    </MudGrid>
                </MudForm>
            }
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@saving" Color="Color.Primary" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>


@code {
    private MudForm? form;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [EditorRequired]
    [Parameter]
    public LocationDto[]? Locations { get; set; }

    [EditorRequired]
    [Parameter]
    public AddWingInduction.Command? Model { get; set; }

    private bool saving;

    bool hasParticpantBeenAtThisLocationOnThisDate;

    private void Cancel()
    { 
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        try
        {
            saving = true;

            await form!.Validate();

            if(form!.IsValid == false)
            {
                return;
            }

            var result = await GetNewMediator().Send(Model!);
            if(result.Succeeded)
            {
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        finally
        {
            saving = false;
        }
    }

    private async Task<IEnumerable<LocationDto>> SearchLocations(string value, CancellationToken token)
    {
        if(string.IsNullOrEmpty(value)){
            return new LocationDto[0];
        }
        return await Task.FromResult(Locations!.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    async Task CheckParticipantBeenAtThisLocationOnDate()
    {
        if (Model?.InductionDate == null || Model?.Location?.Id == null)
            return;
        
        hasParticpantBeenAtThisLocationOnThisDate = await GetNewMediator().Send(new GetParticipantWasAtThisLocationCheck.Query()
            {
                ParticipantId = Model!.ParticipantId,
                LocationId = Model.Location!.Id,
                DateAtLocation = Model.InductionDate
            });        
    }
}