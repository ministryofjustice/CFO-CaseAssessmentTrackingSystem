@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.Participants.Queries
@using Humanizer;

<style>
    .multiline-ellipsis {
        display: -webkit-box;
        -webkit-line-clamp: 3; /* Number of lines to show */
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

<MudGrid Class="pa-3" Spacing="4">
    @if (_notes is not null)
    {
        @foreach(var note in _notes.OrderByDescending(n => n.Created))
        {
            <MudItem xs="6" md="4">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Secondary">DU</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">Default User</MudText>
                            <MudText Typo="Typo.body2">default.user@example.com</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.OpenInNew"></MudIconButton>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Class="multiline-ellipsis" Typo="Typo.body2">
                            @note.Message
                        </MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Reply"></MudIconButton>
                        <MudSpacer />
                        <MudTooltip Text="@note.Created.ToLocalTime().ToString("dd/MM/yyyy HH:mm")">
                            <MudText Typo="Typo.body2">
                                @note.Created.Humanize()
                            </MudText>
                        </MudTooltip>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    }
    else
    {
        <MudText>@ConstantString.Loading</MudText>
    }
</MudGrid>

@code {
    ParticipantNoteDto[]? _notes = null;

    [Parameter]
    [EditorRequired]
    public string ParticipantId { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            _notes = await Mediator.Send(new GetParticipantNotes.Query()
            {
                ParticipantId = ParticipantId
            });
        }
        catch(NotFoundException)
        {
            // handle not found
        }
        finally
        {
            await base.OnInitializedAsync();
        }

    }

}
