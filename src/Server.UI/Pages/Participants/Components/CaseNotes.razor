@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.Participants.Queries
@using Humanizer;

@inherits CatsComponentBase

@if(_notes is not null)
{
    <MudTimeline TimelinePosition="TimelinePosition.Start" Modifiers="true">
        <MudTimelineItem TimelineAlign="TimelineAlign.Start">
            <div class="d-flex gap-4 align-center mud-list-subheader">
                <MudTooltip Text="New">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" OnClick="OnAddNote" Class="rounded-circle"></MudIconButton>
                </MudTooltip>
                <MudText>New note</MudText>
            </div>
        </MudTimelineItem>
        @foreach(var note in _notes.OrderByDescending(x => x.Created))
        {
            <MudTimelineItem Size="Size.Medium" Color="Color.Info" Elevation="25">
                <MudCard>
                    <MudCardContent>
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Secondary">@note.CreatedBy.Substring(0,1)</MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">

                                    @note.CreatedBy
                                </MudText>
                                <MudText Typo="Typo.body2">@note.CreatedByEmail</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body1">
                                <div class="word-wrap">
                                    @note.Message                                
                                </div>
                            </MudText>
                            
                        </MudCardContent>
                        <MudCardActions>
                            <MudTooltip Text="@note.Created.ToLocalTime().ToString("ddd, dd MMM yyyy 'at' HH:mm")">
                                <MudText Typo="Typo.body2">
                                    @note.Created.Humanize()
                                </MudText>
                            </MudTooltip>
                        </MudCardActions>
                    </MudCardContent>
                </MudCard>

            </MudTimelineItem>
        }
    </MudTimeline>
}

@code {
    ParticipantNoteDto[]? _notes = null;

    [Parameter]
    [EditorRequired]
    public string ParticipantId { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await OnRefresh();
        }
        catch(NotFoundException)
        {
            // handle not found
        }
        finally
        {
            await base.OnInitializedAsync();
        }

    }

    private async Task OnRefresh()
    {
        _notes = await GetNewMediator().Send(new GetParticipantNotes.Query()
        {
            ParticipantId = ParticipantId
        });
    }

    public async Task OnAddNote()
    {
        // Show Dialog
        var parameters = new DialogParameters<AddNoteDialog>
        {
            { x => x.Model, new AddNote.Command() { ParticipantId = ParticipantId, Message = string.Empty } }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AddNoteDialog>
            ("Add a note", parameters, options);

        var state = await dialog.Result;

        if (!state!.Canceled)
        {
            await OnRefresh();
        }

    }

    public async Task OnExpandNote(string message)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        await DialogService.ShowMessageBox("Note", message, options: options);
    }

}
