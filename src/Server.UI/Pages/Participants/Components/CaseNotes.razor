@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.Participants.Queries
@using Humanizer;

@inherits CatsComponentBase

<style>
    .multiline-ellipsis {
        display: -webkit-box;
        -webkit-line-clamp: 3; /* Number of lines to show */
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

@if(_notes is not null)
{
    <MudTimeline>
        <MudTimelineItem>
            <MudTooltip Text="New">
                <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" OnClick="OnAddNote" Class="rounded-circle"></MudIconButton>
            </MudTooltip>
        </MudTimelineItem>
        @foreach(var (note, index) in _notes.OrderByDescending(x => x.Created).Select((note, index) => (note, index)))
        {
            Color color = index % 2 is 0 ? Color.Primary : Color.Info;

            <MudTimelineItem Color="color" Size="Size.Small">
                <ItemOpposite>
                    <MudText Color="color" Typo="Typo.h5">
                        @note.Created.Humanize()
                    </MudText>
                    <MudText Typo="Typo.body1">
                        @(@$"{note.Created.ToLocalTime().ToString("ddd, dd MMM yyyy 'at' HH:mm")}")
                    </MudText>
                </ItemOpposite>
                <ItemContent>
                    <MudCard Outlined="true">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="color">
                                    @note.CreatedBy.Substring(0, 1)
                                </MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">@note.CreatedBy</MudText>
                                <MudText Typo="Typo.body2">@note.CreatedByEmail</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudTooltip Text="Expand">
                                    <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" OnClick="async() => await OnExpandNote(note.Message)"></MudIconButton>
                                </MudTooltip>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Class="multiline-ellipsis" Typo="Typo.body2">
                                @note.Message
                            </MudText>
                        </MudCardContent>
                        <MudCardActions>
                            @*<MudIconButton Icon="@Icons.Material.Filled.Reply"></MudIconButton>*@
                        </MudCardActions>
                    </MudCard>
                </ItemContent>
            </MudTimelineItem>
        }
    </MudTimeline>

    <MudContainer Class="d-flex justify-center mt-2">
        @if(_notes.Length is 0)
        {
            <MudText Typo="Typo.caption">Nothing to see here. Why not add a note yourself?</MudText>
        }
        else
        {
            <MudText Typo="Typo.caption">You're all caught up!</MudText>
        }
    </MudContainer>

}

@code {
    ParticipantNoteDto[]? _notes = null;

    [Parameter]
    [EditorRequired]
    public string ParticipantId { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await OnRefresh();
        }
        catch(NotFoundException)
        {
            // handle not found
        }
        finally
        {
            await base.OnInitializedAsync();
        }

    }

    private async Task OnRefresh()
    {
        _notes = await GetNewMediator().Send(new GetParticipantNotes.Query()
        {
            ParticipantId = ParticipantId
        });
    }

    public async Task OnAddNote()
    {
        // Show Dialog
        var parameters = new DialogParameters<AddNoteDialog>
        {
            { x => x.Model, new AddNote.Command() { ParticipantId = ParticipantId, Message = string.Empty } }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<AddNoteDialog>
            ("Add a note", parameters, options);

        var state = await dialog.Result;

        if (!state!.Canceled)
        {
            await OnRefresh();
        }

    }

    public async Task OnExpandNote(string message)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        await DialogService.ShowMessageBox("Note", message, options: options);
    }

}
