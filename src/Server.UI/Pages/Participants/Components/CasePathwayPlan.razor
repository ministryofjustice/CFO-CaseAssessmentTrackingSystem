@using Cfo.Cats.Application.Features.Objectives.Commands
@using Cfo.Cats.Server.UI.Pages.Objectives.Tasks
@using Humanizer

@inherits CatsComponentBase

<style>
    .mud-list-item:hover:not(.mud-list-item-header), 
    .mud-list-item:focus, 
    .mud-icon-button:hover {
        background-color: initial !important;
    }
</style>

@if(Model is not null)
{
    <MudPaper>
        <MudList T="ObjectiveTask" SelectedValues="SelectedTasks" SelectedValuesChanged="Select" SelectionMode="SelectionMode.MultiSelection">
            <MudListSubheader>
                <MudText>Select your tasks:</MudText>
            </MudListSubheader>
            @foreach (var objective in Model)
            {
                <MudListItem Class="mud-list-item-header" Ripple="false" Expanded>
                    <ChildContent>
                        <div class="d-flex gap-2 align-center">
                            <MudText Typo="Typo.subtitle2">@objective.Title</MudText>
                            <MudText>(@objective.Tasks.Count(x => x.Completed is not null)/@objective.Tasks.Length)</MudText>
                            @if(objective.Tasks.Any(IsOverdue))
                            {
                                <MudIcon Color="Color.Error" Icon="@Icons.Material.Filled.AccessTime"/>
                            }
                            else if (objective.Tasks.Any(IsDueSoon))
                            {
                                <MudIcon Color="Color.Warning" Icon="@Icons.Material.Filled.AccessTime" />
                            }
                            else if(objective.Tasks.All(IsComplete))
                            {
                                <MudIcon Color="Color.Success" Icon="@Icons.Material.Filled.Done" />
                            }
                        </div>
                    </ChildContent>
                    <NestedList>
                        @foreach (var task in objective.Tasks)
                        {
                            <MudListItem Value="@task" Class="cursor-default" Ripple="false" OnClickPreventDefault>
                                <div class="d-flex justify-space-between align-center">
                                    <div>
                                        <div class="d-flex gap-2 align-center">
                                            <MudText>
                                                @task.Title
                                            </MudText>
                                            @if (IsComplete(task))
                                            {
                                                <MudTooltip Text="Completed">
                                                    <MudChip Text="Done" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.Done" />
                                                </MudTooltip>
                                            }
                                            else
                                            {
                                                if (IsOverdue(task))
                                                {
                                                    <MudTooltip>
                                                        <TooltipContent>
                                                            Due @task.DueDate.ToDateTime(TimeOnly.MinValue).ToString("MMM, yyyy")
                                                        </TooltipContent>
                                                        <ChildContent>
                                                            <MudChip Text="Overdue" Size="Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.AccessTime" />
                                                        </ChildContent>
                                                    </MudTooltip>
                                                }
                                                else if (IsDueSoon(task))
                                                {
                                                    <MudTooltip>
                                                        <TooltipContent>
                                                            Due @task.DueDate.ToDateTime(TimeOnly.MinValue).ToString("MMM, yyyy")
                                                        </TooltipContent>
                                                        <ChildContent>
                                                            <MudChip Text="Due soon" Size="Size.Small" Color="Color.Warning" Icon="@Icons.Material.Filled.AccessTime" />
                                                        </ChildContent>
                                                    </MudTooltip>
                                                }
                                            }
                                        </div>
                                        @if(task.Completed is null)
                                        {
                                            <MudText Typo="Typo.body2">Due @task.DueDate.ToDateTime(TimeOnly.MinValue).ToString("MMM, yyyy")</MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body2">Completed @task.Completed.Humanize()</MudText>
                                        }
                                    </div>
                                    <div class="mr-4 d-flex gap-2">
                                        <MudTooltip Text="Edit" Style="height: fit-content">
                                            <MudIconButton OnClick="async() => await Edit(task)" Icon="@Icons.Material.Filled.Edit" Ripple="false" Size="Size.Small" Variant="Variant.Text" />
                                        </MudTooltip>
                                        <MudTooltip Text="Close" Style="height: fit-content">
                                            <MudIconButton OnClick="async() => await Close(task)" Icon="@Icons.Material.Filled.Close" Ripple="false" Size="Size.Small" Variant="Variant.Text" />
                                        </MudTooltip>
                                    </div>
                                </div>
                            </MudListItem>
                        }
                        <div class="ml-6 mb-2">
                            <MudTooltip Text="New">
                                <MudIconButton OnClick="async() => await AddTask(objective)" Icon="@Icons.Material.Filled.Add" />
                            </MudTooltip>
                        </div>
                    </NestedList>
                </MudListItem>
                <MudDivider />
            }
        </MudList>
    </MudPaper>
}

@code {
    static DateOnly ToMonth(DateTime dateTime) => DateOnly.FromDateTime(new DateTime(dateTime.Year, dateTime.Month, 1));
    static DateOnly ToMonth(DateOnly date) => DateOnly.FromDateTime(new DateTime(date.Year, date.Month, 1));

    readonly DateOnly currentMonth = ToMonth(DateTime.UtcNow);

    [Parameter, EditorRequired]
    public required string ParticipantId { get; set; }

    public IEnumerable<Objective>? Model { get; set; }

    IReadOnlyCollection<ObjectiveTask> SelectedTasks = [];

    protected override void OnInitialized()
    {
        Model = new List<Objective>()
        {
            new Objective("Make Doris more employable because she has been unemployed for 6 months", new ObjectiveTask[]
            {
                new ObjectiveTask()
                {
                    Title = "Sort their appearance",
                    DueDate = currentMonth.AddMonths(-1)
                },
                new ObjectiveTask()
                {
                    Title = "Create a CV",
                    DueDate = currentMonth
                }
            }),
            new Objective("Finance and Debt", new ObjectiveTask[]
            {
                new ObjectiveTask()
                {
                    Title = "Managing finances and debt",
                    DueDate = currentMonth,
                    Completed = DateTime.UtcNow.AddMinutes(-30)
                }
            }),
            new Objective("Identification", new ObjectiveTask[]
            {
                new ObjectiveTask()
                {
                    Title = "Obtain a new passport",
                    DueDate = currentMonth.AddMonths(2)
                }
            }),
            new Objective("Disclosure Advice", new ObjectiveTask[]
            {
                new ObjectiveTask()
                {
                    Title = "Offence disclosure discussion",
                    DueDate = currentMonth.AddMonths(1)
                }
            })
        };

        SelectedTasks = Model.SelectMany(objective => objective.Tasks.Where(task => task.Completed is not null))
            .ToList()
            .AsReadOnly();

        base.OnInitialized();
    }

    public void Select(IReadOnlyCollection<ObjectiveTask>? tasks)
    {
        if (tasks is null)
        {
            return;
        }

        foreach(var task in SelectedTasks.Except(tasks))
        {
            task.Completed = null;
        }

        foreach (var task in tasks.Where(IsNotComplete))
        {
            task.Completed = DateTime.UtcNow;
        }

        SelectedTasks = tasks;
    }

    public async Task AddTask(Objective to)
    {
        var command = new AddTask.Command()
        {
            ObjectiveId = Guid.NewGuid()
        };

        var parameters = new DialogParameters<AddTaskDialog>()
        {
            { x => x.Model, command }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<AddTaskDialog>("Add task to objective", parameters, options);

        var state = await dialog.Result;

        if (state!.Canceled is false)
        {
            await GetNewMediator().Send(command);
        }
    }

    public async Task Edit(ObjectiveTask task)
    {
        await DialogService.ShowMessageBox("Edit Task", "Editing...");
    }

    public async Task Close(ObjectiveTask task)
    {
        await DialogService.ShowMessageBox("Close Task", "Closing...");
    }

    public bool IsOverdue(ObjectiveTask task) => IsNotComplete(task) && ToMonth(DateTime.UtcNow) > ToMonth(task.DueDate.ToDateTime(TimeOnly.MinValue));
    public bool IsDueSoon(ObjectiveTask task) => IsNotComplete(task) && ToMonth(task.DueDate).Equals(currentMonth) || DateOnly.FromDateTime(DateTime.UtcNow.AddDays(14)) >= ToMonth(task.DueDate);
    public bool IsNotComplete(ObjectiveTask task) => IsComplete(task) is false;
    public bool IsComplete(ObjectiveTask task) => task.Completed is not null;

    public record Objective(string Title, ObjectiveTask[] Tasks);
    public class ObjectiveTask
    {
        public required string Title { get; set; }
        public required DateOnly DueDate { get; set; }
        public DateTime? Completed { get; set; }
    }
}
