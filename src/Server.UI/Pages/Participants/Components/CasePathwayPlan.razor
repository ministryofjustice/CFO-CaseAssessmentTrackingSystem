@using Cfo.Cats.Application.Features.Objectives.Commands
@using Cfo.Cats.Application.Features.Objectives.DTOs
@using Cfo.Cats.Application.Features.Objectives.Queries
@using Cfo.Cats.Server.UI.Pages.Objectives.Tasks
@using Humanizer

@inherits CatsComponentBase

<style>
    .mud-list-item-child:hover, 
    .mud-list-item-child:focus {
        background-color: initial !important;
    }
</style>

@if(Model is not null)
{
    <MudPaper>
        <MudList T="ObjectiveTaskDto">
            <MudListSubheader>
                <div class="d-flex gap-2 align-center">
                    <MudTooltip Text="New objective">
                        <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Class="rounded-circle" />
                    </MudTooltip>
                    @if(Model.Any())
                    {
                        <MudText>Add another objective</MudText>
                    }
                    else
                    {
                        <MudText>Add an objective</MudText>
                    }
                </div>
                <MudDivider Class="my-3"/>
            </MudListSubheader>
            @foreach (var objective in Model)
            {
                <MudListItem Ripple="false" Expanded>
                    <ChildContent>
                        <div class="d-flex gap-2 align-center">
                            <MudText Typo="Typo.subtitle2">@objective.Title</MudText>
                            <MudText>(@objective.Tasks.Count(x => x.IsCompleted)/@objective.Tasks.Count())</MudText>
                            @if(objective.Tasks.Any(task => task.IsOverdue))
                            {
                                <MudIcon Color="Color.Error" Icon="@Icons.Material.Filled.AccessTime"/>
                            }
                            else if (objective.Tasks.Any(task => task.IsDueSoon))
                            {
                                <MudIcon Color="Color.Warning" Icon="@Icons.Material.Filled.AccessTime" />
                            }
                            else if(objective.Tasks.All(task => task.IsCompleted))
                            {
                                <MudIcon Color="Color.Success" Icon="@Icons.Material.Filled.Done" />
                            }
                        </div>
                    </ChildContent>
                    <NestedList>
                        @foreach (var task in objective.Tasks)
                        {
                            <MudListItem Value="@task" Class="cursor-default mud-list-item-child" Ripple="false" OnClickPreventDefault>
                                <AvatarContent>
                                    @if(task.IsCompleted)
                                    {
                                        <MudIconButton OnClick="async() => await ToggleTask(task)" Icon="@Icons.Material.Filled.CheckBox" Disabled />
                                    }
                                    else
                                    {
                                        <MudIconButton OnClick="async() => await ToggleTask(task)" Icon="@Icons.Material.Filled.CheckBoxOutlineBlank"/>
                                    }
                                </AvatarContent>
                                <ChildContent>
                                    <div class="d-flex justify-space-between align-center">
                                        <div>
                                            <div class="d-flex gap-2 align-center">
                                                <MudText>
                                                    @task.Title
                                                </MudText>
                                                @if (task.IsCompleted)
                                                {
                                                    <MudTooltip Text="Completed">
                                                        <MudChip Text="Done" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.Done" />
                                                    </MudTooltip>
                                                }
                                                else
                                                {
                                                    if (task.IsOverdue)
                                                    {
                                                        <MudTooltip>
                                                            <TooltipContent>
                                                                Due @task.Due.ToString("MMM, yyyy")
                                                            </TooltipContent>
                                                            <ChildContent>
                                                                <MudChip Text="Overdue" Size="Size.Small" Color="Color.Error" Icon="@Icons.Material.Filled.AccessTime" />
                                                            </ChildContent>
                                                        </MudTooltip>
                                                    }
                                                    else if (task.IsDueSoon)
                                                    {
                                                        <MudTooltip>
                                                            <TooltipContent>
                                                                Due @task.Due.ToString("MMM, yyyy")
                                                            </TooltipContent>
                                                            <ChildContent>
                                                                <MudChip Text="Due soon" Size="Size.Small" Color="Color.Warning" Icon="@Icons.Material.Filled.AccessTime" />
                                                            </ChildContent>
                                                        </MudTooltip>
                                                    }
                                                }
                                            </div>
                                            @if(task.IsCompleted)
                                            {
                                                <MudText Typo="Typo.body2">Completed @task.Completed.Humanize()</MudText>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.body2">Due @task.Due.ToString("MMM, yyyy")</MudText>
                                            }
                                        </div>
                                        <div class="d-flex gap-2 align-center mr-4">
                                            <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small" Dense>
                                                <MudMenuItem>Extend date</MudMenuItem>
                                                <MudMenuItem OnClick="async() => await RenameTask(task)">Rename</MudMenuItem>
                                                <MudMenuItem OnClick="async() => await CancelTask(task)">Cancel</MudMenuItem>
                                            </MudMenu>
                                            <MudTooltip>
                                                <TooltipContent>
                                                    Added @task.Created.Humanize()
                                                </TooltipContent>
                                                <ChildContent>
                                                    <MudIcon Icon="@Icons.Material.Filled.Info" />
                                                </ChildContent>
                                            </MudTooltip>
                                        </div>
                                    </div>
                                </ChildContent>
                            </MudListItem>
                        }
                        <div class="ml-6 mb-2">
                            <MudTooltip Text="New Task">
                                <MudIconButton OnClick="async() => await AddTask(objective)" Icon="@Icons.Material.Filled.Add" />
                            </MudTooltip>
                        </div>
                    </NestedList>
                </MudListItem>
                <MudDivider />
            }
        </MudList>
    </MudPaper>
}

@code {
    [Parameter, EditorRequired]
    public required string ParticipantId { get; set; }

    public IEnumerable<ObjectiveDto>? Model { get; set; }

    IReadOnlyCollection<ObjectiveTaskDto> SelectedTasks = [];

    protected override async Task OnInitializedAsync()
    {
        await OnRefresh();
        await base.OnInitializedAsync();
    }

    private async Task OnRefresh()
    {
        Model = await GetNewMediator().Send(new GetObjectivesByParticipantId.Query()
        {
            ParticipantId = ParticipantId
        });

        SelectedTasks = Model.SelectMany(objective => objective.Tasks
            .Where(task => task.IsCompleted))
            .ToList()
            .AsReadOnly();   
    }

    public async Task ToggleTask(ObjectiveTaskDto task)
    {
        await Task.CompletedTask;
    }

    public async Task AddTask(ObjectiveDto to)
    {
        var command = new AddTask.Command()
        {
            ObjectiveId = to.Id
        };

        var parameters = new DialogParameters<AddTaskDialog>()
        {
            { x => x.Model, command }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<AddTaskDialog>("Add task to objective", parameters, options);

        var state = await dialog.Result;

        if (state!.Canceled is false)
        {
            var result = await GetNewMediator().Send(command);

            if(result.Succeeded)
            {
                await OnRefresh();
            }

        }
    }

    public async Task RenameTask(ObjectiveTaskDto task)
    {
        await DialogService.ShowMessageBox("Edit Task", "Editing...");
    }

    public async Task CancelTask(ObjectiveTaskDto task)
    {
        await DialogService.ShowMessageBox("Close Task", "Closing...");
    }

}
