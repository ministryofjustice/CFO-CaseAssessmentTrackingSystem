@using Cfo.Cats.Application.Features.PathwayPlans.Commands
@using Cfo.Cats.Application.Features.PathwayPlans.DTOs
@using Cfo.Cats.Application.Features.PathwayPlans.Queries
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Objectives
@using Cfo.Cats.Server.UI.Pages.Objectives.Tasks
@using Humanizer

@inherits CatsComponentBase

<style>
    .mud-list-item-child:hover, 
    .mud-list-item-child:focus {
        background-color: initial !important;
    }
</style>

@if(Model is not null)
{
    <MudPaper>
        <MudList T="ObjectiveTaskDto">
            <MudListSubheader Class="py-8">
                <div class="d-flex gap-4 align-center">
                    <MudTooltip Text="New objective">
                        <MudIconButton OnClick="AddObjective" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Class="rounded-circle" />
                    </MudTooltip>
                    <MudText>New objective</MudText>
                    <MudSpacer />
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small">Reviewed Pathway Plan</MudButton>
                </div>
                <div class="d-flex flex-column flex-sm-row align-center gap-2 mt-6">
                    <MudSelect @bind-Value="selector" Label="Sort objectives by" Disabled="Model.Objectives.Any() is false" >
                        <MudSelectItem Value="@("Created")">Date added</MudSelectItem>
                        <MudSelectItem Value="@("Title")">Title</MudSelectItem>
                        <MudSelectItem Value="@("Outstanding")">No. of outstanding tasks</MudSelectItem>
                    </MudSelect>
                        <MudSelect @bind-Value="sortDirection" Label="Direction" Disabled="Model.Objectives.Any() is false" >
                        <MudSelectItem Value="SortDirection.Ascending">Ascending</MudSelectItem>
                        <MudSelectItem Value="SortDirection.Descending">Descending</MudSelectItem>
                    </MudSelect>
                    <MudSpacer />
                    <div class="d-flex flex-column">
                        <MudCheckBox @bind-Value="hideCompletedObjectives" Label="Hide completed objectives" Disabled="Model.Objectives.Any() is false" />
                        <MudCheckBox @bind-Value="hideCompletedTasks" Label="Hide completed tasks" Disabled="Model.Objectives.SelectMany(x => x.Tasks).Any() is false" />
                    </div>
                </div>
                <MudDivider Class="mt-6" />
            </MudListSubheader>
            @foreach (var objective in Model.Objectives
           .Where(objective => objective.IsCompleted is false || hideCompletedObjectives is false)
           .OrderByDirection(sortDirection, selectors[selector]))
            {
                <Objective Model="objective" HideCompletedTasks="hideCompletedTasks" OnChange="OnRefresh" />
                <MudDivider />
            }
        </MudList>
    </MudPaper>
}
else
{
    <MudAlert>
        <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Square="true" Class="my-2">No pathway plan found.</MudAlert>
    </MudAlert>
}

@code {
    private bool hideCompletedObjectives = false;
    private bool hideCompletedTasks = false;

    private string selector = "Created";
    private Dictionary<string, Func<ObjectiveDto, dynamic>> selectors = new()
    {
        { "Created", (objective) => objective.Created },
        { "Title", (objective) => objective.Title },
        { "Outstanding", (objective) => objective.Tasks.Where(task => task.IsCompleted is false).Count() },
    };

    private SortDirection sortDirection = SortDirection.Ascending;

    [Parameter, EditorRequired]
    public required string ParticipantId { get; set; }

    public PathwayPlanDto? Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await OnRefresh();
        await base.OnInitializedAsync();
    }

    private async Task OnRefresh()
    {
        Model = await GetNewMediator().Send(new GetPathwayPlanByParticipantId.Query()
        {
            ParticipantId = ParticipantId
        });
    }

    public async Task AddObjective()
    {
        var command = new AddObjective.Command()
        {
            PathwayPlanId = Model!.Id
        };

        var parameters = new DialogParameters<AddObjectiveDialog>()
        {
            { x => x.Model, command }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var dialog = DialogService.Show<AddObjectiveDialog>("Add objective", parameters, options);

        var state = await dialog.Result;

        if (state!.Canceled is false)
        {
            var result = await GetNewMediator().Send(command);

            if (result.Succeeded)
            {
                await OnRefresh();
            }

        }
    }
}
