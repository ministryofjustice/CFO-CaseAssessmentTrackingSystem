@using Cfo.Cats.Application.Common.Interfaces.Identity
@using Cfo.Cats.Server.UI.Pages.Participants.Components
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.Documents.DTOs
@using Cfo.Cats.Application.Features.Participants.Queries
@using Cfo.Cats.Application.Features.Documents.Queries
@using Cfo.Cats.Application.SecurityConstants
@using System.Net.Http.Json
@using Humanizer

@inherits CatsComponentBase

@inject IUserService UserService
@inject IStringLocalizer<CaseDocuments> L


@attribute [Authorize(Policy = SecurityPolicies.AuthorizedUser)]

<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>
    <MudDataGrid T="DocumentDto" FixedHeader="true" Loading="_loading"
                 FixedFooter="true"
                 Virtualize="true"
                 Height="calc(100vh - 330px)"
                 Items="@_documents"
                 Hover="true"
                 BreakPoint="Breakpoint.Sm">

        <Columns>
            <TemplateColumn CellStyle="width:60px" Title="@ConstantString.Actions" Sortable="false">
                <CellTemplate>
                <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small"
                         Dense="true" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                    <MudMenuItem OnClick="@(() => OpenDocumentDialog(context.Item))">@ConstantString.View</MudMenuItem>
                </MudMenu>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Title" Title="@L[_currentDto.GetMemberDescription(x => x.Title)]" />
            <PropertyColumn Property="x => x.Description" Title="@L[_currentDto.GetMemberDescription(x => x.Description)]" />
            <PropertyColumn Property="x => x.CreatedBy" Title="@L[_currentDto.GetMemberDescription(x => x.CreatedBy)]">
                <CellTemplate>
                    <div>
                        <MudText Typo="Typo.body2">@context.Item.CreatedByName</MudText>
                        <MudText Typo="Typo.body2">@context.Item.Created.Humanize()</MudText>
                    </div>
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.TenantId" Title="@L[_currentDto.GetMemberDescription(x => x.TenantName)]">
            <CellTemplate>
                <div>
                    <MudText Typo="Typo.body2">@context.Item.TenantName</MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.Item.TenantId</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        </Columns>
        <NoRecordsContent>
            <MudText>@ConstantString.NoRecords</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>@ConstantString.Loading</MudText>
        </LoadingContent>
    </MudDataGrid>


@code {
    bool _loading = true;
    private DocumentDto[] _documents = [];
    private DocumentDto _currentDto = new() { Id = Guid.Empty };

    [Parameter]
    [EditorRequired]
    public string ParticipantId { get; set; } = default!;

    [CascadingParameter]
    public UserProfile? UserProfile { get; set; } = null!;

    protected Guid SelectedDocument { get; set; } = Guid.Empty;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (String.IsNullOrWhiteSpace(ParticipantId) == false)
            {
                _documents = await GetNewMediator().Send(new GetByParticipantId.Query()
                    {
                        ParticipantId = ParticipantId
                    });
            }
        }finally{
            _loading = false;
        }
    }

    public async Task OpenDocumentDialog(DocumentDto item)
    {
        await DialogService.ShowAsync<ViewDocumentDialog>(
            "Document",
            new DialogParameters<ViewDocumentDialog>()
                {
                { x => x.Model, item }
                },
            new DialogOptions
                {
                    MaxWidth = MaxWidth.ExtraExtraLarge,
                    Position=DialogPosition.Center,
                    FullWidth = true,
                    CloseButton = true,
                    CloseOnEscapeKey = true,
                });
    }
}