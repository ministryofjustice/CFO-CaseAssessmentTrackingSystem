@using Cfo.Cats.Application.Common.Interfaces.Locations
@using Cfo.Cats.Application.Features.Assessments.Commands
@using Cfo.Cats.Application.Features.Locations.DTOs
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Activities.Components

@inherits CatsComponentBase

@inject ILocationService Locations;
@inject ICurrentUserService CurrentUser;

<MudDialog>
    <DialogContent>
        @if (Model is not null)
        {
            <MudForm @ref="form" Model="Model" Validation="@(Validator.ValidateValue(Model))">
                <MudGrid>
                    <MudItem xs="12">
                        <MudSelect @bind-Value="Model.Location"
                                   Label="@Model.GetMemberDescription(x => x.Location)"
                                   For="() => Model.Location"
                                   Clearable="true"
                                   ToStringFunc="location => location?.Name">
                            @foreach (var location in locations)
                            {
                                <MudSelectItem Value="location">@location.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Dialog.Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@saving" Color="Color.Primary" OnClick="Submit">@ConstantString.BeginAssessment</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm form = new();
    bool saving;

    [CascadingParameter]
    public required IMudDialogInstance Dialog { get; set; }

    [Parameter, EditorRequired]
    public required BeginAssessment.Command Model { get; set; }

    IEnumerable<LocationDto> locations = [];

    protected override void OnInitialized()
    {
        locations = Locations
            .GetVisibleLocations(CurrentUser.TenantId!)
            .ToList();

        base.OnInitialized();
    }

    async Task Submit()
    {        
        try
        {
            saving = true;

            await form.Validate();

            if (form.IsValid is false)
            {
                return;
            }

            var result = await GetNewMediator().Send(Model);

            if (result.Succeeded)
            {
                Dialog.Close(DialogResult.Ok(result.Data));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }

        }
        finally
        {
            saving = false;
        }
    }

}