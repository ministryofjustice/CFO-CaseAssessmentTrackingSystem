@using System.Text
@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.QualityAssurance.Commands
@using Cfo.Cats.Application.SecurityConstants
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Participants.Components

@inherits CatsComponentBase
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomLeft">
    <ActivatorContent>
        <MudChip T="string" Icon="@Icons.Material.Filled.CallToAction">@ConstantString.Actions</MudChip>
    </ActivatorContent>
    <ChildContent>
        
        @if (Participant.EnrolmentStatus.AllowArchive())
        {
            <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="Archive">Archive</MudMenuItem>
        }
        
        @if (Participant.EnrolmentStatus.AllowSuspend())
        {
            <MudMenuItem Icon="@Icons.Material.Filled.HideSource" IconColor="Color.Error" OnClick="Suspend">Suspend</MudMenuItem>
        }

        @if (Participant.EnrolmentStatus.AllowSubmitToPqa())
        {
            <MudMenuItem Icon="@Icons.Material.Filled.Send" IconColor="Color.Primary" OnClick="SubmitToPqa">Submit to Provider QA</MudMenuItem>
        }

        @if (Participant.EnrolmentStatus.AllowRightToWorkAddition())
        {
            <MudMenuItem Icon="@Icons.Material.Filled.HomeWork" IconColor="Color.Primary" OnClick="OpenRightToWorkDialog">@ConstantString.AddRightToWork</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.Approval" IconColor="Color.Primary" OnClick="OpenConsentDialog">@ConstantString.AddConsent</MudMenuItem>
        }
        
        @if (Participant.EnrolmentStatus.AllowEnrolmentLocationChange())
        {
            <MudMenuItem Icon="@Icons.Material.Filled.Map" IconColor="Color.Primary" OnClick="OpenAdjustLocationDialog">
                @ConstantString.ChangeEnrolmentLocation
            </MudMenuItem>            
        }



    </ChildContent>
</MudMenu>

@code {

    private bool _canSubmitToQA;

    [CascadingParameter]
    protected ParticipantSummaryDto Participant { get; set; } = default!;

    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;

    [CascadingParameter] public UserProfile UserProfile { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState;

        // only provider QA can submit to QA
        _canSubmitToQA = (await AuthService.AuthorizeAsync(state.User, SecurityPolicies.Pqa)).Succeeded;
    }

    protected async Task Archive()
    {
        var parameters = new DialogParameters<ConfirmationDialog>()
        {
            { x => x.ContentText, "Are you sure you would like to archive this case?" }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Archive", parameters);
        var dialogResult = await dialog.Result;

        if (dialogResult?.Canceled is not true)
        {
            var command = new ArchiveCase.Command()
            {
                ParticipantId = Participant.Id                
            };

            var result = await GetNewMediator().Send(command);

            if (result.Succeeded)
            {
                Snackbar.Add($"Participant {Participant.Id} Archived", Severity.Success);
            }
            else
            {
                ShowActionFailure("Failed to archive", result);
            }

        }

    }

    protected async Task Suspend()
    {
        var parameters = new DialogParameters<ConfirmationDialog>()
        {
            { x => x.ContentText, "Are you sure you would like to suspend this case?" }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Suspend", parameters);
        var dialogResult = await dialog.Result;

        if (dialogResult?.Canceled is not true)
        {
            var command = new SuspendCase.Command()
            {
                ParticipantId = Participant.Id
            };

            var result = await GetNewMediator().Send(command);
            if (result.Succeeded)
            {
                Snackbar.Add($"Participant {Participant.Id} suspended", Severity.Success);
            }
            else
            {
                ShowActionFailure("Failed to suspend", result);
            }

        }

    }

    protected async Task SubmitToPqa()
    {
        var parameters = new DialogParameters<ConfirmationWithNotesDialog>()
        {
            { x => x.ContentText, "Are you sure you would like to submit this case to Provider QA?" },
            { x => x.NoteLabel, "Justification Reason" }
        };

        DialogOptions options = new DialogOptions()
            {
                BackdropClick = false,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium
            };

        var dialog = await DialogService.ShowAsync<ConfirmationWithNotesDialog>("Submit to Provider QA", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult?.Canceled is false)
        {
            var command = new SubmitToProviderQa.Command()
            {
                ParticipantId = Participant.Id,
                JustificationReason = dialogResult.Data?.ToString()
            };

            var result = await GetNewMediator().Send(command);
            if (result.Succeeded)
            {
                Snackbar.Add($"Participant {Participant.Id} submitted to Provider QA", Severity.Success);
                await OnUpdate.InvokeAsync();
            }
            else
            {
                ShowActionFailure("Failed to submit to Provider QA", result);
                await SubmitToPqa();
            }
        }

    }

    protected async Task OpenRightToWorkDialog()
    {
        // Show Dialog
        var parameters = new DialogParameters<RightToWorkDialog>
        {
            { x => x.Model, new AddRightToWork.Command() { ParticipantId = Participant.Id } }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = DialogService.Show<RightToWorkDialog>
        (ConstantString.RightToWork, parameters, options);

        var state = await dialog.Result;

        if (!state!.Canceled)
        {
            dialog.Close();
        }

    }

    protected async Task OpenAdjustLocationDialog()
    {

        var parameters = new DialogParameters<AdjustEnrolmentLocationDialog>()
        {
            { x => x.UserProfile, this.UserProfile },
            { x => x.ParticipantId, this.Participant.Id },
            { x => x.JustificationReason, this.Participant.EnrolmentLocationJustification}
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AdjustEnrolmentLocationDialog>("Change Enrolment Location", parameters, options);
        var state = await dialog.Result;

        if (state!.Canceled == false)
        {
            dialog.Close();
            await OnUpdate.InvokeAsync();
        }
    }

    protected async Task OpenConsentDialog()
    {
        // Show Dialog
        var parameters = new DialogParameters<ConsentDialog>
            {
            { x => x.Model, new AddConsent.Command() { ParticipantId = Participant.Id } }
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = DialogService.Show<ConsentDialog>("Consent", parameters, options);

        var state = await dialog.Result;

        if (!state!.Canceled)
        {
            dialog.Close();
        }

    }
    private void ShowActionFailure(string title, IResult result)
    {
        Snackbar.Add(
            @<div>
                <h2>@title</h2>
                <ul>
                    @foreach (var e in result.Errors)
                    {
                        <li>@e</li>
                    }
                </ul>
            </div>
        , Severity.Error, options => {
            options.RequireInteraction = true;
            options.SnackbarVariant = Variant.Text;
        } );
    }

}
