@using Cfo.Cats.Application.Features.Assessments.Queries
@using Cfo.Cats.Application.Features.Participants.Commands
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.Participants.MessageBus
@using Cfo.Cats.Application.Features.QualityAssurance.Commands
@using Rebus.Bus
@using Cfo.Cats.Application.SecurityConstants

@inherits CatsComponentBase
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IBus Bus;

<MudMenu ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomLeft">
    <ActivatorContent>
        <MudChip T="string" Icon="@Icons.Material.Filled.CallToAction">@ConstantString.Actions</MudChip>
    </ActivatorContent>
    <ChildContent>

        @if (Participant.EnrolmentStatus.AllowArchive())
        {
            <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="Archive">Archive</MudMenuItem>
        }

        @if (Participant.EnrolmentStatus.AllowUnarchive())
        {
            <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="Unarchive">Unarchive</MudMenuItem>
        }

        @* @if (Participant.EnrolmentStatus.AllowSuspend())
        {
            <MudMenuItem Icon="@Icons.Material.Filled.HideSource" IconColor="Color.Error" OnClick="Suspend">Suspend</MudMenuItem>
        } *@

        @if (Participant.EnrolmentStatus.AllowSubmitToPqa())
        {
            <MudMenuItem Icon="@Icons.Material.Filled.Send" IconColor="Color.Primary" OnClick="SubmitToPqa">Submit to Provider QA</MudMenuItem>
        }

        @if (Participant.EnrolmentStatus.AllowRightToWorkAddition())
        {
            <MudMenuItem Icon="@Icons.Material.Filled.HomeWork" IconColor="Color.Primary" OnClick="OpenRightToWorkDialog">@ConstantString.AddRightToWork</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.Approval" IconColor="Color.Primary" OnClick="OpenConsentDialog">@ConstantString.AddConsent</MudMenuItem>
        }

        @if (Participant.EnrolmentStatus.AllowEnrolmentLocationChange())
        {
            <MudMenuItem Icon="@Icons.Material.Filled.Map" IconColor="Color.Primary" OnClick="OpenAdjustLocationDialog">
                @ConstantString.ChangeEnrolmentLocation
            </MudMenuItem>            
        }

        @if (_canForceUpdate)
        {
            <MudMenuItem Icon="@Icons.Material.Filled.LocationSearching" IconColor="Color.Primary" OnClick="SetStickyLocation">
                @ConstantString.SetStickyLocation
            </MudMenuItem>    
            <MudMenuItem Icon="@Icons.Material.Filled.Sync" IconColor="Color.Primary" OnClick="SyncRecord">
                @ConstantString.ForceDataSync
            </MudMenuItem>   
        }

    </ChildContent>
</MudMenu>

@code {
    private bool _canForceUpdate;

    [CascadingParameter]
    protected ParticipantSummaryDto Participant { get; set; } = default!;

    [CascadingParameter] 
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    [CascadingParameter] 
    public UserProfile UserProfile { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState;
        _canForceUpdate = (await AuthService.AuthorizeAsync(state.User, SecurityPolicies.SeniorInternal)).Succeeded;
    }

    protected async Task Archive()
    {
        var command = new ArchiveCase.Command()
            {
                ParticipantId = Participant.Id
            };

        var parameters = new DialogParameters<ArchiveCaseDialog>()
            {
                { x => x.Model,command}
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ArchiveCaseDialog>("Archive Case", parameters, options);

        var state = await dialog.Result;

        if (state!.Canceled is false)
        {
            var result = await GetNewMediator().Send(command);

            if (result.Succeeded)
            {
                Snackbar.Add($"Participant {Participant.Id} Archived", Severity.Success);
                await OnUpdate.InvokeAsync();
            }
            else
            {
                ShowActionFailure("Failed to archive", result);
            }
        }    
    }

    protected async Task Suspend()
    {
        var parameters = new DialogParameters<ConfirmationDialog>()
        {
            { x => x.ContentText, "Are you sure you would like to suspend this case?" }
        };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Suspend", parameters);
        var dialogResult = await dialog.Result;

        if (dialogResult?.Canceled is not true)
        {
            var command = new SuspendCase.Command()
                {
                    ParticipantId = Participant.Id
                };

            var result = await GetNewMediator().Send(command);
            if (result.Succeeded)
            {
                Snackbar.Add($"Participant {Participant.Id} suspended", Severity.Success);
                await OnUpdate.InvokeAsync();
            }
            else
            {
                ShowActionFailure("Failed to suspend", result);
            }
        }
    }

    protected async Task SubmitToPqa()
    {
        //need to check if 2 or more reds
        var parameters = new DialogParameters<ConfirmationWithNotesDialog>();
        var justificationRequired = await AssessmentJustificationRequired();

        if (justificationRequired)
        {
            parameters = new DialogParameters<ConfirmationWithNotesDialog>()
            {
                { x => x.ContentText, "Are you sure you would like to submit this case to Provider QA?" },
                { x => x.NoteLabel, "If fewer than two reds have been achieved, a justification is required" },
                { x => x.MandatoryNote, true}
            };
        }
        else{
            parameters = new DialogParameters<ConfirmationWithNotesDialog>()
            {
                { x => x.ContentText, "Are you sure you would like to submit this case to Provider QA?" },
                { x => x.NoteLabel, "If two or more reds have been achieved, no justification is required" },
                { x => x.MandatoryNote, false}
            };
        }

        DialogOptions options = new DialogOptions()
        {
            BackdropClick = false,
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium
        };

        var dialog = await DialogService.ShowAsync<ConfirmationWithNotesDialog>("Submit to Provider QA", parameters, options);
        var dialogResult = await dialog.Result;

        if (dialogResult?.Canceled is false)
        {
            var command = new SubmitToProviderQa.Command()
            {
                ParticipantId = Participant.Id,
                JustificationReason = dialogResult.Data?.ToString()
            };

            var result = await GetNewMediator().Send(command);
            if (result.Succeeded)
            {
                Snackbar.Add($"Participant {Participant.Id} submitted to Provider QA", Severity.Success);
                await OnUpdate.InvokeAsync();
            }
            else
            {
                ShowActionFailure("Failed to submit to Provider QA", result);
                await SubmitToPqa();
            }
        }
    }

    protected async Task OpenRightToWorkDialog()
    {
        // Show Dialog
        var parameters = new DialogParameters<RightToWorkDialog>
        {
            { x => x.Model, new AddRightToWork.Command() { ParticipantId = Participant.Id } }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<RightToWorkDialog>
        (ConstantString.RightToWork, parameters, options);

        var state = await dialog.Result;

        if (!state!.Canceled)
        {
            dialog.Close();
        }
    }

    protected async Task OpenAdjustLocationDialog()
    {
        var parameters = new DialogParameters<AdjustEnrolmentLocationDialog>()
        {
            { x => x.UserProfile, this.UserProfile },
            { x => x.ParticipantId, this.Participant.Id },
            { x => x.JustificationReason, this.Participant.EnrolmentLocationJustification}
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AdjustEnrolmentLocationDialog>("Change Enrolment Location", parameters, options);
        var state = await dialog.Result;

        if (state!.Canceled == false)
        {
            dialog.Close();
            await OnUpdate.InvokeAsync();
        }
    }

    protected async Task SyncRecord()
    {
        var parameters = new DialogParameters
        {
            { nameof(ConfirmationDialog.ContentText), "Are you sure you wish to force a data sync. Depending on system load, this may take a moment to show and you may need to refresh the page to see" }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Force data sync", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            var sync = new SyncParticipantCommand(Participant.Id);
            await Bus.Publish(sync);
            await OnUpdate.InvokeAsync();
        }
    }

    protected async Task SetStickyLocation()
    {
        // Show Dialog
        var parameters = new DialogParameters<SetStickyLocationDialog>
        {
            { x => x.ParticipantId,  Participant.Id  }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<SetStickyLocationDialog>("Set Sticky Community Region", parameters, options);

        var state = await dialog.Result;

        if (!state!.Canceled)
        {
            dialog.Close();
        }
    }

    protected async Task OpenConsentDialog()
    {
        // Show Dialog
        var parameters = new DialogParameters<ConsentDialog>
            {
            { x => x.Model, new AddConsent.Command() { ParticipantId = Participant.Id } }
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<ConsentDialog>("Consent", parameters, options);

        var state = await dialog.Result;

        if (!state!.Canceled)
        {
            dialog.Close();
        }
    }

    private void ShowActionFailure(string title, IResult result)
    {
        Snackbar.Add(
            @<div>
                <h2>@title</h2>
                <ul>
                    @foreach (var e in result.Errors)
                    {
                        <li>@e</li>
                    }
                </ul>
            </div>
    , Severity.Error, options => {
        options.RequireInteraction = true;
        options.SnackbarVariant = Variant.Text;
    } );
    }

    private async Task<bool> AssessmentJustificationRequired()
    {
        bool justificationRequired = true;

        var query = new GetAssessmentScores.Query()
                {
                    ParticipantId = Participant.Id
                };

        var result = await GetNewMediator().Send(query);

        if (result is { Succeeded: true, Data: not null })
        {
            var latestAssessment = result.Data.MaxBy(pa => pa.CreatedDate);

            if (latestAssessment != null)
            {
                var redCount = latestAssessment!.PathwayScore.Count(x => x.Score < 10);

                if (redCount >= 2)
                {
                    justificationRequired = false;
                }
            }          
        }

        return justificationRequired;
    }            

    protected async Task Unarchive()
    {
        var command = new UnarchiveCase.Command()
            {
                ParticipantId = Participant.Id
            };

        var parameters = new DialogParameters<UnarchiveCaseDialog>()
            {
                { x => x.Model,command}
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<UnarchiveCaseDialog>("Unarchive Case", parameters, options);

        var state = await dialog.Result;

        if (state!.Canceled is false)
        {
            var result = await GetNewMediator().Send(command);

            if (result.Succeeded)
            {
                Snackbar.Add($"Participant {Participant.Id} Unarchived", Severity.Success);
                await OnUpdate.InvokeAsync();
            }
            else
            {
                ShowActionFailure("Failed to Unarchive", result);
            }
        }
    }
}