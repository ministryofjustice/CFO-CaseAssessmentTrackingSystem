@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.Participants.Queries
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Risk.RiskComponents

@inherits CatsComponentBase

<style>
    .readonly-toggle {
        pointer-events: none; 
    }
</style>

@if (_notFound)
{
    <MudAlert>
        <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Square="true" Class="my-2">No risk information found.</MudAlert>
    </MudAlert>
}

@if(_model is not null)
{
    <MudForm @ref="form" ReadOnly>
        <CascadingValue Value="form">
            <MudExpansionPanels>
                <MudExpansionPanel>
                    <TitleContent>
                        <MudText>@_model.GetMemberDescription(x => x.LicenseConditions)</MudText>
                    </TitleContent>
                    <ChildContent>
                        <LicenseConditions Model="_model" />
                    </ChildContent>
                </MudExpansionPanel>
                <MudExpansionPanel>
                    <TitleContent>
                        <MudText>Risk Overview</MudText>
                    </TitleContent>
                    <ChildContent>
                        <RiskOverview Model="_model"/>
                    </ChildContent>
                </MudExpansionPanel>
                <MudExpansionPanel>
                    <TitleContent>
                        <MudText>MAPPA</MudText>
                    </TitleContent>
                    <ChildContent>
                        <Mappa Model="_model"/>
                    </ChildContent>
                </MudExpansionPanel>
                <MudExpansionPanel>
                    <TitleContent>
                        <MudText>@_model.GetMemberDescription(x => x.IsSubjectToSHPO)</MudText>
                    </TitleContent>
                    <ChildContent>
                        <SHPO Model="_model"/>
                    </ChildContent>
                </MudExpansionPanel>
                <MudExpansionPanel>
                    <TitleContent>
                        <MudText>@_model.GetMemberDescription(x => x.SpecificRisk)</MudText>
                    </TitleContent>
                    <ChildContent>
                        <SpecificRisk Model="_model" />
                    </ChildContent>
                </MudExpansionPanel>
                <MudExpansionPanel>
                    <TitleContent>
                        <MudText>@_model.GetMemberDescription(x => x.ActivityRecommendations)</MudText>
                    </TitleContent>
                    <ChildContent>
                        <ActivityRecommendations Model="_model" />
                    </ChildContent>
                </MudExpansionPanel>
                <MudExpansionPanel>
                    <TitleContent>
                        <MudText>@_model.GetMemberDescription(x => x.ActivityRestrictions)</MudText>
                    </TitleContent>
                    <ChildContent>
                        <ActivityRestrictions Model="_model"/>
                    </ChildContent>
                </MudExpansionPanel>
                <MudExpansionPanel>
                    <TitleContent>
                        <MudText>@_model.GetMemberDescription(x => x.AdditionalInformation)</MudText>
                    </TitleContent>
                    <ChildContent>
                        <AdditionalInformation Model="_model" />
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </CascadingValue>
    </MudForm>
}

@code {
    [Parameter]
    [EditorRequired]
    public string ParticipantId { get; set; } = default!;

    private MudForm? form;
    private RiskDto? _model;
    private bool _notFound = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await GetNewMediator().Send(new GetParticipantRisk.Query()
            {
                ParticipantId = ParticipantId
            });

            if(result.Succeeded && result.Data is not null)
            {
                _model = result.Data;
            }
            else
            {
                _notFound = true;
            }
        }
        catch (NotFoundException)
        {
            _notFound = true;
        }
        finally
        {
            await base.OnInitializedAsync();
        }

    }
}
