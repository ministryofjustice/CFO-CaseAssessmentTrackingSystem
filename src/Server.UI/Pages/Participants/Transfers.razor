@page "/pages/participants/transfers"

@using Cfo.Cats.Application.Features.Transfers.DTOs
@using Cfo.Cats.Application.Features.Transfers.Queries
@using Cfo.Cats.Application.SecurityConstants

@inherits CatsComponentBase

@attribute [Authorize(Policy = SecurityPolicies.UserHasAdditionalRoles)]

<MudText Typo="Typo.h2">Incoming Transfers</MudText>
<MudSimpleTable>
    <thead>
        <tr>
            <th>Participant</th>
            <th>Occurred</th>
            <th>From</th>
            <th>To</th>
            <th>Type</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var transfer in incomingTransfers)
        {
            <tr>
                <td>@transfer.ParticipantId</td>
                <td>@transfer.MoveOccured.ToShortDateString()</td>
                <td>@transfer.FromLocation.Name (@transfer.FromLocation.LocationType.Name)</td>
                <td>@transfer.ToLocation.Name (@transfer.ToLocation.LocationType.Name)</td>
                <td>@transfer.TransferType.Name</td>
                <td>

                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

<MudText Typo="Typo.h2">Outgoing Transfers</MudText>
<MudSimpleTable>
    <thead>
        <tr>
            <th>Participant</th>
            <th>Occurred</th>
            <th>From</th>
            <th>To</th>
            <th>Type</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transfer in outgoingTransfers)
        {
            <tr>
                <td>@transfer.ParticipantId</td>
                <td>@transfer.MoveOccured.ToShortDateString()</td>
                    <td>@transfer.FromLocation.Name (@transfer.FromLocation.LocationType.Name)</td>
                    <td>@transfer.ToLocation.Name (@transfer.ToLocation.LocationType.Name)</td>
                <td>@transfer.TransferType.Name</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {
    private IEnumerable<IncomingTransferDto> incomingTransfers = [];
    private IEnumerable<OutgoingTransferDto> outgoingTransfers = [];

    protected async override Task OnInitializedAsync()
    {
        incomingTransfers = await GetIncomingTransfers();
        outgoingTransfers = await GetOutgoingTransfers();

        await base.OnInitializedAsync();
    }

    private async Task<IEnumerable<IncomingTransferDto>> GetIncomingTransfers()
    {
        var query = await GetNewMediator().Send(new GetIncomingTransfers.Query());
        return query.Data ?? [];
    }
    private async Task<IEnumerable<OutgoingTransferDto>> GetOutgoingTransfers()
    {
        var query = await GetNewMediator().Send(new GetOutgoingTransfers.Query());
        return query.Data ?? [];
    }

}
