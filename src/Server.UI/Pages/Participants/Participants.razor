@page "/pages/participants"
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Participants.Components
@using Cfo.Cats.Application.Features.Participants.Caching
@using Cfo.Cats.Application.Features.Participants.Commands.Transistion
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.Participants.Queries
@using Cfo.Cats.Application.Features.Participants.Specifications
@using Cfo.Cats.Application.SecurityConstants
@inject IStringLocalizer<Participants> L

@inherits CatsComponentBase

@attribute [Authorize(Policy = PolicyNames.AuthorizedUser)]

<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>
<ActiveUserSession PageComponent="@($"{nameof(Participants)}/")" />
<MudDataGrid ServerData="@(ServerReload)"
             FixedHeader="true"
             FixedFooter="true"
             Virtualize="true"
             @bind-RowsPerPage="_defaultPageSize"
             Height="calc(100vh - 330px)"
             Loading="@_loading"
             MultiSelection="true"
             @bind-SelectedItems="_selectedItems"
             @bind-SelectedItem="_currentDto"
             Hover="true"
             @ref="_table">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Large"/>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption" Class="mb-2">@L[_currentDto.GetClassDescription()]</MudText>
                    <MudEnumSelect Style="min-width:120px" TEnum="ParticipantListView" ValueChanged="OnChangedListView" Value="Query.ListView" Dense="true" Label="List View">
                    </MudEnumSelect>
                </div>
            </div>
            <div class="flex-grow-1"></div>
            <div class="d-flex flex-column justify-end">
                <div class="d-flex">
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="@(() => OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">
                            @ConstantString.Refresh
                        </MudButton>
                        @if (_canEnrol)
                        {
                            <MudButton Variant="Variant.Outlined"
                                       Size="Size.Small"
                                       Disabled="@_loading"
                                       OnClick="@(() => OnEnrol())"
                                       StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                       Style="margin-right: 4px; margin-bottom:4px">
                                @ConstantString.NewEnrolment
                            </MudButton>
                        }
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        
                    </MudHidden>
                </div>
                @if (_canSearch)
                {
                    <MudTextField T="string" ValueChanged="@(OnSearch)" Value="@Query.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                    </MudTextField>
                }
            </div>
        </div>
    </ToolBarContent>
    <Columns>
        <TemplateColumn CellClass="width:60px;" Title="@ConstantString.Actions" Sortable="false">
            <CellTemplate>
                <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small"
                         Dense="true"
                         EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                    
                    @if (context.Item.EnrolmentStatus == EnrolmentStatus.PendingStatus)
                    {
                        // we are pending. Allow a continuation of the enrolment process.
                        <MudMenuItem OnClick="@(()=> OnResumeEnrolment(context.Item))">
                            @ConstantString.ResumeEnrolment
                        </MudMenuItem>
                         // we are pending. Allow a continuation of the enrolment process.
                        <MudMenuItem OnClick="@(()=> OnSubmitToProviderQa(context.Item))">
                            @ConstantString.Submit
                        </MudMenuItem>
                    }
                    <MudMenuItem OnClick="@(()=> Edit(context.Item))">
                        @ConstantString.Edit
                    </MudMenuItem>

                </MudMenu>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.LastName" Title="@L["Participant"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2">@context.Item.FirstName @context.Item.LastName</MudText>
                    <MudText Typo="Typo.body2">@context.Item.Id</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.EnrolmentStatus" Title="@L[_currentDto.GetMemberDescription(x => x.EnrolmentStatus)]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <div class="flex-grow-0">
                        <EnrolmentStatusChip Status="@context.Item.EnrolmentStatus"></EnrolmentStatusChip>
                    </div>
                </div>
            </CellTemplate>
        </PropertyColumn>
                <PropertyColumn Property="x => x.ConsentStatus" Title="@L[_currentDto.GetMemberDescription(x => x.ConsentStatus)]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <div class="flex-grow-0">
                        <ConsentStatusChip Status="@context.Item.ConsentStatus"></ConsentStatusChip>
                    </div>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.CurrentLocation" 
                        Title="@L[_currentDto.GetMemberDescription(x => x.CurrentLocation)]"
                        SortBy="x => x.CurrentLocation.Name">
            <CellTemplate>
                <div class="d-flex align-items-center">
                    @if (context.Item.CurrentLocation.LocationType.IsCustody)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Castle" Title="Custody" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.MapsHomeWork" Title="Community" />
                    }
                    <span class="ml-2">@context.Item.CurrentLocation.Name</span>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.EnrolmentLocation"
                        Title="@L[_currentDto.GetMemberDescription(x => x.EnrolmentLocation)]"
                        SortBy="x => x.EnrolmentLocation?.Name">
            <CellTemplate>
                <div class="d-flex align-items-center">
                    
                    @if (context.Item.EnrolmentLocation is not null)
                    {
                        @if (context.Item.EnrolmentLocation.LocationType.IsCustody)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Castle" Title="Custody" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.MapsHomeWork" Title="Community" />
                        }
                        <span class="ml-2">@context.Item.EnrolmentLocation?.Name</span>
                    }
                </div>
            </CellTemplate>
        </PropertyColumn>
    </Columns>
</MudDataGrid>

@code {

    public string? Title { get; private set; }
    private int _defaultPageSize = 15;
    private HashSet<ParticipantDto> _selectedItems = new();

    private MudDataGrid<ParticipantDto> _table = default!;
    private bool _loading;
    private bool _canSearch;
    private bool _canEnrol;
    
    private ParticipantDto _currentDto = new() { Id = "" };

    private ParticipantsWithPagination.Query Query { get; set; } = new();

    private void OnResumeEnrolment(ParticipantDto participant)
    {
        Navigation.NavigateTo($"/pages/enrolments/{participant.Id}");
    }
    
    private async Task OnSubmitToProviderQa(ParticipantDto participant)
    {
        SubmitToProviderQa.Command command = new SubmitToProviderQa.Command
        {
            ParticipantId = participant.Id
        };
        var result = await GetNewMediator().Send(command);
        if (result.Succeeded)
        {
            Snackbar.Add($"Participant {participant.Id} submitted to Provider QA", Severity.Success);
        }
        else
        {
            Snackbar.Add($"Participant {participant.Id} failed to submit to Provider QA", Severity.Error);
        }
    }

    private void Edit(ParticipantDto participant)
    {
        Navigation.NavigateTo($"/pages/participants/{participant.Id}");
    }

    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;
    [CascadingParameter] private UserProfile? UserProfile { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Title = L["Participants"];
        var state = await AuthState;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, PolicyNames.AllowCandidateSearch)).Succeeded;
        _canEnrol = (await AuthService.AuthorizeAsync(state.User, PolicyNames.AllowEnrol)).Succeeded;
    }

    private async Task<GridData<ParticipantDto>> ServerReload(GridState<ParticipantDto> state)
    {
        try
        {
            _loading = true;
            Query.CurrentUser = UserProfile;
            Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            var result = await GetNewMediator().Send(Query).ConfigureAwait(false);
            return new GridData<ParticipantDto> { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }
    }
    
    private async Task OnSearch(string text)
    {
        if (_loading)
        {
            return;
        }
        _selectedItems = new();
        Query.Keyword = text;
        await _table.ReloadServerData();
    }
    
    private async Task OnChangedListView(ParticipantListView listview)
    {
        Query.ListView = listview;
        await _table.ReloadServerData();
    }
    
    private async Task OnRefresh()
    {
        ParticipantCacheKey.Refresh();
        _selectedItems = new HashSet<ParticipantDto>();
        Query.Keyword = string.Empty;
        await _table.ReloadServerData();
    }

    private void OnEnrol()
    {
        Navigation.NavigateTo("/pages/candidates/search");
    }
}