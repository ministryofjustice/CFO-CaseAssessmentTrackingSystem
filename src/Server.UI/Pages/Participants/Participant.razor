@page "/pages/participants/{id}"
@using System.Globalization
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.Participants.Queries
@using Cfo.Cats.Application.SecurityConstants
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Participants.Components
@using Cfo.Cats.Server.UI.Pages.Participants.Components.DMS
@using Humanizer

@inherits CatsComponentBase

@attribute [Authorize]

<style>
    .primary-tabs .mud-tabs-toolbar .mud-tooltip-root .mud-tab-active {
    }
</style>

<MudContainer Style="height: 100%; width: 100%; min-width: 480px" MaxWidth="MaxWidth.ExtraExtraLarge">
    @if (_participant is not null)
    {
        <CascadingValue Value="_participant">

            <MudPaper Class="pa-2 ma-2" Style="min-height: 90vh;" Elevation="3">

                <MudGrid Class="pa-1" Justify="Justify.FlexStart">
                    <MudItem xs="12">

                        <MudStack Row="true" Spacing="2" Reverse="false" Breakpoint="Breakpoint.SmAndDown" AlignItems="AlignItems.Start" Justify="Justify.FlexStart" Wrap="Wrap.Wrap"  >
                            <MudText Typo="Typo.subtitle1" Color="Color.Info"><strong>Participant</strong></MudText>
                            <MudText Typo="Typo.subtitle1">@_participant.ParticipantName</MudText>
                            <MudDivider Vertical="true" FlexItem="true"/>
                            <MudText Typo="Typo.subtitle1" Color="Color.Info"><strong>Ref</strong></MudText>
                            <MudText Typo="Typo.subtitle1">@_participant.Id</MudText>
                            <MudDivider Vertical="true" FlexItem="true"/>
                            <MudText Typo="Typo.subtitle1" Color="Color.Info"><strong>Status</strong></MudText>
                            <MudText Typo="Typo.subtitle1">@_participant.EnrolmentStatus.Name</MudText>
                            <MudDivider Vertical="true" FlexItem="true"/>
                            <MudText Typo="Typo.subtitle1" Color="Color.Info"><strong>Assigned To</strong></MudText>
                            <MudText Typo="Typo.subtitle1">@($"{_participant.OwnerName} ({_participant.TenantName}) ")</MudText>
                            <MudDivider Vertical="true" FlexItem="true"/>
                            <MudText Typo="Typo.subtitle1" Color="Color.Info"><strong>Location</strong></MudText>
                            <MudText Typo="Typo.subtitle1">@_participant.Location</MudText>
                        </MudStack>

                    </MudItem>
                </MudGrid>

                @if (_participant.EnrolmentStatus != EnrolmentStatus.IdentifiedStatus)
                {
                    <RagBar ParticipantId="@Id"/>
                    <ParticipantActionMenu OnUpdate="Refresh"/>
                    @if (_showRightToWorkWarning)
                    {
                        <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" Square="true" Class="my-2">@_rightToWorkAlertMessage</MudAlert>
                    }

                    <MudTabs Class="primary-tabs mt-2" Outlined="true" Color="Color.Info" Border="true" Style="height: 100%;">
                        <MudTabPanel Text="Case Summary">
                            <CaseSummary/>
                        </MudTabPanel>
                        <MudTabPanel Text="About">
                            <CaseAbout ParticipantId="@_participant.Id" />
                        </MudTabPanel>
                        <MudTabPanel Text="Inductions">
                            <Inductions ParticipantId="@_participant.Id"/>
                        </MudTabPanel>
                        <MudTabPanel Text="Sentence Information">
                            <CaseSentenceInformation ParticipantId="@Id" />
                            <ExternalData ParticipantId="@Id" ConsentStatus="@_participant.ConsentStatus" />
                        </MudTabPanel>
                        <MudTabPanel Text="Risk" ID="@Id" Icon="@_riskIcon" IconColor="@_riskIconColor" ToolTip="@_riskInfo">
                            <CaseRisk ParticipantId="@Id"/>
                        </MudTabPanel>
                        <MudTabPanel Text="Assessments" Icon="@_assessmentIcon" IconColor="@_assessmentIconColor" ToolTip="@_assessmentInfo">
                            <CaseAssessment ParticipantId="@Id"/>
                        </MudTabPanel>
                        <MudTabPanel Text="PRI" Icon="@_priDueIcon" IconColor="@_priDueIconColor" ToolTip="@_priDueToolTip">
                            <CasePRI ParticipantId="@Id" OnUpdate="Refresh"/>
                        </MudTabPanel>
                        <MudTabPanel Text="Bio" Icon="@_bioIcon" IconColor="@_bioIconColor" ToolTip="@_bioInfo">
                            <CaseBio ParticipantId="@Id"/>
                        </MudTabPanel>
                        <MudTabPanel Text="Documents">
                            <CaseDocuments ParticipantId="@Id"/>
                        </MudTabPanel>
                        <MudTabPanel Text="Pathway Plan">
                            <CasePathwayPlan ParticipantId="@Id" OnUpdate="Refresh"/>
                        </MudTabPanel>
                        <MudTabPanel Text="Notes">
                            <CaseNotes ParticipantId="@Id"/>
                        </MudTabPanel>
                        <MudTabPanel Text="Timeline">
                            <CaseTimeline/>
                        </MudTabPanel>

                        @if (UserProfile.AssignedRoles.Any(r =>
                  r is RoleNames.SystemSupport or RoleNames.SMT or RoleNames.QAManager))
                        {
                            <MudTabPanel Text="Audit">
                                <ParticipantAudit Id="@Id"/>
                            </MudTabPanel>
                        }
                        @*
                        <MudTabPanel Text="Contact Log" Disabled></MudTabPanel>
                        <MudTabPanel Text="PSF" Disabled></MudTabPanel>
                        <MudTabPanel Text="Distance Travelled" Disabled></MudTabPanel>
                        <MudTabPanel Text="Case Discussions" Disabled></MudTabPanel>
                        *@
                    </MudTabs>
                }
            </MudPaper>
        </CascadingValue>
    }
</MudContainer>

@code {
    [Parameter] public string Id { get; set; } = default!;

    [CascadingParameter] public UserProfile UserProfile { get; set; } = default!;

    private ParticipantSummaryDto? _participant = null;

    private string _riskInfo = String.Empty;
    private string _riskIcon = String.Empty;
    private Color _riskIconColor = Color.Transparent;

    private string _priDueToolTip = String.Empty;
    private string _priDueIcon = String.Empty;
    private Color _priDueIconColor = Color.Transparent;

    private bool _showRightToWorkWarning = false;
    private string _rightToWorkAlertMessage = ConstantString.RightToWorkIsRequiredMessage;

    private string _assessmentInfo = String.Empty;
    private string _assessmentIcon = String.Empty;
    private Color _assessmentIconColor = Color.Transparent;


    private string _bioInfo = String.Empty;
    private string _bioIcon = String.Empty;
    private Color _bioIconColor = Color.Transparent;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        await base.OnInitializedAsync();
        SetRiskDueWarning();
        ShowRightToWorkWarning();
        SetPriDueWarning();
        SetAssessmentDueWarning();
        SetBioDueWarning();
    }

    void ShowRightToWorkWarning()
    {
        _showRightToWorkWarning = _participant!.IsRightToWorkRequired
                                  && _participant!.ConsentStatus == ConsentStatus.GrantedStatus
                                  && _participant.HasActiveRightToWork == false;
    }

    void SetRiskDueWarning()
    {
        if (_participant!.RiskDue.HasValue)
        {
            var datePart = _participant.RiskDue.Value.Date;

            _riskInfo = $"Due {datePart.Humanize()}";

            int dueInDays = _participant!.RiskDueInDays!.Value;
            switch (dueInDays)
            {
                case <= 0:
                    _riskIcon = Icons.Material.Filled.Error;
                    _riskIconColor = Color.Error;
                    break;
                case <= 14:
                    _riskIcon = Icons.Material.Filled.Warning;
                    _riskIconColor = Color.Warning;
                    break;
            }
        }
    }

    void SetPriDueWarning()
    {
        PriSummaryDto? latestPRI = _participant!.LatestPri;
        
        _priDueIcon = String.Empty;
        _priDueIconColor = Color.Transparent;
        if (latestPRI is null)
        {
            _priDueToolTip = _participant.LocationType switch
            {
                { IsCustody: true, IsMapped: true } => "No PRI has been created.",
                { IsCommunity: true } => "Not available in the community.",
                _ => "Not available in this location."
            };
        }
        else
        {
            if (latestPRI.Status == PriStatus.Abandoned)
            {
                _priDueToolTip = "Pre-Release Inventory has been Abandoned.";
            }
            else if (latestPRI.Status == PriStatus.Completed)
            {
                _priDueToolTip = "Pre-Release Inventory has been Completed.";
            }
            else
            {
                if (latestPRI.TTGDueDate.HasValue)
                {
                    DateOnly priTTGDueDate = latestPRI.TTGDueDate.Value;
                    _priDueToolTip = String.Format(ConstantString.PriTTGDueWarningToolTip, priTTGDueDate.Humanize());

                    if (latestPRI.IsFinalTTGWarningApplicable)
                    {
                        _priDueIcon = Icons.Material.Filled.Error;
                        _priDueIconColor = Color.Error;
                    }
                    else if (latestPRI.IsFirstTTGWarningApplicable)
                    {
                        _priDueIcon = Icons.Material.Filled.Warning;
                        _priDueIconColor = Color.Warning;
                    }
                }
                else if (_participant.LocationType.IsCommunity)
                {
                    _priDueToolTip = ConstantString.PriNoActualReleaseDateWarning;
                    _priDueIcon = Icons.Material.Outlined.Info;
                    _priDueIconColor = Color.Warning;
                }
            }
        }
    }

    private async Task Refresh()
    {
        _participant = await GetNewMediator().Send(new GetParticipantSummary.Query()
        {
            ParticipantId = Id,
            CurrentUser = UserProfile
        });
    }

    void SetAssessmentDueWarning()
    {
        var _latestAssessment = _participant!.Assessments is []
            ? null
            : _participant.Assessments.OrderByDescending(a => a.AssessmentDate)
                .First();

        if (_latestAssessment is null)
        {
            _assessmentInfo = "No assessment has been created.";
            _assessmentIcon = String.Empty;
            _assessmentIconColor = Color.Transparent;
        }
        else if (_latestAssessment.Completed is null)
        {
            _assessmentInfo = "Assessment not completed";
            _assessmentIcon = Icons.Material.Filled.Warning;
            _assessmentIconColor = Color.Warning;
        }
        else
        {
            DateOnly _assessmentDueDate = DateOnly.FromDateTime(_latestAssessment.Completed.Value.AddMonths(3));
            _assessmentInfo = $"Due {_latestAssessment.Completed.Value.AddMonths(3).Humanize()}";

            int _assessmentDueInDays = _assessmentDueDate.DayNumber - DateOnly.FromDateTime(DateTime.UtcNow.Date).DayNumber;
            switch (_assessmentDueInDays)
            {
                case var _ when _assessmentDueInDays <= 0:
                    _assessmentIcon = Icons.Material.Filled.Error;
                    _assessmentIconColor = Color.Error;
                    break;
                case var _ when _assessmentDueInDays >= 0 && _assessmentDueInDays <= 14:
                    _assessmentIcon = Icons.Material.Filled.Warning;
                    _assessmentIconColor = Color.Warning;
                    break;
            }
        }
    }

    void SetBioDueWarning()
    {
        if (_participant!.BioDue.HasValue)
        {
            var datePart = _participant.BioDue.Value.Date;

            _bioInfo = $"Due {datePart.Humanize()}";

            int _dueInDays = _participant!.BioDueInDays!.Value;
            switch (_dueInDays)
            {
                case var _ when _dueInDays <= 0:
                    _bioIcon = Icons.Material.Filled.Error;
                    _bioIconColor = Color.Error;
                    break;
                case var _ when _dueInDays >= 0 && _dueInDays <= 14:
                    _bioIcon = Icons.Material.Filled.Warning;
                    _bioIconColor = Color.Warning;
                    break;
            }
        }
    }
}