@page "/pages/participants/movedparticipants"

@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.Participants.Queries
@using Cfo.Cats.Application.SecurityConstants
@using Humanizer
@using static Cfo.Cats.Application.Features.Participants.Queries.GetParticipantsWithAccessEndingSoon

@inherits CatsComponentBase

@attribute [Authorize(Policy = SecurityPolicies.AuthorizedUser)]

<MudText Typo="Typo.h2">Participants You're Losing Access To</MudText>
<MudSimpleTable>
    <thead>
        <tr>
            <th>Participant</th>
            <th>Accessible Until</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var access in participantAccess.OrderBy(p => p.HasAccessTo))
        {
            <tr>
                <td>@string.Join(' ', access.Participant.FirstName, access.Participant.LastName) (@access.Participant.Id)</td>
                <td>@access.HasAccessTo.ToLocalTime().ToShortDateString() (@access.HasAccessTo.Humanize())</td>
                <td>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="@(()=> View(access.Participant))">View</MudButton>
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {
    private IEnumerable<ParticipantWithAccessEndingSoonDto> participantAccess = [];

    protected async override Task OnInitializedAsync()
    {
        participantAccess = await GetNewMediator().Send(new GetParticipantsWithAccessEndingSoon.Query());
        await base.OnInitializedAsync();
    }

    private void View(ParticipantDto participant)
    {
        Navigation.NavigateTo($"/pages/participants/{participant.Id}");
    }
}