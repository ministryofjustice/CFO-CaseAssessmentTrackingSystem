@page "/administration/tenants"
@using BlazorDownloadFile
@using Cfo.Cats.Application.Common.Interfaces.MultiTenant
@using Cfo.Cats.Application.Features.Tenants.Commands
@using Cfo.Cats.Application.Features.Tenants.DTOs
@using Cfo.Cats.Application.Features.Tenants.Commands.AddEdit
@using Cfo.Cats.Application.Features.Tenants.Commands.Delete
@using Cfo.Cats.Application.Features.Tenants.Commands.Rename
@using Cfo.Cats.Application.Features.Tenants.Queries.Export
@using Cfo.Cats.Application.Features.Tenants.Queries.GetAll
@using Cfo.Cats.Server.UI.Pages.Tenants.Components
@using Cfo.Cats.Application.SecurityConstants


@attribute [Authorize(Policy = SecurityPolicies.SystemFunctionsRead)]

@inject IStringLocalizer<Tenants> L
@inject ITenantService TenantService

@inherits CatsComponentBase



<MudGrid>
    <MudItem sm="6" md="4" >
        @if (loading == false)
        {
            <MudTreeView T="TenantDto" Hover
                SelectionMode="SelectionMode.SingleSelection"
                SelectedValueChanged="OnSelectedTenantChanged">
                @foreach (var node in GetRootNodes())
                {
                    <MudTreeViewItem Text="@node.Name" Value="@node" Expanded="true">
                        @if (HasChildren(node))
                        {
                            @RenderChildNodes(node.Id)
                        }
                    </MudTreeViewItem>
                }
            </MudTreeView>
        }
    </MudItem>
    <MudItem sm="6" md="8">
        @if (SelectedTenant is not null)
        {
            <MudCard Elevation="0" Class="d-flex flex-grow-0">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">
                            <strong>Allowed Domains</strong>
                        </MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        @foreach (var domain in SelectedTenant.Domains)
                        {
                            <MudItem xs="12" md="6" lg="4" Class="d-flex">
                                <MudField Variant="Variant.Text">@domain</MudField>
                                <MudIconButton OnClick="@(() => OnDeleteDomain(domain, SelectedTenant.Id))" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                            </MudItem>
                        }
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => OnAddDomain(SelectedTenant))">Add Domain</MudButton>
                </MudCardActions>
            </MudCard>

            <TenantLocations TenantId="@SelectedTenant.Id" />
        }
    </MudItem>
</MudGrid>





@code
{
    [CascadingParameter] private UserProfile? UserProfile { get; set; }

    private TenantDto? SelectedTenant { get; set; }

    private bool loading;

    private GetAllTenantsQuery Query { get; } = new();
    private TenantDto[] Data { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private void OnSelectedTenantChanged(TenantDto tenant)
    {
        this.SelectedTenant = tenant;
        StateHasChanged();
    }

    private IEnumerable<TenantDto> GetRootNodes()
    {
        var minDepth = Data.Min(n => n.Id.Count(c => c == '.'));
        return Data.Where(n => n.Id.Count(c => c == '.') == minDepth);
    }

    private async Task LoadData()
    {
        loading = true;
        await Task.CompletedTask; // get tenants

        Query.UserProfile = this.UserProfile;

        var result = await GetNewMediator().Send(Query);

        if (result.Succeeded)
        {
            Data = result.Data!.ToArray();
            StateHasChanged();
        }
        loading = false;
    }

    private RenderFragment RenderChildNodes(string parentId) => builder =>
    {
        var childNodes = Data.Where(n => n.Id.StartsWith(parentId) && n.Id.Count(c => c == '.') == parentId.Count(c => c == '.') + 1);

        foreach (var child in childNodes)
        {
            builder.OpenComponent<MudTreeViewItem<TenantDto>>(0);
            builder.AddAttribute(1, "Text", child.Name);
            if (child.Id.Count(c => c == '.') < 3)
            {
                builder.AddAttribute(2, "Expanded", true);
            }
            else{
                builder.AddAttribute(2, "Expanded", false);
            }
            builder.AddAttribute(3, "Value", child);
            if(HasChildren(child))
            {
                builder.AddAttribute(4, "ChildContent", (RenderFragment)((childBuilder) =>
                {
                    RenderChildNodes(child.Id)(childBuilder);
                }));
            }
                       
            builder.CloseComponent();
        }
    };

    private bool HasChildren(TenantDto node)
    {
        return Data.Any(n => n.Id.StartsWith(node.Id) && n.Id.Count(c => c == '.') == node.Id.Count(c => c == '.') + 1);
    }

    private async Task OnAddDomain(TenantDto dto)
    {
        var parameters = new DialogParameters<AddDomainDialog>
        {
            { x => x.Model, new AddDomainCommand.Command() { TenantId = dto.Id } }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<AddDomainDialog>
            (L["Add a domain to tenant allowlist"], parameters, options);

        var state = await dialog.Result;

        if (!state!.Canceled)
        {
            TenantService.Refresh();
            await LoadData();
        }
    }



    private async Task OnDeleteDomain(string domain, string tenantId)
    {
        var deleteContent = ConstantString.DeleteConfirmation;

        var parameters = new DialogParameters<DeleteConfirmation>
        {
            { x => x.Command, new DeleteDomainCommand.Command() { Domain = domain, TenantId = tenantId } },
            { x => x.ContentText, string.Format(deleteContent, domain) }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<DeleteConfirmation>(L["Delete the Domain"], parameters, options);

        var state = await dialog.Result;

        if (!state!.Canceled)
        {
            TenantService.Refresh();
            await LoadData();
        }
    }

    private async Task OnRename(TenantDto dto)
    {
        var command = Mapper.Map<RenameTenant.Command>(dto);
        var parameters = new DialogParameters<RenameTenantDialog>
        {
            { x => x.Model, command }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<RenameTenantDialog>
            (L["Rename the Tenant"], parameters, options);
        var state = await dialog.Result;
        if (!state!.Canceled)
        {
            await LoadData();
        }
    }


}