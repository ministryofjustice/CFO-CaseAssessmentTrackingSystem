@using Cfo.Cats.Application.Features.Locations.DTOs
@using Cfo.Cats.Application.Features.Locations.Queries.GetAll
@using Cfo.Cats.Domain.Common.Enums
@using Humanizer

@inherits CatsComponentBase

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" />
}
else
{
    <MudCard Elevation="0" Class="d-flex flex-grow-0">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">
                    <strong>Accessible Locations</strong>
                </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>

            <MudExpansionPanels>
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex">
                            <MudText Class="mt-1">Custody Locations</MudText>
                            <MudBadge Content="@(_locations.Count(c => c.LocationType.IsCustody))" Color="Color.Default" Overlap="true" Class="d-flex ml-auto">
                                <MudIcon Icon="@Icons.Material.Filled.Castle" Color="Color.Primary" />
                            </MudBadge>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudList T="string">
                            <MudGrid>
                                @foreach (var l in _locations.Where(c => c.LocationType.IsCustody).OrderBy(l => l.Name))
                                {
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudListItem Icon="@GetIcon(l.GenderProvision)" IconColor="Color.Primary" Text="@l.Name" SecondaryText="@l.LocationType.Name"></MudListItem>
                                    </MudItem>
                                }    
                            </MudGrid>
                        </MudList>
                    </ChildContent>
                </MudExpansionPanel>
                <MudExpansionPanel>
                    <TitleContent>
                        <div class="d-flex">
                            <MudText Class="mt-1">Community Locations</MudText>
                            <MudBadge Content="@(_locations.Count(c => c.LocationType.IsCustody == false))" Color="Color.Default" Overlap="true" Class="d-flex ml-auto">
                                <MudIcon Icon="@Icons.Material.Filled.Castle" Color="Color.Primary" />
                            </MudBadge>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudList T="string">
                            <MudGrid>
                                @foreach (var l in _locations.Where(c => c.LocationType.IsCustody == false).OrderBy(l => l.Name))
                                {
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudListItem Icon="@GetLocationIcon(l)" IconColor="Color.Primary" Text="@l.Name" SecondaryText="@l.LocationType.Name"></MudListItem>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudList>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
            
        </MudCardContent>
    </MudCard>
}



@code {

    private LocationDto[] _locations = [];

    private TableGroupDefinition<LocationDto> _groupDefinition = new()
        {
            GroupName = "Location Type",
            Indentation = false,
            Expandable = true,
            Selector = (l) => l.LocationType.Name.Humanize(),
            IsInitiallyExpanded = false
        };

    private bool _loading;

    [Parameter, EditorRequired]
    public string TenantId { get; set; } = default!;

    [CascadingParameter] private UserProfile? UserProfile { get; set; }

    private string _currentTenantId = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (TenantId != _currentTenantId)
            {
                _loading = true;
                _currentTenantId = TenantId;
                await LoadData();
            }
        }
        finally
        {
            _loading = false;
        }

    }

    private async Task LoadData()
    {

        var mediator = GetNewMediator();

        var request = new GetAllLocationsQuery()
            {
                UserProfile = UserProfile,
                TenantId = this.TenantId
            };

        var result = await mediator.Send(request);
        if (result.Succeeded)
        {
            _locations = result.Data!;
        }
        else
        {
            _locations = [];
        }
    }

    private string GetIcon(GenderProvision genderProvision)
    {
        if (genderProvision == GenderProvision.Male)
        {
            return Icons.Material.Filled.Male;
        }
        if(genderProvision == GenderProvision.Female)
        {
            return Icons.Material.Filled.Female;
        }
        return Icons.Material.Filled.Person;
    }

    private string GetLocationIcon(LocationDto location)
    {
        if (location.LocationType == LocationType.Female)
        {
            return Icons.Material.Filled.LocationCity;
        }

        if (location.LocationType == LocationType.Wing)
        {
            return Icons.Material.Filled.Warehouse;
        }

        if (location.LocationType == LocationType.Outlying)
        {
            return Icons.Material.Filled.Domain;
        }

        if (location.LocationType == LocationType.Feeder)
        {
            return Icons.Material.Filled.Business;
        }

        if (location.LocationType == LocationType.Community)
        {
            return Icons.Material.Filled.People;
        }

        if (location.LocationType == LocationType.Hub)
        {
            return Icons.Material.Filled.HomeWork;
        }

        if (location.LocationType == LocationType.Satellite)
        {
            return Icons.Material.Filled.SatelliteAlt;
        }

        return Icons.Material.Filled.Castle;

    }
}