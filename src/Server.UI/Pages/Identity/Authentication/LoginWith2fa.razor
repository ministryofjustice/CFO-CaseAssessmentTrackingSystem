@page "/pages/authentication/loginwith2fa"

@using System.ComponentModel.DataAnnotations
@using Cfo.Cats.Application.Features.Identity.Notifications.IdentityEvents
@using Cfo.Cats.Application.Features.Identity.Notifications.SendTwoFactorCode
@using Cfo.Cats.Domain.Identity
@using Cfo.Cats.Infrastructure.Services
@using Microsoft.AspNetCore.Identity

@inject IStringLocalizer<LoginWith2fa> L
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger
@inject IMediator Sender
@inject INetworkIpProvider NetworkIpProvider

<PageTitle>@L["Two-factor authentication"]</PageTitle>
<MudText Typo="Typo.h4" GutterBottom="true">@L["Two-factor authentication"]</MudText>

<MudText Typo="Typo.body1">@L["Your login is secured with two-factor authentication via email. Please enter the code sent to your email address below."]</MudText>

<div class="d-flex flex-column gap-y-3">
    <div class="d-flex flex-column">
        <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <StatusMessage Message="@message"  Error="true"/>
            <div class="mud-input-control mud-input-input-control my-4">
                <div class="mud-input-control-input-container">
                    <!--!--><!--!-->
                    <div class="mud-input mud-input-outlined mud-shrink">
                        <InputText @bind-Value="Input.TwoFactorCode" class="mud-input-slot mud-input-root mud-input-root-outlined" type="text" autocomplete="off" aria-required="true"  />
                        <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                        <!--!-->
                        <div class="mud-input-outlined-border"></div>
                    </div>
                    <!--!-->
                    <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="twoFactorCode">@L["Authenticator code"]</label>
                </div>
            </div>
            
            @if (Input.UseSms == false)
            {
                  <div Class="d-flex justify-space-between align-center mb-1">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.UseSms" class="form-check-input"/>
                        @L["Send SMS Instead"]
                    </label>
                </div>
            }
            <div>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           ButtonType="ButtonType.Submit"
                           FullWidth="false">
                    <MudText>@L["Sign In"]</MudText>
                </MudButton>
            </div>
        </EditForm>
    </div>
</div>

@code {
    public const string PageUrl = "/pages/authentication/loginwith2fa";
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
               throw new InvalidOperationException(L["Unable to load two-factor authentication user."]);
    }



    private async Task OnValidSubmitAsync()
    {
        if (Input.UseSms)
        {
            var token = await UserManager.GenerateTwoFactorTokenAsync(user!, "Email");
            await Sender.Publish(new SendTwoFactorTextCodeNotification(user!.PhoneNumber!, user.UserName!, token));
            Input.UseSms = false;
            message = L["Info: A new code has been sent to your registered phone number"];
        }
        else
        {
            var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
            var isCodeValid = await UserManager.VerifyTwoFactorTokenAsync(user, "Email", authenticatorCode);
            if (isCodeValid == false)
            {
                await UserManager.AccessFailedAsync(user);
                await Sender.Publish(IdentityAuditNotification.LoginFailedTwoFactor(user.UserName!, NetworkIpProvider.IpAddress));
                if (await UserManager.IsLockedOutAsync(user))
                {
                    await Sender.Publish(IdentityAuditNotification.UserLockedOut(user.UserName!, NetworkIpProvider.IpAddress));
                    Logger.LogWarning("User with ID '{UserId}' account locked out.", user.Id);
                    RedirectManager.RedirectTo(Lockout.PageUrl);
                }
                else
                {
                    message = L["Error: Invalid authenticator code."];
                }                
                return;
            }
            var result = await SignInManager.TwoFactorSignInAsync("Email", authenticatorCode, false, false);
            var userId = await UserManager.GetUserIdAsync(user);
            if (result.Succeeded)
            {
                await Sender.Publish(IdentityAuditNotification.LoginSucceededTwoFactorRequired(user.UserName!, NetworkIpProvider.IpAddress));
                RedirectManager.RedirectTo("/");
            }
            else if (result.IsLockedOut)
            {
                await Sender.Publish(IdentityAuditNotification.UserLockedOut(user.UserName!, NetworkIpProvider.IpAddress));
                RedirectManager.RedirectTo(Lockout.PageUrl);
            }
            else
            {
                await Sender.Publish(IdentityAuditNotification.LoginFailedTwoFactor(user.UserName!, NetworkIpProvider.IpAddress));
                message = L["Error: Invalid authenticator code."];
            }
        }

    }

    private sealed class InputModel : IValidatableObject
    {
        [Required]
        [Display(Name = "Use SMS Instead")]
        public bool UseSms { get; set; }

        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (UseSms == false)
            {
                if (string.IsNullOrEmpty(TwoFactorCode))
                {
                    yield return new ValidationResult("Two factor code is required", [nameof(TwoFactorCode)]);
                }
                else if (TwoFactorCode.Length is > 7 or < 6)
                {
                    yield return new ValidationResult("Invalid authenticator code", [nameof(TwoFactorCode)]);
                }
            }

            if (UseSms)
            {
                if (string.IsNullOrEmpty(TwoFactorCode) == false)
                {
                    yield return new ValidationResult("Authenticator code should not be provided when asking for a text message", [nameof(UseSms)]);
                }
            }

        }
    }

}
    using Cfo.Cats.Application.Features.Identity.Notifications.IdentityEvents;
