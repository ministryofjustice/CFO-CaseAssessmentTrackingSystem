@page "/pages/authentication/login"


@using Cfo.Cats.Application.Features.Identity.Notifications.IdentityEvents
@using Microsoft.AspNetCore.Authentication
@using Cfo.Cats.Domain.Identity
@using Cfo.Cats.Application.Common.Interfaces.Identity
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using Cfo.Cats.Application.Features.Identity.Notifications.SendTwoFactorCode
@using static Cfo.Cats.Infrastructure.Services.Identity.CustomSigninManager

@inject ILogger<Login> Logger
@inject UserManager<ApplicationUser> UserManager
@inject IIdentityService IdentityService
@inject IStringLocalizer<Login> L
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject IMediator Sender

<PageTitle>@title</PageTitle>

<MudPaper Elevation="3" Class="pa-4">
    <MudGrid Spacing="6" Justify="Justify.Center" Class="pa-4">
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary">WARNING</MudText>
            <MudText Typo="Typo.body1" Class="mt-2">
                This system is owned by the Ministry of Justice and is protected by appropriate security protocols. Do not proceed if you are not an authorised user of this system and you should not access this system outside of England or Wales.
            </MudText>
            <MudText Typo="Typo.body1" Class="mt-2">
                Any attempt to use it in a manner not authorised by the HMPPS CFO Lead Manager (ICT) or any attempt to alter, destroy or damage any information or personal information contained within this system may constitute a breach of the provisions of the Computer Misuse Act 1990 and/or other legislation and shall leave the user liable to both criminal and civil proceedings.
            </MudText>
            <MudText Typo="Typo.body1" Class="mt-2">
                It is strictly forbidden to attempt to access any IT asset on this network using any third party's logon identity.
            </MudText>
            <MudText Typo="Typo.body1" Class="mt-2">
                All authorised users must comply with defined policies and procedures including the CATS User Security Operating Procedures (SyOPs).                             
            </MudText>
            <MudText Typo="Typo.body1" Class="mt-2">
                Anyone using this computer facility consents to active monitoring by the system managers and this information may be requested and used by the nominated ATA contact for your contracted delivery, for purposes they deem appropriate.                       
            </MudText>
            <MudText Typo="Typo.body1" Class="mt-2">
                By continuing to use the website, you are hereby notified that strictly necessary cookies to manage authentication and to ensure content is personalised appropriately are stored on your computer.                      
            </MudText>

        </MudItem>
        <MudItem xs="12" md="6" Class="pa-4">
            <div class="d-flex justify-center">
                <MudImage Src="/img/cfo-burgundy-logo.svg" alt="logo" style="max-width: 128px;"/>
            </div>
            <div class="d-flex justify-center">
                <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Center">Welcome to CATS</MudText>
            </div>
            <EditForm Model="Input" method="post" OnValidSubmit="OnSubmit" FormName="login">
                <DataAnnotationsValidator />
                <MudText Typo="Typo.h4" GutterBottom="true">@L["Sign In"]</MudText>
                <StatusMessage Message="@errorMessage" Error="true" />
                <div class="mud-input-control mud-input-input-control my-4">
                    <div class="mud-input-control-input-container">
                        <!--!--><!--!-->
                        <div class="mud-input mud-input-outlined mud-shrink">
                            <InputText @bind-Value="Input.UserName" class="mud-input-slot mud-input-root mud-input-root-outlined" type="text" autocomplete="username" aria-required="true" placeholder="user name" />
                            <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                            <!--!-->
                            <div class="mud-input-outlined-border"></div>
                        </div>
                        <!--!-->
                        <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="userName">@L["User name"]</label>
                    </div>
                    <div class="mud-input-helper-text mud-input-error">
                        <div class="d-flex">
                            <ValidationMessage For="() => Input.UserName" class="mud-input-error" />
                        </div>
                    </div>
                </div>
                <div class="mud-input-control mud-input-input-control my-4">
                    <div class="mud-input-control-input-container">
                        <!--!--><!--!-->
                        <div class="mud-input mud-input-outlined mud-shrink">
                            <InputText type="password" @bind-Value="Input.Password" class="mud-input-slot mud-input-root mud-input-root-outlined" autocomplete="off" aria-required="true" placeholder="password" />
                            <div class="mud-input-slot mud-input-root mud-input-root-outlined" style="display:none"></div>
                            <!--!-->
                            <div class="mud-input-outlined-border"></div>
                        </div>
                        <!--!-->
                        <label class="mud-input-label mud-input-label-animated mud-input-label-outlined mud-input-label-inputcontrol" for="password">@L["Password"]</label>
                    </div>
                    <div class="mud-input-helper-text mud-input-error">
                        <div class="d-flex">
                            <ValidationMessage For="() => Input.Password" class="mud-input-error" />
                        </div>
                    </div>
                </div>
                <div Class="d-flex justify-space-between align-center mb-1">
                    <MudLink Href="@Forgot.PageUrl">@L["Forgot password?"]</MudLink>
                </div>
            
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="Size.Large"
                           ButtonType="ButtonType.Submit"
                           FullWidth="true">
                    <MudText>@L["Sign In"]</MudText>
                </MudButton>
            </EditForm>

        </MudItem>
    </MudGrid>
</MudPaper>



@code {
    public const string PageUrl = "/pages/authentication/login";
    private string? errorMessage;
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    private string title = "Sign In";
    private AuthenticationScheme[] externalLogins = [];
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new()
        {
            UserName = "",
            Password = ""
        };

    protected override async Task OnInitializedAsync()
    {
        title = L["Sign In"];
        if (HttpContext is not null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task OnSubmit()
    {
        var user = await UserManager.FindByNameAsync(Input.UserName);

        

        if(user is null)
        {
            await Sender.Publish( IdentityAuditNotification.UnknownUserNameNotification(Input.UserName));
            errorMessage = L["Error: Invalid login attempt."];
            return;
        }

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, false, lockoutOnFailure: true);

        if (result.Succeeded)
        {
            await Sender.Publish(IdentityAuditNotification.LoginSucceededNoTwoFactorRequired(Input.UserName));
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if(result is CustomSignInResult customSignInResult && customSignInResult.RequiresPasswordReset)
        {
            string token = await UserManager.GeneratePasswordResetTokenAsync(user);
            var encodedToken = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(token));
            RedirectManager.RedirectTo(ResetPassword.PageUrl, new() { ["token"] = encodedToken, ["userid"] = user.Id });
        }
        else if (result.RequiresTwoFactor)
        {
            user = await SignInManager.GetTwoFactorAuthenticationUserAsync();
            var token = await UserManager.GenerateTwoFactorTokenAsync(user!, "Email");
            await Sender.Publish(new SendTwoFactorEmailCodeNotification(user!.Email!, user.UserName!, token));

            RedirectManager.RedirectTo(LoginWith2fa.PageUrl);
        }
        else if (result.IsLockedOut)
        {
            await Sender.Publish(IdentityAuditNotification.UserLockedOut(Input.UserName));   
            Logger.LogWarning($"{Input.UserName} account locked out.");
            RedirectManager.RedirectTo(Lockout.PageUrl);
        }
        else
        {
            await Sender.Publish( IdentityAuditNotification.LoginFailedPassword(Input.UserName) );
            errorMessage = L["Error: Invalid login attempt."];
        }
    }

    public sealed class InputModel
    {
        [Required(ErrorMessage = "User name is required")]
        [StringLength(100, ErrorMessage = "Name length can't be more than 100.")]
        public string UserName { get; set; } = "";
        [Required(ErrorMessage = "Password is required")]
        [StringLength(30, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        public string Password { get; set; } = "";
    }
}    using Cfo.Cats.Application.Features.Identity.Notifications.LoginFailed;
    using Cfo.Cats.Application.Features.Identity.Notifications.IdentityEvents;
