@using Cfo.Cats.Application.Features.Identity.DTOs
@using Cfo.Cats.Application.Features.Identity.Queries.PaginationQuery
@using Cfo.Cats.Application.Features.Identity.Specifications
@using Humanizer
@inherits CatsComponentBase

<MudDataGrid ServerData="@(ServerReload)"
    T="IdentityAuditTrailDto"
    FixedHeader="true"
    FixedFooter="true"
    Virtualize="true"
    @bind-RowsPerPage="defaultPageSize"
    Height="calc(100vh - 300px)"
    Loading="@loading"
    Hover="true"
    @ref="_table"
    BreakPoint="Breakpoint.Sm">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.Login" Size="Size.Large"/>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption" Class="mb-2">User Audit</MudText>
                    <MudEnumSelect Style="min-width:120px" TEnum="IdentityAuditTrailListView" ValueChanged="OnChangedListView" Value="Query.ListView" Dense="true" Label="List View">
                    </MudEnumSelect>
                </div>
            </div>
            <div class="flex-grow-1"/>

            <div class="d-flex flex-column justify-end">
                <div class="d-flex">
                    <MudButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(() => OnRefresh())"
                               StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                               Style="margin-right: 4px; margin-bottom:4px">
                        @ConstantString.Refresh
                    </MudButton>
                </div>

                <MudStack Row="true" AlignItems="AlignItems.Stretch">
                    <MudEnumSelect TEnum="IdentityActionType?" Placeholder="Search for audit type" Value="@Query.IdentityActionType" Clearable="true" ValueChanged="@(s => OnSearch(s))" Style="min-width:120px" FullWidth="true"> </MudEnumSelect>
                </MudStack>


            </div>
        </div>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.DateTime" Title="@_currentDto.GetMemberDescription(x => x.DateTime)" />
        <PropertyColumn Property="x => x.ActionType" Title="@_currentDto.GetMemberDescription(x => x.ActionType)">
            <CellTemplate>
                @context.Item.ActionType.Humanize()
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.PerformedBy" Title="@_currentDto.GetMemberDescription(x => x.PerformedBy)" />
        <PropertyColumn Property="x => x.IpAddress" Title="@_currentDto.GetMemberDescription(x => x.IpAddress)" />
    </Columns>
    <NoRecordsContent>
        <MudText>@ConstantString.NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ConstantString.Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new[] { 10, 15, 30, 50, 100, 500, 1000 })"/>
    </PagerContent>
</MudDataGrid>


@code 
{

    [Parameter, EditorRequired]
    public string UserName { get;set; } = default!;

    private IdentityAuditTrailsWithPagination.Query Query { get; } = new();

    private MudDataGrid<IdentityAuditTrailDto> _table = null!;

    private readonly IdentityAuditTrailDto _currentDto = new();

    private bool loading;
    private int defaultPageSize = 15;

    private async Task<GridData<IdentityAuditTrailDto>> ServerReload(GridState<IdentityAuditTrailDto> state)
    {
        try
        {
            loading = true;
            Query.UserName = UserName;
            Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;

            var result = await GetNewMediator().Send(Query).ConfigureAwait(false);
            return new GridData<IdentityAuditTrailDto> { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            loading = false;
        }
    }
    
    private async Task OnChangedListView(IdentityAuditTrailListView listview)
    {
        Query.ListView = listview;
        await _table.ReloadServerData();
    }

    private async Task OnRefresh()
    {
        await _table.ReloadServerData();
    }

    private async Task OnSearch(IdentityActionType? identityActionType)
    {
        Query.IdentityActionType = identityActionType;
        await _table.ReloadServerData();
    }
}