@using Cfo.Cats.Application.Common.Interfaces.Identity
@using Cfo.Cats.Domain.Identity
@using Cfo.Cats.Infrastructure.Services.Identity

@inherits MudComponentBase

@inject IStringLocalizer<ResetPassword> L
@inject IValidationService Validator
@inject IPasswordService PasswordService
@inject UserManager<ApplicationUser> UserManager;

<MudDialog>
    <DialogContent>
        <MudForm Disabled="!passwordReset" Model="@Model" @ref="@form">
            <MudGrid>
                <MudItem xs="12">
                    <MudPasswordField Immediate="true"
                                      Label="@L["Generate a Temporary Password"]"
                                      @bind-Value="Model.Password"
                                      For="@(() => Model.Password)"
                                      Variant="Variant.Text"
                                      PasswordMode="true"
                                      Required="true"
                                      ReadOnly="true"
                                      Class="mt-4"/>
                </MudItem>
                <MudItem xs="12">
                    <MudStack Spacing="2">
                        <MudButton OnClick="() => expanded = !expanded">@(expanded ? "Hide" : "Show") Pronunciation</MudButton>
                        <MudDivider />
                        <MudCollapse Expanded="expanded">
                            <MudSimpleTable>
                                <thead>
                                    <tr>
                                        <th>Character</th>
                                        <th>Pronunciation</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var word in pronunciation)
                                    {
                                        <tr>
                                            <td style="font-weight: bold">
                                                @{
                                                    if(!char.IsLetter(word.Key))
                                                    {
                                                        @word.Key
                                                    }
                                                    else
                                                    {
                                                        @($"{word.Key} " + (char.IsUpper(word.Key) ? "(uppercase)" : "(lowercase)"))
                                                    }
                                                }
                                            </td>
                                            <td>@word.Value</td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        </MudCollapse>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Generate" Variant="Variant.Filled" Disabled="passwordReset">RESET</MudButton>
        <MudSpacer />
        <MudButton OnClick="Cancel" Disabled="passwordReset">@ConstantString.Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Close" Disabled="!passwordReset">@ConstantString.Continue</MudButton>
    </DialogActions>
</MudDialog>

@code{
    private List<KeyValuePair<char, string>> pronunciation = [];

    bool expanded = false;

    bool passwordReset = false;

    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = default!;

    [EditorRequired] [Parameter] public ResetPasswordFormModel Model { get; set; } = default!;

    private MudForm? form;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void Close() => MudDialog.Close(DialogResult.Ok(true));

    private async Task ResetPassword()
    {
        if (string.IsNullOrEmpty(Model.Password))
        {
            return;
        }

        var user = await UserManager.FindByIdAsync(Model.UserId!) ?? throw new NotFoundException($"Application user not found {Model.UserId}.");
        var token = await UserManager.GeneratePasswordResetTokenAsync(user);
        var identityResult = await UserManager.ResetPasswordAsync(user, token, Model.Password!);

        if (identityResult.Succeeded)
        {
            if (user.EmailConfirmed is false)
            {
                user.EmailConfirmed = true;
            }

            user.RequiresPasswordReset = true;
            await UserManager.UpdateAsync(user);

            passwordReset = true;
        }
        else
        {
            Snackbar.Add($"{string.Join(",", identityResult.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
        }

    }

    private async Task Generate()
    {
        Model.Password = PasswordService.GeneratePassword();
        pronunciation = PasswordService.GetPronunciation(Model.Password);

        await ResetPassword();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}