@using Cfo.Cats.Application.Features.Tenants.DTOs
@using FluentValidation.Internal
@using ResizeMode = SixLabors.ImageSharp.Processing.ResizeMode
@using Size = SixLabors.ImageSharp.Size
@using Image = SixLabors.ImageSharp.Image
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png
@using Cfo.Cats.Application.Features.Identity.DTOs
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Domain.Identity
@using Cfo.Cats.Application.Common.Interfaces.MultiTenant
@using FluentValidation;

@inherits MudComponentBase

@inject IValidationService Validator
@inject IUploadService UploadService
@inject ITenantService TenantsService
@inject RoleManager<ApplicationRole> RoleManager
@inject UserManager<ApplicationUser> UserManager
@inject IStringLocalizer<Users> L

<MudForm Model="@Model" @ref="@form" Validation="@(Validator.ValidateValue(Model))">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudSelect T="string" ShrinkLabel Label="@L["Select Provider"]" For="@(() => Model.ProviderId)" Value="Model.ProviderId" ValueChanged="OnProviderValueChanged" Required="true">
                @{
                    if (CurrentUser is not null)
                    {
                        var tenants = GetDescendants(CurrentUser.TenantId!);

                        for (int i = 0; i < tenants.Count(); i++)
                        {
                            var tenant = tenants.ElementAt(i);

                            <MudSelectItem Class="@($"pl-{(tenant.Id.Length + 2)}")" Value="@tenant.Id" Disabled="!IsValidTenant(tenant.Id)">
                                @tenant.Name
                            </MudSelectItem>
                        }
                    }
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudSelect T="string" ShrinkLabel Label="@L["Select Tenant"]" For="@(() => Model.TenantId)" Value="Model.TenantId" ValueChanged="OnTenantValueChange" Text="@Model.TenantName" Required="true" Disabled="string.IsNullOrEmpty(Model.ProviderId)">
                @{
                    if(string.IsNullOrEmpty(Model.ProviderId) is false)
                    {
                        var tenants = Tenants.Where(x => x.Id.StartsWith(Model.ProviderId));

                        for(int i = 0; i < tenants.Count(); i++)
                        {
                            var tenant = tenants.ElementAt(i);

                            <MudSelectItem Class="@($"pl-{(tenant.Id.Length + 2)}")" Value="@tenant.Id" Disabled="!IsValidTenant(tenant.Id)">
                                @tenant.Name
                            </MudSelectItem>
                        }
                    }
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" sm="12" Class="mt-6">
            <MudText Typo="Typo.caption">@L["Personal Information"]</MudText>
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudTextField For="@(() => Model.DisplayName)" @bind-Value="Model.DisplayName" Label="@L["Full Name"]" InputType="InputType.Email" Variant="Variant.Text" Required="true"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField For="@(() => Model.Email)" @bind-Value="Model.Email" Label="@L["E-mail"]" InputType="InputType.Email" Variant="Variant.Text" Required="true"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField For="@(() => Model.PhoneNumber)" @bind-Value="Model.PhoneNumber" Label="@L["Phone Number"]" InputType="InputType.Telephone" Variant="Variant.Text"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudItem>

        <MudItem xs="12" sm="12" Class="mt-6">
            <MudText Typo="Typo.caption">@L["Account Recovery"]</MudText>
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudPasswordField For="@(() => Model.MemorablePlace)" @bind-Value="Model.MemorablePlace" Label="@L["Memorable Place"]" Variant="Variant.Text" PasswordMode="true" Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudPasswordField For="@(() => Model.MemorableDate)" @bind-Value="Model.MemorableDate" Label="@L["Memorable Date"]" Variant="Variant.Text" PasswordMode="true"  Required="true" />
                </MudItem>
            </MudGrid>
        </MudItem>

        <MudItem xs="12" sm="12" Class="mt-6">
            <MudText Typo="Typo.caption">@L["Assign Roles"]</MudText>
            <MudGrid Class="mt-1">
                @for (var i = 0; i < Roles.Count; i++)
                {
                    var x = i;
                    <MudItem xs="6" sm="6" Class="py-0 my=0">
                        <MudCheckBox T="bool" Value="@Roles[x].Value" Label="@Roles[x].Key" ValueChanged="@(s => Roles[x].Value = s)"></MudCheckBox>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>

        <MudItem xs="12" sm="12" Class="mt-6">
            <MudText Typo="Typo.caption">@L["Additional Information"]</MudText>
            <MudGrid Class="mt-1">
                <MudItem xs="12" sm="12" Class="py-0 my=0">
                    <MudTextField @bind-Value="CallReference" Label="@L["Call Reference No."]" Variant="Variant.Text" Required></MudTextField>
                    <MudTextField @bind-Value="Message" Label="@L["Notes"]" Lines="4" AutoGrow Variant="Variant.Text" Required></MudTextField>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    private IEnumerable<string> allowedDomains = [];

    public IEnumerable<TenantDto> Tenants { get; set; } = [];

    public class CheckItem
    {
        public string Key { get; set; } = string.Empty;
        public bool Value { get; set; }
    }

    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;

    [EditorRequired] [Parameter] public ApplicationUserDto Model { get; set; } = default!;

    [EditorRequired] [Parameter] public EventCallback<ApplicationUserDto> OnFormSubmit { get; set; }

    public string? CallReference { get; set; }
    public string Message { get; set; } = string.Empty;

    public ApplicationUser CurrentUser { get; private set; } = default!;

    private MudForm? form = default!;
    private List<CheckItem> Roles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState;

        CurrentUser = (await UserManager.GetUserAsync(state.User))!;

        Tenants = TenantsService
            .GetVisibleTenants(CurrentUser.TenantId ?? string.Empty)
            .OrderBy(x => x.Id);

        var array = await RoleManager.Roles.Select(x => x.Name).ToListAsync();

        foreach (var role in array)
        {
            if (Model.AssignedRoles != null && Model.AssignedRoles.Contains(role))
            {
                Roles.Add(new CheckItem { Key = role!, Value = true });
            }
            else
            {
                Roles.Add(new CheckItem { Key = role!, Value = false });
            }
        }
    }

    private void OnProviderValueChanged(string value)
    {
        Model.ProviderId = value;
        Model.TenantId = null;
        Model.TenantName = null;
    }

    private void OnTenantValueChange(string value)
    {
        Model.TenantId = value;
        Model.TenantName = Tenants.First(t => t.Id == Model.TenantId).Name;
    }

    private IEnumerable<string> AllowedDomains(string tenantId) =>
        Tenants.Where(x => x.Id == tenantId)
        .SelectMany(x => x.Domains);

    private bool IsValidTenant(string tenantId) => AllowedDomains(tenantId).Any();

    public async Task Submit()
    {
        if (form is not null)
        {
            await form.Validate();
            if (form.IsValid)
            {
                Model.AssignedRoles = Roles.Where(x => x.Value).Select(x => x.Key).ToArray();
                Model.Notes.Add(new ApplicationUserNoteDto 
                { 
                    Message = Message, 
                    CallReference = CallReference,
                    ApplicationUserId = Model.Id
                });

                await OnFormSubmit.InvokeAsync(Model);
            }
        }
    }

    private IEnumerable<TenantDto> GetDescendants(string tenantId)
    {
        int len = tenantId.Length / 2;

        var maxDepth = len > 1 ? 1 : 2;

        var depth = tenantId.Length + (maxDepth * 2);

        return Tenants.Where(x => x.Id.StartsWith(tenantId) && x.Id.Length <= depth);
    }

}