@page "/user/profile"
@using Cfo.Cats.Application.Features.Identity.Notifications.IdentityEvents
@using Cfo.Cats.Server.UI.Services.JsInterop
@using Cfo.Cats.Application.Common.Interfaces.Identity
@using Cfo.Cats.Domain.Identity
@using Cfo.Cats.Domain.Common.Enums
@inherits CatsComponentBase

@inject IValidationService Validator
@inject IStringLocalizer<Profile> L
@inject IJSRuntime Js
@inject IUploadService UploadService
@inject IIdentityService IdentityService


<PageTitle>@Title</PageTitle>

<ErrorBoundary>
    <ChildContent>
        @if (Model is null)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
        }
        else
        {
            <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true" Elevation="6" ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
                <MudTabPanel Text="@L["Profile"]">
                    <MudForm Model="@Model" @ref="@form" Validation="@(Validator.ValidateValue(Model))" Style="display: flex; align-content: center;  align-items: center; flex-direction: column;">
                        <MudGrid Justify="Justify.Center" Style="max-width:600px;display:flex;">
                            <MudItem sm="12" xs="12">
                                <div class="d-flex justify-center">

                                    @if (string.IsNullOrEmpty(Model.ProfilePictureDataUrl))
                                    {
                                        <MudElement Class="d-flex flex-column  align-center">
                                            <MudAvatar Style="height:128px; width:128px; font-size:2rem;">@Model.UserName.ToUpper().First()</MudAvatar>
                                            <div class="d-flex">
                                                @if (Model.AssignedRoles is not null)
                                                {
                                                    @foreach (var role in Model.AssignedRoles)
                                                    {
                                                        <MudChip T="string" Size="MudBlazor.Size.Small">@role</MudChip>
                                                    }
                                                }
                                            </div>

                                        </MudElement>
                                    }
                                    else
                                    {
                                        <MudElement Class="d-flex flex-column  align-center">
                                            <MudAvatar Style="height:128px; width:128px; font-size:2rem;">
                                                <MudImage Src="@Model.ProfilePictureDataUrl"></MudImage>
                                            </MudAvatar>
                                            <div class="d-flex">
                                                @if (Model.AssignedRoles is not null)
                                                {
                                                    @foreach (var role in Model.AssignedRoles)
                                                    {
                                                        <MudChip T="string" Size="MudBlazor.Size.Small">@role</MudChip>
                                                    }
                                                }
                                            </div>
                                        </MudElement>
                                    }
                                </div>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.TenantName)" @bind-Value="Model.TenantName" Label="@L["Tenant Name"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField For="@(() => Model.SuperiorName)" @bind-Value="Model.SuperiorName" Label="@L["Superior Name"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.UserName)" @bind-Value="Model.UserName" Label="@L["User Name"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.Email)" @bind-Value="Model.Email" Label="@L["Email"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.DisplayName)" @bind-Value="Model.DisplayName" Label="@L["Display Name"]" Variant="Variant.Text"></MudTextField>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.PhoneNumber)" @bind-Value="Model.PhoneNumber" Label="@L["Phone Number"]" Variant="Variant.Text"></MudTextField>
                            </MudItem>
                            <MudItem sm="12" xs="12" Class="d-flex justify-end">
                                <MudButton ButtonType="ButtonType.Button" Disabled="@submitting" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">
                                    @if (submitting)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true"/>
                                        <MudText Class="ms-2">@ConstantString.Waiting </MudText>
                                    }
                                    else
                                    {
                                        <MudText>@ConstantString.Save</MudText>
                                    }
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudTabPanel>
                <MudTabPanel Text="@L["Change Password"]">
                    <MudForm Model="@changePassword" @ref="@passwordForm" Validation="@(Validator.ValidateValue(changePassword))" Style="display: flex; align-content: center;  align-items: center; flex-direction: column;">
                        <MudGrid Justify="Justify.Center" Style="max-width:300px">
                            <AntiforgeryToken />
                            <MudItem sm="12" xs="12">
                                <MudPasswordField Immediate="true"
                                                  Label="@L["Current Password"]"
                                                  For="@(() => changePassword.CurrentPassword)"
                                                  @bind-Value="changePassword.CurrentPassword"
                                                  Variant="Variant.Text"
                                                  PasswordMode="true"
                                                  Required="true"/>
                            </MudItem>
                            <MudItem xs="12">
                                <MudPasswordField Immediate="true"
                                                  Label="@L["New Password"]"
                                                  For="@(() => changePassword.NewPassword)"
                                                  @bind-Value="changePassword.NewPassword"
                                                  Variant="Variant.Text"
                                                  PasswordMode="true"
                                                  Required="true"/>
                            </MudItem>
                            <MudItem xs="12">
                                <MudPasswordField Immediate="true"
                                                  Label="@L["Confirm New Password"]"
                                                  For="@(() => changePassword.ConfirmPassword)"
                                                  @bind-Value="changePassword.ConfirmPassword"
                                                  Variant="Variant.Text"
                                                  PasswordMode="true"
                                                  Required="true"/>
                            </MudItem>
                            <input type="hidden" id="ReturnUrl" name="ReturnUrl" /> 
                            <MudItem sm="12" xs="12" Class="d-flex justify-end">
                                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await ChangePassword())">
                                    @if (submitting)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true"/>
                                        <MudText Class="ms-2">@ConstantString.Waiting </MudText>
                                    }
                                    else
                                    {
                                        <MudText>@L["Change Password"]</MudText>
                                    }
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudTabPanel>
            </MudTabs>
        }
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>
@code{
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;

    private UserManager<ApplicationUser> userManager = default!;
    private SignInManager<ApplicationUser> signinManager = default!;

    public string Title { get; set; } = "Profile";

    private MudForm? form;
    private MudForm? passwordForm;
    private bool submitting;

    private ChangePasswordModel changePassword { get; } = new();

    private UserProfile? Model { get; set; }


    protected override async Task OnInitializedAsync()
    {
        userManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();
        signinManager = ScopedServices.GetRequiredService<SignInManager<ApplicationUser>>();
        var state = await AuthState;

        var user = state.User!;
        Model = user.GetUserProfileFromClaim();

        await base.OnInitializedAsync();
    }

    private async Task Submit()
    {
        submitting = true;
        try
        {
            await form!.Validate();
            if (form.IsValid)
            {
                var state = await AuthState;
                var user = await userManager.Users.FirstOrDefaultAsync (u => u.Id == Model!.UserId!);
                user!.PhoneNumber = Model!.PhoneNumber;
                user.DisplayName = Model.DisplayName;
                user.ProfilePictureDataUrl = Model.ProfilePictureDataUrl;
                await userManager.UpdateAsync(user);
                Snackbar.Add($"{ConstantString.UpdateSuccess}", Severity.Info);
            }
        }
        finally
        {
            submitting = false;
        }
    }

    private async Task ChangePassword()
    {
        submitting = true;
        try
        {
            await passwordForm!.Validate();
            if (passwordForm!.IsValid)
            {
                var user = await userManager.Users.FirstOrDefaultAsync (u => u.Id == Model!.UserId!);
                var result = await userManager.ChangePasswordAsync(user!, changePassword.CurrentPassword, changePassword.NewPassword);
                if (result.Succeeded)
                {
                    await GetNewMediator().Publish(IdentityAuditNotification.PasswordReset(user!.UserName!));
                    Snackbar.Add($"{L["Password changed successfully... Logging out"]}", Severity.Info);
                    Navigation.NavigateTo(@IdentityComponentsEndpointRouteBuilderExtensions.Logout, true);
                }
                else
                {
                    Snackbar.Add($"{string.Join(",", result.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
                }
            }
        }
        finally
        {
            submitting = false;
        }
    }
}    
