@page "/user/profile"
@using Color = Color
@using ResizeMode = SixLabors.ImageSharp.Processing.ResizeMode
@using Severity = Severity
@using Size = SixLabors.ImageSharp.Size
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png
@using Cfo.Cats.Server.UI.Services.JsInterop
@using Cfo.Cats.Application.Common.Interfaces.Identity
@using Cfo.Cats.Domain.Identity
@using Cfo.Cats.Domain.Common.Enums
@inherits OwningComponentBase

@inject IValidationService Validator
@inject IStringLocalizer<Profile> L
@inject IJSRuntime Js
@inject IState<UserProfileState> UserProfileState
@inject IDispatcher Dispatcher
@inject IUploadService UploadService
@inject IIdentityService IdentityService


<PageTitle>@Title</PageTitle>

<ErrorBoundary>
    <ChildContent>
        @if (Model is null || IsLoading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
        }
        else
        {
            <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true" Elevation="6" ActivePanelIndexChanged="ActivePanelIndexChanged"
                     ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
                <MudTabPanel Text="@L["Profile"]">
                    <MudForm Model="@Model" @ref="@form" Validation="@(Validator.ValidateValue(Model))" Style="display: flex; align-content: center;  align-items: center; flex-direction: column;">
                        <MudGrid Justify="Justify.Center" Style="max-width:600px;display:flex;">
                            <MudItem sm="12" xs="12">
                                <div class="d-flex justify-center">

                                    @if (string.IsNullOrEmpty(Model.ProfilePictureDataUrl))
                                    {
                                        <MudElement Class="d-flex flex-column  align-center">
                                            <MudAvatar Style="height:128px; width:128px; font-size:2rem;">@Model.UserName.ToUpper().First()</MudAvatar>
                                            <div class="d-flex">
                                                @if (Model.AssignedRoles is not null)
                                                {
                                                    @foreach (var role in Model.AssignedRoles)
                                                    {
                                                        <MudChip Size="MudBlazor.Size.Small">@role</MudChip>
                                                    }
                                                }
                                            </div>

                                        </MudElement>
                                    }
                                    else
                                    {
                                        <MudElement Class="d-flex flex-column  align-center">
                                            <MudAvatar Style="height:128px; width:128px; font-size:2rem;">
                                                <MudImage Src="@Model.ProfilePictureDataUrl"></MudImage>
                                            </MudAvatar>
                                            <div class="d-flex">
                                                @if (Model.AssignedRoles is not null)
                                                {
                                                    @foreach (var role in Model.AssignedRoles)
                                                    {
                                                        <MudChip Size="MudBlazor.Size.Small">@role</MudChip>
                                                    }
                                                }
                                            </div>
                                        </MudElement>
                                    }
                                    <MudTooltip Text="@L["Click upload a image"]">
                                        <MudFileUpload T="IBrowserFile" Accept=".jpg, .jpeg, .png, .webp" FilesChanged="UploadPhoto" Style="margin-top:-10px;margin-left:-15px">
                                            <ButtonTemplate>
                                                <MudIconButton HtmlTag="label"
                                                               Icon="@Icons.Material.Filled.PhotoCamera"
                                                               for="@context">
                                                </MudIconButton>
                                            </ButtonTemplate>
                                        </MudFileUpload>
                                    </MudTooltip>

                                </div>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.TenantName)" @bind-Value="Model.TenantName" Label="@L["Tenant Name"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField For="@(() => Model.SuperiorName)" @bind-Value="Model.SuperiorName" Label="@L["Superior Name"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.UserName)" @bind-Value="Model.UserName" Label="@L["User Name"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.Email)" @bind-Value="Model.Email" Label="@L["Email"]" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.DisplayName)" @bind-Value="Model.DisplayName" Label="@L["Display Name"]" Variant="Variant.Text"></MudTextField>
                            </MudItem>
                            <MudItem sm="6" xs="12">
                                <MudTextField For="@(() => Model.PhoneNumber)" @bind-Value="Model.PhoneNumber" Label="@L["Phone Number"]" Variant="Variant.Text"></MudTextField>
                            </MudItem>
                            <MudItem sm="12" xs="12" Class="d-flex justify-end">
                                <MudButton ButtonType="ButtonType.Button" Disabled="@submitting" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">
                                    @if (submitting)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true"/>
                                        <MudText Class="ms-2">@ConstantString.Waiting </MudText>
                                    }
                                    else
                                    {
                                        <MudText>@ConstantString.Save</MudText>
                                    }
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudTabPanel>
                <MudTabPanel Text="@L["Change Password"]">
                    <MudForm Model="@changePassword" @ref="@passwordForm" Validation="@(Validator.ValidateValue(changePassword))" Style="display: flex; align-content: center;  align-items: center; flex-direction: column;">
                        <MudGrid Justify="Justify.Center" Style="max-width:300px">
                            <MudItem sm="12" xs="12">
                                <MudPasswordField Immediate="true"
                                                  Label="@L["Current Password"]"
                                                  For="@(() => changePassword.CurrentPassword)"
                                                  @bind-Value="changePassword.CurrentPassword"
                                                  Variant="Variant.Text"
                                                  PasswordMode="true"
                                                  Required="true"/>
                            </MudItem>
                            <MudItem xs="12">
                                <MudPasswordField Immediate="true"
                                                  Label="@L["New Password"]"
                                                  For="@(() => changePassword.NewPassword)"
                                                  @bind-Value="changePassword.NewPassword"
                                                  Variant="Variant.Text"
                                                  PasswordMode="true"
                                                  Required="true"/>
                            </MudItem>
                            <MudItem xs="12">
                                <MudPasswordField Immediate="true"
                                                  Label="@L["Confirm New Password"]"
                                                  For="@(() => changePassword.ConfirmPassword)"
                                                  @bind-Value="changePassword.ConfirmPassword"
                                                  Variant="Variant.Text"
                                                  PasswordMode="true"
                                                  Required="true"/>
                            </MudItem>
                            <MudItem sm="12" xs="12" Class="d-flex justify-end">
                                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await ChangePassword())">
                                    @if (submitting)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true"/>
                                        <MudText Class="ms-2">@ConstantString.Waiting </MudText>
                                    }
                                    else
                                    {
                                        <MudText>@L["Change Password"]</MudText>
                                    }
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudTabPanel>
                <MudTabPanel Text="@L["Org Chart"]">
                    <div class="chart-container"
                         style="height: calc(100vh - 265px);">
                    </div>
                </MudTabPanel>
            </MudTabs>
        }
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>

@code{
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;
    private UserManager<ApplicationUser> userManager;
    public string Title { get; set; } = "Profile";

    private MudForm? form;
    private MudForm? passwordForm;
    private bool submitting;

    private ChangePasswordModel changePassword { get; } = new();
    private readonly List<OrgItem> orgData = new();

    public string Id => Guid.NewGuid().ToString();
    private bool IsLoading => UserProfileState.Value.IsLoading;
    private UserProfile Model => UserProfileState.Value.UserProfile;


    private async void ActivePanelIndexChanged(int index)
    {
        if (index == 2)
        {
            await LoadOrgData();
        }
    }

    private async Task LoadOrgData()
    {
        var currerntuserName = (await AuthState).User.GetUserName();
        var list = await userManager.Users.Include(x => x.UserRoles).ThenInclude(x => x.Role).Include(x => x.Superior).ToListAsync();

        foreach (var item in list)
        {
            var roles = await userManager.GetRolesAsync(item);
            var count = await userManager.Users.Where(x => x.SuperiorId == item.Id).CountAsync();
            var orgitem = new OrgItem
            {
                Id = item.Id,
                Name = item.DisplayName ?? item.UserName,
                Area = item.TenantName,
                ProfileUrl = item.ProfilePictureDataUrl,
                ImageUrl = item.ProfilePictureDataUrl
            };
            if (currerntuserName == item.UserName)
            {
                orgitem.IsLoggedUser = true;
            }

            orgitem.Size = "";
            orgitem.Tags = item.PhoneNumber ?? item.Email;
            if (roles.Count > 0)
            {
                orgitem.PositionName = string.Join(',', roles);
            }

            orgitem.ParentId = item.SuperiorId;

            orgitem.DirectSubordinates = count;
            orgData.Add(orgitem);
        }

        await new OrgChart(Js).Create(orgData);
    }

    protected override async Task OnInitializedAsync()
    {
        userManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();
        await base.OnInitializedAsync();
        UserProfileState.StateChanged += StateOnStateChanged;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        UserProfileState.StateChanged -= StateOnStateChanged;
    }

    private void StateOnStateChanged(object? sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task UploadPhoto(IBrowserFile file)
    {
        var filestream = file.OpenReadStream(GlobalVariable.MaxAllowedSize);
        var imgstream = new MemoryStream();
        await filestream.CopyToAsync(imgstream);
        imgstream.Position = 0;
        using (var outStream = new MemoryStream())
        {
            using (var image = Image.Load(imgstream))
            {
                image.Mutate(i => i.Resize(new ResizeOptions { Mode = ResizeMode.Crop, Size = new Size(128, 128) }));
                image.Save(outStream, PngFormat.Instance);
                var result = await UploadService.UploadAsync($"users/{Model.UserId}", new UploadRequest(Guid.NewGuid() + ".png", UploadType.ProfilePicture, outStream.ToArray()));
                Model.ProfilePictureDataUrl = result;
                var user = await userManager.Users.FirstOrDefaultAsync (u => u.Id == Model.UserId!);
                user!.ProfilePictureDataUrl = Model.ProfilePictureDataUrl;
                await userManager.UpdateAsync(user);
                Snackbar.Add(L["The avatar has been updated"], Severity.Info);
                Dispatcher.Dispatch(new UserProfileUpdateAction { UserProfile = Model });
            }
        }
    }

    private async Task Submit()
    {
        submitting = true;
        try
        {
            await form!.Validate();
            if (form.IsValid)
            {
                var state = await AuthState;
                var user = await userManager.Users.FirstOrDefaultAsync (u => u.Id == Model.UserId!);
                user!.PhoneNumber = Model.PhoneNumber;
                user.DisplayName = Model.DisplayName;
                user.ProfilePictureDataUrl = Model.ProfilePictureDataUrl;
                await userManager.UpdateAsync(user);
                Snackbar.Add($"{ConstantString.UpdateSuccess}", Severity.Info);
                Dispatcher.Dispatch(new UserProfileUpdateAction { UserProfile = Model });
            }
        }
        finally
        {
            submitting = false;
        }
    }

    private async Task ChangePassword()
    {
        submitting = true;
        try
        {
            await passwordForm!.Validate();
            if (passwordForm!.IsValid)
            {
                var user = await userManager.Users.FirstOrDefaultAsync (u => u.Id == Model.UserId!);
                var result = await userManager.ChangePasswordAsync(user!, changePassword.CurrentPassword, changePassword.NewPassword);
                if (result.Succeeded)
                {
                    Snackbar.Add($"{L["Password changed successfully"]}", Severity.Info);
                }
                else
                {
                    Snackbar.Add($"{string.Join(",", result.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
                }
            }
        }
        finally
        {
            submitting = false;
        }
    }


}