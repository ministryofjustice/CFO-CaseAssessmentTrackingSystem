@page "/identity/users"

@using Cfo.Cats.Application.Features.Identity.DTOs
@using Cfo.Cats.Domain.Identity
@using Cfo.Cats.Server.UI.Pages.Identity.Roles.Components
@using Cfo.Cats.Server.UI.Pages.Identity.Users.Components
@using Cfo.Cats.Application.Common.Interfaces.Identity
@using Cfo.Cats.Application.Common.Interfaces.MultiTenant
@using Cfo.Cats.Application.SecurityConstants
@using System.Security.Claims
@using BlazorDownloadFile
@using System.Linq.Expressions
@using ActualLab.Fusion.Extensions
@using AutoMapper.QueryableExtensions;
@using Cfo.Cats.Infrastructure.Services.MultiTenant
@using Cfo.Cats.Server.UI.Services.Fusion
@using ZiggyCreatures.Caching.Fusion

@attribute [Authorize(Policy = PolicyNames.SystemFunctionsRead)]
@inherits OwningComponentBase
@implements IDisposable

@inject IUsersStateContainer UsersStateContainer
@inject IOnlineUserTracker OnlineUserTracker
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject IUserService UserService
@inject ITenantService TenantsService
@inject IFusionCache FusionCache;
@inject IExcelService ExcelService

@inject IStringLocalizer<Users> L
@inject ILogger<Users> Logger

<PageTitle>@Title</PageTitle>

<MudDataGrid @ref="_table"
    T="ApplicationUserDto"
    FixedHeader="true"
    FixedFooter="false"
    Height="calc(100vh - 300px)"
    @bind-RowsPerPage="_defaultPageSize"
    Hover="true"
    Loading="@_loading"
    ServerData="@(ServerReload)">
    <ToolBarContent>|
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.SwitchAccount" Size="Size.Large"/>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption" Class="mb-2">@L[_currentDto.GetClassDescription()]</MudText>
                    <MudSelect T="string" Style="min-width:120px" ValueChanged="OnChangedListView" Value="@_selectedTenantId" Dense="true" Label="List View">
                        <MudSelectItem T="string" Value="@(" ")">@L["ALL"]</MudSelectItem>
                        @foreach (var item in TenantsService.DataSource.OrderBy(t => t.Id))
                        {
                            <MudSelectItem T="string" Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </div>
            </div>
            <div class="flex-grow-1"></div>
            <div class="d-flex flex-column justify-end">
                <div class="d-flex">
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="@(OnRefresh)"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary">
                            @ConstantString.Refresh
                        </MudButton>
                        @if (_canCreate)
                            {
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Add"
                                       Size="Size.Small"
                                       OnClick="OnCreate"
                                       IconColor="Color.Surface">
                                @ConstantString.New
                            </MudButton>
                            }
                        @if (_canExport)
                        {
                        <MudLoadingButton Variant="Variant.Outlined" Color="Color.Primary"
                                          StartIcon="@Icons.Material.Filled.Download"
                                          Size="Size.Small"
                                          @bind-Loading="_exporting" LoadingAdornment="Adornment.Start" OnClick="OnExport"
                                          IconColor="Color.Surface">
                            @ConstantString.Export
                        </MudLoadingButton>
                        }
                        @if (_canImport)
                        {
                            <MudFileUpload T="IBrowserFile" FilesChanged="OnImportData" Accept=".xlsx">
                                <ActivatorContent>
                                    <MudButton Size="Size.Small"
                                               Variant="Variant.Outlined"
                                               Color="Color.Primary"
                                               Disabled="@_loading"
                                               StartIcon="@Icons.Material.Filled.Upload">
                                        @if (_uploading)
                                        {
                                            <MudProgressCircular Size="Size.Small" Indeterminate="true"/>
                                            @ConstantString.Uploading
                                        }
                                        else
                                        {
                                            @ConstantString.Import
                                        }
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>
                        }
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        @if (_canCreate)
                        {
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Add"
                                       Size="Size.Small"
                                       OnClick="OnCreate"
                                       IconColor="Color.Surface">
                                @ConstantString.New
                            </MudButton>
                        }
                    </MudHidden>
                </div>
                @if (_canSearch)
                {
                    <MudStack Row="true" AlignItems="AlignItems.Stretch">
                        <MudSelect T="string" Placeholder="Search for role name" Value="@_searchRole" Clearable="true" ValueChanged="@(OnSearchRole)" Style="width:150px">
                            @foreach (var str in _roles)
                            {
                            <MudSelectItem Value="@str">@str</MudSelectItem>
                            }
                        </MudSelect>
                        <MudHidden Breakpoint="Breakpoint.SmAndDown">
                            <MudTextField T="string" Immediate="false" ValueChanged="@(OnSearch)" Value="@_searchString" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                            </MudTextField>
                        </MudHidden>
                    </MudStack>
                }

            </div>
        </div>
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="ApplicationUserDto" ButtonDisabledFunc="@(x => x.Notes.Count() is 0)" />
        <TemplateColumn CellStyle="width:60px" Title="@ConstantString.Actions" Sortable="false">
            <CellTemplate>
                @if (_canEdit || _canArchive || _canManageRoles || _canResetPassword || _canActive || _canManagePermissions)
                {
                    <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">
                        @if (_canEdit)
                        {
                            <MudMenuItem OnClick="@(() => OnEdit(context.Item))">@ConstantString.Edit</MudMenuItem>
                        }
                        @if (_canArchive)
                        {
                            <MudMenuItem OnClick="@(() => OnArchive(context.Item))">@ConstantString.Archive</MudMenuItem>
                        }
                        @if (_canActive)
                        {
                            @if (context.Item.IsActive)
                            {
                                <MudMenuItem OnClick="@(() => OnSetActive(context.Item))">@L["Deactivate"]</MudMenuItem>
                            }
                            else
                            {
                                <MudMenuItem OnClick="@(() => OnSetActive(context.Item))">@L["Activate"]</MudMenuItem>
                            }
                        }
                        @if(_canResetPassword)
                        {
                            <MudMenuItem Disabled="@(!context.Item.IsActive)" OnClick="@(() => OnResetPassword(context.Item))">@L["Reset Password"]</MudMenuItem>
                        }
                    </MudMenu>
                }
                else
                {
                    <MudButton Variant="Variant.Filled"
                               StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                        @ConstantString.NoAllowed
                    </MudButton>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.TenantId" Title="@L[_currentDto.GetMemberDescription(x => x.TenantName)]">
            <CellTemplate>
                <div>
                    <MudText Typo="Typo.body2">@context.Item.TenantName</MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.Item.TenantId</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.UserName" Title="@L[_currentDto.GetMemberDescription(x => x.UserName)]">
            <CellTemplate>
                <div class="d-flex align-items-center">
                    <MudBadge Color="@(IsOnline(context.Item.DisplayName??context.Item.UserName) ? Color.Success : Color.Error)" Overlap="false" Dot="true" Bordered="true">
                        <MudAvatar>
                            @if (string.IsNullOrEmpty(context.Item.ProfilePictureDataUrl))
                            {
                            @context.Item.UserName.First()
                            }
                            else
                            {
                            <MudImage Src="@context.Item.ProfilePictureDataUrl"></MudImage>
                            }
                        </MudAvatar>
                    </MudBadge>
                    <div class="pl-3">
                        <MudText Class="ml-2 align-self-center">@context.Item.UserName</MudText>
                        <MudText Typo="Typo.body2" Class="ml-2 align-self-center mud-text-secondary">@context.Item.Email</MudText>
                    </div>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Email" Title="@L["Display Name / PhoneNumber"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2">@context.Item.DisplayName</MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@context.Item.PhoneNumber</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.SuperiorId" Title="@L[_currentDto.GetMemberDescription(x => x.SuperiorName)]">
            <CellTemplate>
                @context.Item.SuperiorName
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Sortable="false" Property="x => x.AssignedRoles" Title="@L[_currentDto.GetMemberDescription(x => x.AssignedRoles)]">
            <CellTemplate>
                @if (context.Item.AssignedRoles is not null)
                {
                foreach (var str in context.Item.AssignedRoles)
                {
                <MudChip Size="Size.Small" Variant="Variant.Text">@str</MudChip>
                }
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.IsActive" Title="@L[_currentDto.GetMemberDescription(x => x.IsActive)]">
            <CellTemplate>
                <div>
                    @if (context.Item.IsActive)
                    {
                    <MudChip Color="Color.Success" Size="Size.Small" Icon="@Icons.Material.Filled.CheckCircleOutline">@L["Active"]</MudChip>
                    @if (context.Item.LockoutEnd is not null)
                    {
                    <div class="d-flex">
                        <p>@L["Lockout End"]: </p>
                        <ToLocal DateTime="@context.Item.LockoutEnd.Value.UtcDateTime.ToLocalTime()" Format="dd/mm/yyyy HH:MM:ss"></ToLocal>
                    </div>
                    }
                    }
                    else
                    {
                    <MudChip Class="flex-grow-0" Color="Color.Surface" Size="Size.Small" Icon="@Icons.Material.Filled.HighlightOff">@L["Inactive"]</MudChip>
                    @if (context.Item.LockoutEnd is not null)
                    {
                    <div class="d-flex">
                        <p>@L["Lockout End"]: </p>
                        <ToLocal DateTime="@context.Item.LockoutEnd.Value.UtcDateTime.ToLocalTime()" Format="dd/mm/yyyy HH:MM:ss"></ToLocal>
                    </div>
                    }
                    }
                </div>
            </CellTemplate>
        </PropertyColumn>
    </Columns>
    <ChildRowContent>
        <MudCard Elevation="0" Class="d-flex flex-grow-0">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">
                        <strong>Additional Information</strong>
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @{
                    if(context.Open)
                    {
                        var notes = context.Item.Notes;

                        <MudSimpleTable Hover="true" Bordered="true" Striped>
                            <thead>
                                <tr>
                                    <th>@L["Call Reference"]</th>
                                    <th>@L["Message"]</th>
                                    <th>@L["Created By"]</th>
                                    <th>@L["Created Date"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var note in notes.OrderByDescending(x => x.Created))
                                {
                                    <tr>
                                        <td>@(note.CallReference ?? "None")</td>
                                        <td>@note.Message</td>
                                        <td>@(UserService.DataSource.SingleOrDefault(x => x.Id == note.CreatedBy)?.DisplayName ?? "Unknown")</td>
                                        <td>
                                            <ToLocal DateTime="@note.Created.ToLocalTime()" Format="dd/mm/yyyy HH:MM:ss"></ToLocal>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </MudSimpleTable>
                    }
                }
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new[] { 10, 15, 30, 50, 100, 500, 1000 })"/>
    </PagerContent>
</MudDataGrid>

<PermissionsDrawer OnAssignAllChanged="OnAssignAllChangedHandler" Waiting="@_processing" OnOpenChanged="OnOpenChangedHandler" Open="_showPermissionsDrawer" Permissions="_permissions" OnAssignChanged="OnAssignChangedHandler"></PermissionsDrawer>


<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;
    private UserManager<ApplicationUser> UserManager = null!;
    private RoleManager<ApplicationRole> RoleManager = null!;


    private int _defaultPageSize = 15;
    private readonly ApplicationUserDto _currentDto = new();
    private string _searchString = string.Empty;
    private string _selectedTenantId = " ";
    private string Title { get; set; } = "Users";
    private List<PermissionModel> _permissions = new();
    private IList<Claim> _assignedClaims = default!;

    private TimeSpan RefreshInterval => TimeSpan.FromHours(2);


    private MudDataGrid<ApplicationUserDto> _table = null!;
    private bool _processing;
    private bool _showPermissionsDrawer;
    private bool _canCreate;
    private bool _canSearch;
    private bool _canEdit;
    private bool _canArchive;
    private bool _canActive;
    private bool _canManageRoles;
    private bool _canResetPassword;
    private bool _canManagePermissions;
    private bool _canImport;
    private bool _canExport;
    private bool _loading;
    private bool _exporting;
    private bool _uploading;
    private List<string?> _roles = new();
    private string? _searchRole;

    protected override async Task OnInitializedAsync()
    {
        Title = L[_currentDto.GetClassDescription()];
        RoleManager = ScopedServices.GetRequiredService<RoleManager<ApplicationRole>>();
        UserManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();
        var state = await AuthState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, PolicyNames.SystemFunctionsWrite)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, PolicyNames.SystemFunctionsRead)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, PolicyNames.SystemFunctionsWrite)).Succeeded;
        _canArchive = (await AuthService.AuthorizeAsync(state.User, PolicyNames.SystemFunctionsWrite)).Succeeded;
        _canActive = (await AuthService.AuthorizeAsync(state.User, PolicyNames.SystemFunctionsWrite)).Succeeded;
        _canManageRoles = (await AuthService.AuthorizeAsync(state.User, PolicyNames.SystemFunctionsWrite)).Succeeded;
        _canResetPassword = (await AuthService.AuthorizeAsync(state.User, PolicyNames.SystemFunctionsWrite)).Succeeded;
        _canManagePermissions = (await AuthService.AuthorizeAsync(state.User, PolicyNames.SystemFunctionsWrite)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, PolicyNames.AllowImport)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, PolicyNames.AllowExport)).Succeeded;
        _roles = await RoleManager.Roles.Select(x => x.Name).ToListAsync();
    }

    private bool IsOnline(string username)
    {
        return UsersStateContainer.UsersByConnectionId.Any(x => x.Value.Equals(username, StringComparison.OrdinalIgnoreCase));
    }

    private Expression<Func<ApplicationUser, bool>> CreateSearchPredicate()
    {
        return x =>
            (x.UserName!.Contains(_searchString) ||
             x.Email!.Contains(_searchString) ||
             x.DisplayName!.Contains(_searchString) ||
             x.PhoneNumber!.Contains(_searchString) &&
            (_searchRole == null || (_searchRole != null && x.UserRoles.Any(x => x.Role.Name == _searchRole))) &&
            (_selectedTenantId == " " || (_selectedTenantId != " " && x.TenantId == _selectedTenantId)));
    }

    private async Task<GridData<ApplicationUserDto>> ServerReload(GridState<ApplicationUserDto> state)
    {
        try
        {
            _loading = true;

            var query = UserManager.Users.Where(CreateSearchPredicate());
            var items = await query
                .Include(x => x.UserRoles)
                .Include(x => x.Superior)
                .EfOrderBySortDefinitions(state)
                .Skip(state.Page * state.PageSize).Take(state.PageSize).ProjectTo<ApplicationUserDto>(Mapper.ConfigurationProvider).ToListAsync();
            var total = await UserManager.Users.CountAsync(CreateSearchPredicate());
            return new GridData<ApplicationUserDto> { TotalItems = total, Items = items };
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnChangedListView(string tenantId)
    {
        _selectedTenantId = tenantId;
        await _table.ReloadServerData();
    }

    private async Task OnSearch(string text)
    {
        if (_loading)
        {
            return;
        }
        _searchString = text.ToLower();
        await _table.ReloadServerData();
    }

    private async Task OnSearchRole(string role)
    {
        if (_loading)
        {
            return;
        }
        _searchRole = role;
        await _table.ReloadServerData();
    }

    private async Task OnRefresh()
    {
        await _table.ReloadServerData();
    }

    private async Task ShowCreateUserDialog(ApplicationUserDto model, string title)
    {
        var parameters = new DialogParameters<UserFormDialog>
        {
            { x => x.Model, model }
        };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<UserFormDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await ProcessUserCreation(model);
        }
        else
        {
            await OnRefresh();
        }

    }

    private async Task ShowEditUserDialog(ApplicationUserDto model, string title)
    {
        var parameters = new DialogParameters<UserFormDialog>
        {
            { x => x.Model, model }
        };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<UserFormDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            await ProcessUserUpdate(model);
        }
        else
        {
            await OnRefresh();
        }
    }

    private async Task ProcessUserCreation(ApplicationUserDto model)
    {
        var applicationUser = Mapper.Map<ApplicationUser>(model);
        applicationUser.EmailConfirmed = true;
        applicationUser.IsActive = true;

        var identityResult = await UserManager.CreateAsync(applicationUser);
        if (!identityResult.Succeeded)
        {
            Snackbar.Add($"{string.Join(",", identityResult.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
            return;
        }

        Snackbar.Add($"{L["New user created successfully."]}", Severity.Info);
        await AssignRolesToUser(applicationUser, model.AssignedRoles);

        Logger.LogInformation("Create a user succeeded. Username: {@UserName:l}, UserId: {@UserId}", applicationUser.UserName, applicationUser.Id);
        UserService.Refresh();
        await OnRefresh();
    }

    private async Task ProcessUserUpdate(ApplicationUserDto model)
    {
        var user = await UserManager.FindByIdAsync(model.Id!) ?? throw new NotFoundException($"The application user [{model.Id}] was not found.");
        var state = await AuthState;

        Mapper.Map(model, user);

        var identityResult = await UserManager.UpdateAsync(user);
        if (identityResult.Succeeded)
        {
            var roles = await UserManager.GetRolesAsync(user!);
            if (roles.Count > 0)
            {
                await UserManager.RemoveFromRolesAsync(user, roles);
            }

            if (model.AssignedRoles is not null && model.AssignedRoles.Length > 0)
            {
                await UserManager.AddToRolesAsync(user, model.AssignedRoles);
            }

            Snackbar.Add($"{L["The user updated successfully."]}", Severity.Info);
            await OnRefresh();
            UserService.Refresh();

            var userInfo = new UserInfo(
                model.Id,
                model.UserName,
                model.Email,
                model.DisplayName ?? string.Empty,
                model.ProfilePictureDataUrl ?? string.Empty,
                model.SuperiorName ?? string.Empty,
                model.SuperiorId ?? string.Empty,
                model.TenantId ?? string.Empty,
                model.TenantName ?? string.Empty,
                model.PhoneNumber,
                model.AssignedRoles ?? Array.Empty<string>(),
                UserPresence.Available);

            await OnlineUserTracker.UpdateUser(userInfo);
        }
        else
        {
            Snackbar.Add($"{string.Join(",", identityResult.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
        }
    }

    private async Task AssignRolesToUser(ApplicationUser user, string[]? roles)
    {
        if (roles is not null && roles.Length > 0)
        {
            await UserManager.AddToRolesAsync(user, roles);
        }
        else
        {
            await UserManager.AddToRoleAsync(user, RoleNames.SupportWorker);
        }
    }

    private async Task OnCreate()
    {
        var model = new ApplicationUserDto { AssignedRoles = new[] { RoleNames.SupportWorker } };
        await ShowCreateUserDialog(model, L["Create a new user"]);
    }

    private async Task OnEdit(ApplicationUserDto item)
    {
        await ShowEditUserDialog(item, L["Edit the user"]);
    }

    private async Task ShowArchiveConfirmationDialog(ApplicationUserDto dto)
    {
        var contentText = string.Format(ConstantString.ArchiveConfirmation, dto.UserName);
        await DialogServiceHelper.ShowConfirmationDialog(ConstantString.ArchiveConfirmationTitle, contentText, async () =>
        {
            await ProcessUserArchive(dto);
        });
    }

    private async Task ProcessUserArchive(ApplicationUserDto dto)
    {
        var user = await UserManager.FindByIdAsync(dto.Id) ?? throw new NotFoundException($"The application user [{dto.Id}] was not found.");
        var identityResult = await UserManager.DeleteAsync(user);
        if (identityResult.Succeeded)
        {
            Logger.LogInformation("Archiving of the user succeeded. Username: {@UserName:l}, UserId: {@UserId}", user.UserName, user.Id);
            Snackbar.Add($"{ConstantString.ArchiveSuccess}", Severity.Info);
            await OnRefresh();
            UserService.Refresh();
        }
        else
        {
            Snackbar.Add($"{string.Join(",", identityResult.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
        }
    }

    private async Task OnArchive(ApplicationUserDto dto)
    {
        var state = await AuthState;
        if (dto.Id == state.User.GetUserId())
        {
            Snackbar.Add("You cannot archive your own account!", Severity.Error);
            return;
        }
        await ShowArchiveConfirmationDialog(dto);

    }

    private async Task OnSetActive(ApplicationUserDto item)
    {
        var user = await UserManager.FindByIdAsync(item.Id!) ?? throw new NotFoundException($"Application user not found {item.Id}.");
        await ToggleUserActiveState(user, item);
    }

    private async Task ToggleUserActiveState(ApplicationUser user, ApplicationUserDto item)
    {
        if (user.IsActive)
        {
            await DeactivateUser(user, item);
        }
        else
        {
            await ActivateUser(user, item);
        }
    }

    private async Task ActivateUser(ApplicationUser user, ApplicationUserDto item)
    {
        user.IsActive = true;
        user.EmailConfirmed = true;
        user.LockoutEnd = null;
        var identityResult = await UserManager.UpdateAsync(user);

        if (identityResult.Succeeded)
        {
            item.IsActive = true;
            item.LockoutEnd = null;
            Snackbar.Add($"{L["The user has been activated."]}", Severity.Info);
        }
        else
        {
            Snackbar.Add($"{string.Join(",", identityResult.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
        }
    }

    private async Task DeactivateUser(ApplicationUser user, ApplicationUserDto item)
    {
        user.IsActive = false;
        user.LockoutEnd = DateTimeOffset.MaxValue;
        var identityResult = await UserManager.UpdateAsync(user);

        if (identityResult.Succeeded)
        {
            item.IsActive = false;
            item.LockoutEnd = DateTimeOffset.MaxValue;
            Snackbar.Add($"{L["The user has been deactivated."]}", Severity.Info);
        }
        else
        {
            Snackbar.Add($"{string.Join(",", identityResult.Errors.Select(x => x.Description).ToArray())}", Severity.Error);
        }
    }

    private async Task OnResetPassword(ApplicationUserDto item)
    {
        var model = new ResetPasswordFormModel { UserId = item.Id };
        
        var parameters = new DialogParameters<ResetPasswordDialog>
        {
            { x => x.Model, model }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<ResetPasswordDialog>(L[$"Reset Password for {item.DisplayName}"], parameters, options);

        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            Snackbar.Add($"{L["Reset password successfully"]}", Severity.Info);
        }
    }

    private Task OnOpenChangedHandler(bool state)
    {
        _showPermissionsDrawer = state;
        return Task.CompletedTask;
    }

    private async Task<IList<Claim>> GetUserClaims(string userId)
    {
        var key = $"get-claims-by-{userId}";
        return await FusionCache.GetOrSetAsync(key, async _ =>
        {
            var user = await UserManager.FindByIdAsync(userId) ?? throw new NotFoundException($"not found application user: {userId}");
            return await UserManager.GetClaimsAsync(user);
        }, RefreshInterval);
    }

    private async Task OnAssignAllChangedHandler(List<PermissionModel> models)
    {
        try
        {
            _processing = true;
            var userId = models.First().UserId;
            var user = await UserManager.FindByIdAsync(userId!) ?? throw new NotFoundException($"not found application user: {userId}");

            foreach (var model in models)
            {
                await ProcessPermissionChange(user, model);
            }

            Snackbar.Add($"{L["Authorization has been changed"]}", Severity.Info);
            await ClearClaimsCache(user.Id);
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task ProcessPermissionChange(ApplicationUser user, PermissionModel model)
    {
        if (model.Assigned)
        {
            if (model.ClaimType is not null && model.ClaimValue is not null)
            {
                await UserManager.AddClaimAsync(user, new Claim(model.ClaimType, model.ClaimValue));
            }
        }
        else
        {
            var removed = _assignedClaims.FirstOrDefault(x => x.Value == model.ClaimValue);
            if (removed is not null)
            {
                await UserManager.RemoveClaimAsync(user, removed);
            }
        }
    }

    private async Task ClearClaimsCache(string userId)
    {
        var key = $"get-claims-by-{userId}";
        FusionCache.Remove(key);
        await Task.Delay(300);
    }

    private async Task OnAssignChangedHandler(PermissionModel model)
    {
        try
        {
            _processing = true;
            var userId = model.UserId!;
            var user = await UserManager.FindByIdAsync(userId) ?? throw new NotFoundException($"Application user Not Found {userId}.");

            model.Assigned = !model.Assigned;
            if (model.Assigned)
            {
                if (model.ClaimType is not null && model.ClaimValue is not null)
                {
                    await UserManager.AddClaimAsync(user, new Claim(model.ClaimType, model.ClaimValue));
                    Snackbar.Add($"{L["Permission assigned successfully"]}", Severity.Info);
                }
            }
            else
            {
                var removed = _assignedClaims.FirstOrDefault(x => x.Value == model.ClaimValue);
                if (removed is not null)
                {
                    await UserManager.RemoveClaimAsync(user, removed);
                }

                Snackbar.Add($"{L["Permission removed successfully"]}", Severity.Info);
            }

            await ClearClaimsCache(user.Id);
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task OnExport()
    {
        _exporting = true;
        try
        {
            var searchPredicate = CreateSearchPredicate();

            var users = await UserManager.Users
                .Where(searchPredicate)
                .ProjectTo<ApplicationUserDto>(Mapper.ConfigurationProvider)
                .ToListAsync();

            var result = await ExportUsers(users);
            await BlazorDownloadFileService.DownloadFile($"{L["Users"]}.xlsx", result, "application/octet-stream");
            Snackbar.Add($"{ConstantString.ExportSuccess}", Severity.Info);
        }
        finally
        {
            _exporting = false;
        }
    }

    private async Task<byte[]> ExportUsers(List<ApplicationUserDto> items)
    {
        return await ExcelService.ExportAsync(items,
            new Dictionary<string, Func<ApplicationUserDto, object?>>
                    {
                { L["Id"], item => item.Id },
                { L["User Name"], item => item.UserName },
                { L["Display Name"], item => item.DisplayName },
                { L["Email"], item => item.Email },
                { L["Phone Number"], item => item.PhoneNumber },
                { L["Tenant Id"], item => item.TenantId },
                { L["Tenant Name"], item => item.TenantName }
                    }, L["Users"]);
    }

    private async Task OnImportData(IBrowserFile file)
    {
        _uploading = true;
        try
        {
            var stream = new MemoryStream();
            await file.OpenReadStream(GlobalVariable.MaxAllowedSize).CopyToAsync(stream);
            var result = await ImportUsers(stream);

            if (result?.Succeeded == true)
            {
                if (result.Data != null)
                {
                    await ProcessImportedUsers(result.Data);
                    await _table.ReloadServerData();
                }
                Snackbar.Add($"{ConstantString.ImportSuccess}", Severity.Info);
            }
            else if (result?.Errors != null)
            {
                foreach (var msg in result.Errors)
                {
                    Snackbar.Add($"{msg}", Severity.Error);
                }
            }
        }
        finally
        {
            _uploading = false;
        }

    }

    private async Task<IResult<IEnumerable<ApplicationUser>>> ImportUsers(MemoryStream stream)
    {
        return await ExcelService.ImportAsync(stream.ToArray(), new Dictionary<string, Func<DataRow, ApplicationUser, object?>>
        {
            { L["User Name"], (row, item) => item.UserName = row[L["User Name"]]?.ToString() },
            { L["Display Name"], (row, item) => item.DisplayName = row[L["Display Name"]]?.ToString() },
            { L["Email"], (row, item) => item.Email = row[L["Email"]]?.ToString() },
            { L["Phone Number"], (row, item) => item.PhoneNumber = row[L["Phone Number"]]?.ToString() },
            { L["Tenant Id"], (row, item) => item.TenantId = row[L["Tenant Id"]]?.ToString() }
        }, L["Users"]);
    }

    private async Task ProcessImportedUsers(IEnumerable<ApplicationUser> users)
    {
        foreach (var user in users)
        {
            if (!UserManager.Users.Any(x => x.UserName == user.UserName))
            {
                var identityResult = await UserManager.CreateAsync(user);
                if (identityResult.Succeeded)
                {
                    await UserManager.AddToRolesAsync(user, new[] { RoleNames.SupportWorker });
                }
                else
                {
                    Snackbar.Add($"{string.Join(',', identityResult.Errors.Select(x => x.Description))}", Severity.Error);
                }
            }
        }
    }


}