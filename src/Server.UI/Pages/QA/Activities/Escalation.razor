@page "/pages/qa/activities/escalation/{id:guid}"

@attribute [Authorize(Policy = SecurityPolicies.SeniorInternal)]

@using Cfo.Cats.Application.Common.Validators
@using Cfo.Cats.Application.Features.Activities.Commands
@using Cfo.Cats.Application.Features.Activities.DTOs
@using Cfo.Cats.Application.Features.Activities.Queries
@using Cfo.Cats.Application.SecurityConstants
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.QA.Activities.Components
@inherits CatsComponentBase

<style>
    .document-container {
        width: 90%;
        height: calc(100vh - 350px);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .full-size-object {
        width: 100%;
        height: 100%;
    }

    .mud-radio {
        display: block;
        margin-bottom: 0.5rem; 
    }    
</style>

<ActivityQaExternalMessageWarning @ref="warningMessage" />

@if (_activityQaDetailsDto is not null && _activityQaDetailsDto.Status== ActivityStatus.SubmittedToAuthorityStatus)
{
    @if (_queueEntry!.IsAccepted || _queueEntry.IsCompleted)
    {
        <MudAlert Severity="Severity.Warning">
            This entry has already been processed
        </MudAlert>
    }

    <MudGrid Style="height: 100vh; width: 100%;">
        <MudItem xs="4" Style="height: calc(100vh - 150px); width: 100%;">
            <ActivityQaDetails Activity="_activityQaDetailsDto" />
        </MudItem>

        <MudItem xs="8" Style="height: 100%; width: 100%;">
            <MudTabs>
                <MudTabPanel Text="QA Notes">
                    <QaNotes ActivityId="@_activityQaDetailsDto.ActivityId" />
                </MudTabPanel>

                <MudTabPanel Text="Attachment" Style="min-width: 185px;" BadgeColor="Color.Info">                    
                    <AttachmentTabPanel ActivityQaDetailsDto="_activityQaDetailsDto" />
                </MudTabPanel>

                <MudTabPanel Text="Submission">
                    @if (_queueEntry.IsCompleted == false)
                    {
                        <MudForm Model="@Command" @ref="_form" Validation="@(Validator.ValidateValue(Command))">
                            <MudItem xs="12">
                                <MudRadioGroup T="SubmitActivityEscalationResponse.EscalationResponse?" @bind-Value="Command.Response" For="@(() => Command.Response)" Required="true">
                                    <MudRadio T="SubmitActivityEscalationResponse.EscalationResponse?" Value="SubmitActivityEscalationResponse.EscalationResponse.Accept" Color="Color.Primary">
                                        Accept
                                    </MudRadio>
                                    <MudRadio T="SubmitActivityEscalationResponse.EscalationResponse?" Value="SubmitActivityEscalationResponse.EscalationResponse.Return" Color="Color.Secondary">
                                        Return
                                    </MudRadio>
                                    <MudRadio T="SubmitActivityEscalationResponse.EscalationResponse?" Value="SubmitActivityEscalationResponse.EscalationResponse.Comment" Color="Color.Secondary">
                                        Comment / Defer
                                    </MudRadio>
                                </MudRadioGroup>
                            </MudItem>
                            <MudDivider Class="py-4" />

                            @if (Command.IsMessageExternal)
                            {
                                <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">
                                    This comment will be visible to PQA (and internal members of CFO staff)
                                </MudAlert>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
                                    This comment will only be visible to internal members of CFO staff
                                </MudAlert>
                            }

                            <MudGrid Class="py-4">
                                <MudItem Class="d-flex align-center" xs="12" md="3" xl="2">
                                    <MudSwitch @bind-Value="Command.IsMessageExternal"
                                               For="() => Command.IsMessageExternal"
                                               Label="External"
                                               Color="Color.Primary" />
                                </MudItem>
                                <MudItem xs="12" md="9" xl="10">
                                    <MudTextField @bind-Value="Command.Message" Label="Message" Lines="5" For="() => Command.Message" MaxLength="@ValidationConstants.NotesLength" Immediate="true" oninput="UpdateCharacterCount" />
                                    <MudText Class="ml-2">Characters: @characterCount / 1000</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudForm>

                        <MudContainer Class="d-flex px-0 pt-8">
                            <MudButton Color="Color.Primary" OnClick="SubmitToQa" Variant="Variant.Filled">Submit</MudButton>
                        </MudContainer>
                    }
                    else
                    {
                        <MudAlert Variant="Variant.Outlined" Severity="Severity.Info">
                            This entry has already been processed
                        </MudAlert>
                    }
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>
}

@code {
    private ActivityQaExternalMessageWarning? warningMessage;
    private MudForm? _form;
    private ActivityQueueEntryDto? _queueEntry;
    private ActivityQaDetailsDto? _activityQaDetailsDto = null;

    [Parameter] public Guid Id { get; set; }

    [CascadingParameter] public UserProfile? UserProfile { get; set; }

    private SubmitActivityEscalationResponse.Command Command { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (_activityQaDetailsDto is null)
        {
            var result = await GetNewMediator().Send(new GetActivityEscalationEntryById.Query
            {
                Id = Id,
                CurrentUser = UserProfile
            });

            if (result.Succeeded)
            {
                _queueEntry = result.Data!;

                var activity = await GetNewMediator().Send(new GetActivityById.Query()
                {
                    Id = _queueEntry.ActivityId
                });

                _activityQaDetailsDto = Mapper.Map<ActivityQaDetailsDto>(activity);
                _activityQaDetailsDto.ActivityId = activity!.Id;

                Command = new SubmitActivityEscalationResponse.Command
                {
                    ActivityQueueEntryId = Id,
                    CurrentUser = UserProfile
                };
            }

            StateHasChanged();
        }
    }

    protected async Task SubmitToQa()
    {
        await _form!.Validate().ConfigureAwait(false);
        if (_form.IsValid is false)
        {
            return;
        }

        bool submit = true;

        if (Command is { IsMessageExternal: true, Message.Length: > 0 })
        {
            submit = await warningMessage!.ShowAsync();
        }

        if (submit)
        {
            var result = await GetNewMediator().Send(Command);

            var message = Command.Response switch
            {
                SubmitActivityEscalationResponse.EscalationResponse.Accept => "Activity accepted",
                SubmitActivityEscalationResponse.EscalationResponse.Return => "Activity returned to PQA",
                _ => "Comment added"
            };


            if (result.Succeeded)
            {
                Snackbar.Add(message, Severity.Info);
                Navigation.NavigateTo("/pages/qa/servicedesk/activities");
            }
            else
            {
                ShowActionFailure("Failed to return to submit", result);
            }
        }
    }

    private void ShowActionFailure(string title, IResult result)
    {
        Snackbar.Add(
            @<div>
                <h2>@title</h2>
                <ul>
                    @foreach (var e in result.Errors)
                    {
                        <li>@e</li>
                    }
                </ul>
            </div>
            , Severity.Error, options =>
            {
                options.RequireInteraction = true;
                options.SnackbarVariant = Variant.Text;
            });
    }

    private int characterCount => Command.Message?.Length ?? 0;
}