@page "/pages/qa/enrolments/qa2/"

@using Cfo.Cats.Application.Common.Validators
@using Cfo.Cats.Application.Features.Documents.Queries
@using Cfo.Cats.Application.Features.Participants.DTOs
@using Cfo.Cats.Application.Features.Participants.Queries
@using Cfo.Cats.Application.Features.QualityAssurance.Commands
@using Cfo.Cats.Application.Features.QualityAssurance.DTOs
@using Cfo.Cats.Application.SecurityConstants
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.QA.Enrolments.Components
@using Cfo.Cats.Server.UI.Pages.Participants.Components

@inherits CatsComponentBase

@attribute [Authorize(Policy = SecurityPolicies.Qa2)]

<style>
    .document-container {
        width: 90%;
        height: calc(100vh - 150px);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .full-size-object {
        width: 100%;
        height: 100%;
    }

    .mud-radio {
        display: block;
        margin-bottom: 0.5rem;
    }
</style>
<MudContainer Style="width: 100%; min-width: 480px;" MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h5" Class="mb-5">
        CFO Enrolment Queue Second Pass
    </MudText>

    @if (_participantDto is null)
    {
        <MudButton OnClick="GetQueueItem" ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Filled.QueuePlayNext"
            Variant="Variant.Outlined" Color="Color.Primary">
            Get Next
        </MudButton>
    }

    @if (_participantDto is not null && _participantDto.EnrolmentStatus == EnrolmentStatus.SubmittedToAuthorityStatus)
    {

        @if (_queueEntry!.IsAccepted)
        {
            <MudAlert Severity="Severity.Warning">
                This entry has already been processed
            </MudAlert>
        }

        <MudGrid Style="height: 100vh; width: 100%;">
            <MudItem xs="4" Style="height: calc(100vh - 150px); width: 100%;">
                <ParticipantQaDetails Participant="_participantDto" />
            </MudItem>
            <MudItem xs="8" Style="height: 100%; width: 100%;">
                <MudTabs>
                    <MudTabPanel Text="QA Notes">
                        <QaNotes ParticipantId="@_participantDto.Id"/>
                    </MudTabPanel>

                    <MudTabPanel Text="Consent" BadgeColor="Color.Info" BadgeData="@_participantDto.Consents.Length">
                        <ConsentTabPanel ParticipantDto="_participantDto"/>
                    </MudTabPanel>
                    <MudTabPanel Text="Right To Work" Style="min-width: 185px;" BadgeColor="Color.Info" BadgeData="@_participantDto.RightToWorks.Length">
                        <RightToWorkTabPanel ParticipantDto="_participantDto"/>
                    </MudTabPanel>
                    <MudTabPanel Text="Assessment" Icon="@(_participantDto.AssessmentJustification is not null ? Icons.Material.Filled.Warning : string.Empty)" IconColor="Color.Warning">
                        <AssessmentTabPanel ParticipantDto="_participantDto"/>
                    </MudTabPanel>
                    <MudTabPanel Text="Submission">
                        @if (_queueEntry.IsCompleted == false)
                        {
                        <MudForm Model="@Command" @ref="_form" Validation="@(Validator.ValidateValue(Command))">
                            <MudItem xs="12">
                                <MudRadioGroup T="SubmitQa2Response.Qa2Response?" @bind-Value="Command.Response" For="@(() => Command.Response)" Required="true">
                                    <MudRadio T="SubmitQa2Response.Qa2Response?" Value="SubmitQa2Response.Qa2Response.Accept" Color="Color.Primary">
                                        Accept
                                    </MudRadio>
                                    <MudRadio T="SubmitQa2Response.Qa2Response?" Value="SubmitQa2Response.Qa2Response.Return" Color="Color.Secondary">
                                        Return
                                    </MudRadio>
                                    <MudRadio T="SubmitQa2Response.Qa2Response?" Value="SubmitQa2Response.Qa2Response.Escalate" Color="Color.Secondary">
                                        Escalate
                                    </MudRadio>
                                </MudRadioGroup>
                            </MudItem>

                            <MudTextField @bind-Value="Command.Message" Label="Message" Lines="5" Class="mt-4" For="() => Command.Message" MaxLength="@ValidationConstants.NotesLength" Immediate="true" oninput="UpdateCharacterCount" />
                            <MudText Class="ml-2">Characters: @characterCount / 1000</MudText>

                        </MudForm>
                        <MudContainer Class="d-flex px-0 pt-8">
                            <MudButton Color="Color.Primary" OnClick="SubmitToQa" Variant="Variant.Filled">Submit</MudButton>
                        </MudContainer>
                        }
                        else
                        {
                        <MudAlert Variant="Variant.Outlined" Severity="Severity.Info">
                            This entry has already been processed
                        </MudAlert>
                        }
                    </MudTabPanel>
                </MudTabs>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private MudForm? _form;
    private EnrolmentQueueEntryDto? _queueEntry = null;
    private ParticipantDto? _participantDto = null;

    [CascadingParameter]
    public UserProfile? UserProfile { get; set; } = null!;

    private SubmitQa2Response.Command Command { get; set; } = default!;

    private async Task GetQueueItem()
    {
        GrabQa2Entry.Command command = new GrabQa2Entry.Command()
            {
                CurrentUser = UserProfile!
            };

        var result = await GetNewMediator().Send(command);
        if (result.Succeeded)
        {
            _queueEntry = result.Data!;
            _participantDto = await GetNewMediator().Send(new GetParticipantById.Query()
                            {
                                Id = _queueEntry.ParticipantId
                            });
            Command = new SubmitQa2Response.Command()
                            {
                                QueueEntryId = _queueEntry.Id,
                                CurrentUser = UserProfile
                            };
        }
        else
        {
            Snackbar.Add(result.ErrorMessage, Severity.Info);
        }
    }

    protected async Task SubmitToQa()
    {
        await _form!.Validate().ConfigureAwait(false);
        if (_form.IsValid)
        {
            var result = await GetNewMediator().Send(Command);

            if (result.Succeeded)
            {
                Snackbar.Add("Participant submitted", Severity.Info);
                Navigation.NavigateTo("/pages/qa/enrolments/qa2", true);
            }
            else
            {
                ShowActionFailure("Failed to submit", result);
            }
        }
    }

    private void ShowActionFailure(string title, IResult result)
    {
        Snackbar.Add(
        @<div>
            <h2>@title</h2>
            <ul>
                @foreach (var e in result.Errors)
                {
                    <li>@e</li>
                }
            </ul>
        </div>
        , Severity.Error, options => {
            options.RequireInteraction = true;
            options.SnackbarVariant = Variant.Text;
        });
    }

    private int characterCount => Command.Message?.Length ?? 0;

    private void UpdateCharacterCount(ChangeEventArgs args)
    {
        Command.Message = args?.Value?.ToString() ?? string.Empty;
    }
}