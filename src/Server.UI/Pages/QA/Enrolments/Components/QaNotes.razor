@inherits CatsComponentBase

@using System.Globalization
@using ActualLab.Fusion.Extensions
@using Cfo.Cats.Application.Features.QualityAssurance.DTOs
@using Cfo.Cats.Application.Features.QualityAssurance.Queries
@using Cfo.Cats.Application.SecurityConstants
@using Humanizer

@if (_notes is { Length: > 0 })
{
    <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelinePosition="TimelinePosition.Start">
        @foreach (var note in _notes.OrderByDescending(n => n.Created))
        {   
            <MudTimelineItem Size="Size.Medium" Color="Color.Success" Elevation="25">
                <MudTooltip Text="@note.Created.ToLocalTime().ToString("ddd, dd MMM yyyy 'at' HH:mm")">
                    <MudCard Outlined="false" Elevation="25">
                        <MudCardContent>
                            <MudText Typo="Typo.body1">
                                @note.Message
                            </MudText>

                            @if (hideUser && CFOTenantNames.Contains(note.TenantName))
                            {
                                <MudText Typo="Typo.caption">
                                    CFO User (@note.TenantName)  @note.Created.Humanize()
                                </MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.caption">
                                    @note.CreatedBy (@note.TenantName)  @note.Created.Humanize()
                                </MudText>
                            }

                        </MudCardContent>
                    </MudCard>
                </MudTooltip>
            </MudTimelineItem>
        }
    </MudTimeline>
}

@code{
    private EnrolmentQaNoteDto[]? _notes = null;

    [CascadingParameter] 
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    [CascadingParameter]
    public UserProfile UserProfile { get; set; } = default!;

    [Parameter, EditorRequired]
    public string ParticipantId { get;set; } = default!;

    //Hide CFO Users from providers on time line
    private bool hideUser = true;
    private HashSet<string> CFOTenantNames = new HashSet<string> { "CFO", "CFO Evolution" };
    private string[] allowed = [RoleNames.QAOfficer, RoleNames.QASupportManager, RoleNames.QAManager, RoleNames.SMT, RoleNames.SystemSupport];

    protected override async Task OnInitializedAsync()
    {
        if (_notes is null)
        {
            var state = await AuthState;

            bool includeInternalNotes = (await AuthService.AuthorizeAsync(state.User, SecurityPolicies.Internal)).Succeeded;

            var result = await GetNewMediator().Send(new GetEnrolmentQaNotes.Query()
            {
                ParticipantId = ParticipantId,
                CurentUser = UserProfile,
                IncludeInternalNotes = includeInternalNotes
            });

            if (result.Succeeded)
            {
                _notes = result.Data!.OrderBy(n => n.Created).ToArray();
            }
        }

        if (UserProfile.AssignedRoles.Any(r => allowed.Contains(r)))
        {
            hideUser = false;
        }
    }
}