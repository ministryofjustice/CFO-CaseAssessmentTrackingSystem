@using Cfo.Cats.Application.Features.Locations.DTOs
@using Cfo.Cats.Application.Features.Payables.Commands
@using Cfo.Cats.Application.Features.Payables.DTOs
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Payables.Components

@inherits CatsComponentBase

<MudDialog>
    <DialogContent>
        @if (model is not null)
        {
            <MudForm @ref="form" Model="model" Validation="@(Validator.ValidateValue(model))">
                <MudGrid>
                    <MudItem xs="12">
                        <AvailableLocationsDropdown LocationChanged="LocationChanged" />
                        <MudTextField ReadOnly For="() => model.Location" hidden /> @* Hidden validation property *@
                    </MudItem>
                    <MudItem xs="12">
                        <MudChipSet T="ActivityType" 
                                    SelectedValuesChanged="ActivityTypesChanged"
                                    Disabled="Disabled"
                                    SelectionMode="SelectionMode.MultiSelection" 
                                    CheckMark>
                            @foreach (var type in ActivityType.List.OrderByDescending(type => type.Name))
                            {
                                <MudChip Value="type" SelectedColor="Color.Success">@type.Name</MudChip>
                            }
                        </MudChipSet>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect @ref="activityDropdown" 
                                   Disabled="Disabled" 
                                   Label="Activity/ETE" 
                                   @bind-Value="model.Activity" 
                                   For="() => model.Activity">
                            @foreach (var activity in activities.Where(activity => filteredTypes.Contains(activity.Type) || filteredTypes.Any() is false))
                            {
                                <MudSelectItem Value="activity">
                                    <div class="d-flex gap-2 align-center">
                                        <MudChip T="string" Size="Size.Small" Text="@activity.Type.Name" Color="Color.Secondary" />
                                        @activity.Description
                                    </div>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Dialog.Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@saving" Color="Color.Primary" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    IEnumerable<ActivityDto> activities = 
        new List<ActivityDto>
        {
            new ActivityDto("Activity #1", ActivityType.CommunityAndSocial),
            new ActivityDto("Activity #2", ActivityType.EducationAndTraining),
            new ActivityDto("Activity #3", ActivityType.Employment),
            new ActivityDto("Activity #4", ActivityType.HumanAndCitizenship),
            new ActivityDto("Activity #5", ActivityType.InterventionsAndServicesWraparoundSupport),
            new ActivityDto("Activity #5", ActivityType.SupportWork),
            new ActivityDto("Activity #6", ActivityType.CommunityAndSocial),
            new ActivityDto("Activity #7", ActivityType.EducationAndTraining),
            new ActivityDto("Activity #8", ActivityType.Employment),
            new ActivityDto("Activity #9", ActivityType.HumanAndCitizenship),
            new ActivityDto("Activity #10", ActivityType.InterventionsAndServicesWraparoundSupport),
            new ActivityDto("Activity #11", ActivityType.SupportWork)
        };

    MudSelect<ActivityDto?> activityDropdown = new();
    MudForm form = new();
    IReadOnlyCollection<ActivityType> filteredTypes = [];
    AddActivity.Command model = new();
    bool saving;

    bool Disabled => model.Location is null;

    [CascadingParameter]
    public required MudDialogInstance Dialog { get; set; }

    async Task Submit()
    {
        try
        {
            saving = true;

            await form.Validate();

            if (form.IsValid is false)
            {
                return;
            }

            var result = await GetNewMediator().Send(model);

            if (result.Succeeded)
            {
                Dialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }

        }
        finally
        {
            saving = false;
        }
    }

    void LocationChanged(LocationDto location)
    {
        model.Location = location;

        // await GetNewMediator().Send(new GetActivitiesForLocation.Command(){ Location = location });
    }

    void ActivityTypesChanged(IReadOnlyCollection<ActivityType>? selectedTypes) 
    { 
        filteredTypes = selectedTypes ?? [];
        activityDropdown.Clear();
    }

}
