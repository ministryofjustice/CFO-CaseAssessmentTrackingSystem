@using Cfo.Cats.Application.Features.Locations.DTOs
@using Cfo.Cats.Application.Features.Payables.Commands
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Payables.Components

@inherits CatsComponentBase

<MudDialog>
    <DialogContent>
        @if (Model is not null)
        {
            <MudForm @ref="form" Model="Model" Validation="@(Validator.ValidateValue(Model))">
                <MudGrid>
                    <MudItem xs="12">
                        <AvailableLocationsDropdown LocationChanged="LocationChanged" />
                        <MudTextField ReadOnly For="() => Model.Location" hidden /> @* Hidden validation property *@
                    </MudItem>
                    <MudItem xs="12">
                        <MudChipSet T="ActivityETEType" 
                        SelectedValuesChanged="ActivityTypesChanged"
                        Disabled="Disabled"
                        SelectionMode="SelectionMode.MultiSelection">
                            @foreach (var type in ActivityETEType.List)                                
                            {
                                <MudChip Value="type" SelectedColor="Color.Info">@type.Name</MudChip>
                            }
                        </MudChipSet>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect @ref="activityDropdown" 
                        Disabled="Disabled" 
                        Label="Activity/ETE" 
                        @bind-Value="Model.ActivityDefinition" 
                        For="() => Model.ActivityDefinition">
                            @foreach (var activity in activities
                            .Where(activity => filteredTypes.Count is 0 || filteredTypes.Contains(activity.ActivityETEType))
                            .OrderByDescending(activity => activity.Name))
                            {
                                <MudSelectItem Value="activity">
                                    <div class="d-flex gap-2 align-center">
                                        <MudChip T="string" Size="Size.Small" Text="@activity.ActivityETEType.Name" Color="Color.Secondary" />
                                        @activity.ActivityTitle
                                    </div>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudDatePicker @bind-Date="Model.Completed"
                        For="() => Model.Completed"
                        MaxDate="DateTime.UtcNow"
                        Label="@Model.GetMemberDescription(x => x.Completed)"
                        PickerVariant="PickerVariant.Dialog"
                        ImmediateText="true" 
                        Editable="true" />
                    </MudItem>
                </MudGrid>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Dialog.Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@saving" Color="Color.Primary" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    IEnumerable<ActivityDefinition> activities = [];
    MudSelect<ActivityDefinition?> activityDropdown = new();
    MudForm form = new();
    IReadOnlyCollection<ActivityETEType> filteredTypes = [];
    bool saving;

    bool Disabled => Model.Location is null;

    [CascadingParameter]
    public required MudDialogInstance Dialog { get; set; }

    [Parameter, EditorRequired]
    public required AddActivity.Command Model { get; set; }

    async Task Submit()
    {        
        try
        {
            saving = true;

            await form.Validate();

            if (form.IsValid is false)
            {
                return;
            }

            var result = await GetNewMediator().Send(Model);

            if (result.Succeeded)
            {
                Dialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }

        }
        finally
        {
            saving = false;
        }
    }

    void LocationChanged(LocationDto location)
    {
        Model.Location = location;
        activities = ActivityDefinition.GetActivitiesForLocation(location.LocationType);

        if (activityDropdown.Value is not null)
        {
            activityDropdown.Clear();
        }
    }

    void ActivityTypesChanged(IReadOnlyCollection<ActivityETEType>? selectedTypes)
    { 
        filteredTypes = selectedTypes ?? [];

        if (activityDropdown.Value is not null)
        {
            activityDropdown.Clear();
        }
    }

}
