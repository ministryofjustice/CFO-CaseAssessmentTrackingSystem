@using Cfo.Cats.Application.Features.Locations.DTOs
@using Cfo.Cats.Application.Features.Payables.Commands
@using Cfo.Cats.Application.Features.Payables.Queries
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Payables.Components

@inherits CatsComponentBase

<MudDialog>
    <DialogContent>
        @if (Model is not null)
        {
            <MudForm @ref="form" Model="Model" Validation="@(Validator.ValidateValue(Model))">
                <MudGrid>
                    <MudItem xs="12">
                        <AvailableLocationsDropdown LocationChanged="LocationChanged" />
                        <MudTextField ReadOnly For="() => Model.Location" hidden /> @* Hidden validation property *@
                    </MudItem>
                    <MudItem xs="12">
                        <MudChipSet @bind-SelectedValues="filteredTypes"
                        Disabled="Disabled"
                        SelectionMode="SelectionMode.MultiSelection">
                            @foreach (var type in ActivityType.List)
                            {
                                <MudChip Value="type" 
                                SelectedColor="Color.Info" 
                                Text="@type.Name" 
                                OnClick="ClearSelectedActivity" 
                                Disabled="IsAvailableAtSelectedLocation(type) is false" />
                            }
                        </MudChipSet>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect @ref="activityDropdown"
                        T="ActivityDefinition"
                        ValueChanged="ActivityChanged"
                        Disabled="Disabled"
                        Label="@Model.GetMemberDescription(x => x.ActivityDefinition)"
                        For="() => Model.ActivityDefinition">
                            @foreach (var activity in activities
                           .Where(activity => filteredTypes.Count is 0 || filteredTypes.Contains(activity.Type))
                           .OrderByDescending(activity => activity.Name))
                            {
                                <MudSelectItem Value="activity">
                                    <div class="d-flex gap-2 align-center">
                                        <MudChip T="string" Size="Size.Small" Text="@activity.Type.Name" Color="Color.Secondary" />
                                        @activity.Category.Name
                                    </div>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    @if (hasSelectedActivityAlreadyBeenAddedToday)
                    {
                        <MudItem xs="12">
                            <MudAlert Severity="Severity.Warning">
                                This activity was added recently. Did you mean to choose a different activity?
                            </MudAlert>
                        </MudItem>
                    }

                    <MudItem xs="12">
                        <MudDatePicker @bind-Date="Model.Completed"
                        For="() => Model.Completed"
                        MaxDate="DateTime.UtcNow"
                        Label="@Model.GetMemberDescription(x => x.Completed)"
                        PickerVariant="PickerVariant.Dialog"
                        ImmediateText="true" 
                        Editable="true" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="Model.AdditionalInformation"
                        Label="@Model.GetMemberDescription(x => x.AdditionalInformation)"
                        For="() => Model.AdditionalInformation"
                        Lines="5" />
                    </MudItem>
                    @if (Model.ActivityDefinition is { Classification.RequiresFurtherInformation: true })
                    {
                        <MudItem xs="12">
                            <MudAlert Severity="Severity.Info">Further information is required for this type of activity</MudAlert>

                                @if(Model.ActivityDefinition.Classification == ClassificationType.Employment)
                                {
                                    <Employment Model="new AddEmployment.Command()"/>
                                }
                                else if(Model.ActivityDefinition.Classification == ClassificationType.EducationAndTraining)
                                {
                                    <EducationTraining Model="new AddEducationTraining.Command()" />
                                }
                                else if(Model.ActivityDefinition.Classification == ClassificationType.ISWActivity)
                                {
                                    <Isw Model="new AddIsw.Command()"></Isw>
                                }

                        </MudItem>
                    }
                </MudGrid>

            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Dialog.Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@saving" Color="Color.Primary" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    IEnumerable<ActivityDefinition> activities = [];
    MudSelect<ActivityDefinition?> activityDropdown = new();
    MudForm form = new();
    IReadOnlyCollection<ActivityType> filteredTypes = [];

    bool saving;
    bool hasSelectedActivityAlreadyBeenAddedToday;
    bool Disabled => Model.Location is null;

    [CascadingParameter]
    public required MudDialogInstance Dialog { get; set; }

    [Parameter, EditorRequired]
    public required AddActivity.Command Model { get; set; }

    async Task Submit()
    {        
        try
        {
            saving = true;

            await form.Validate();

            if (form.IsValid is false)
            {
                return;
            }

            var result = await GetNewMediator().Send(Model);

            if (result.Succeeded)
            {
                Dialog.Close(DialogResult.Ok(true));
                Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }

        }
        finally
        {
            saving = false;
        }
    }

    void LocationChanged(LocationDto location)
    {
        Model.Location = location;
        activities = location is null ? [] : ActivityDefinition.GetActivitiesForLocation(location.LocationType);
        filteredTypes = [];
        ClearSelectedActivity();
    }

    async Task ActivityChanged(ActivityDefinition definition)
    {
        Model.ActivityDefinition = definition;

        hasSelectedActivityAlreadyBeenAddedToday = definition is not null && await GetNewMediator().Send(new ExistsByCategory.Query()
        {
            Category = definition.Category,
            ParticipantId = Model.ParticipantId,
            AddedOn = DateTime.UtcNow.Date
        });
        
    }

    void ClearSelectedActivity()
    { 
        if (activityDropdown.Value is not null)
        {
            activityDropdown.Clear();
        }
    }

    bool IsAvailableAtSelectedLocation(ActivityType type) => activities.Any(activity => activity.Type == type);
}