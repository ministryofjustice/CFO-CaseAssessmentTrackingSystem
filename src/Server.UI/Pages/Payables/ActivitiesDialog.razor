@using Cfo.Cats.Application.Features.Locations.DTOs
@using Cfo.Cats.Application.Features.Payables.DTOs
@using Cfo.Cats.Application.Features.Payables.Queries
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Payables.Components
@using Humanizer

@inherits CatsComponentBase

<style>
    .mud-list-item-child:hover,
    .mud-list-item-child:focus {
    background-color: initial !important;
    }
</style>

<MudDialog>
    <DialogContent>
        <MudList T="ActivitySummaryDto" ReadOnly>
            <MudListSubheader>
                <MudGrid>
                    <MudItem xs="12">
                        <MudDateRangePicker 
                            Label="Completed from/to range" 
                            DateRangeChanged="OnDateRangeChanged" 
                            Clearable 
                            MaxDate="DateTime.Today" />
                    </MudItem>
                    <MudItem xs="12">
                        <AvailableLocationsDropdown LocationChanged="OnLocationChanged" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudChipSet T="ActivityType"
                        SelectedValuesChanged="OnActivityTypesChanged"
                        SelectionMode="SelectionMode.MultiSelection">
                            @foreach (var type in ActivityType.List)
                            {
                                <MudChip Value="type"
                                SelectedColor="Color.Info"
                                Text="@type.Name" />
                            }
                        </MudChipSet>
                    </MudItem>
                </MudGrid>
            </MudListSubheader>
            @if(activities is not null)
            {
                @foreach (var activity in activities.Items)
                {
                    <MudListItem Class="mud-list-item-child">
                        <ChildContent>
                            <div class="d-flex gap-2 align-center">
                                <MudChip T="string" Size="Size.Small" Text="@activity.Definition.Type.Name" Color="Color.Secondary" />
                                <MudText Typo="Typo.body2">@activity.Definition.Category.Name</MudText>
                            </div>
                            @{
                                var created = activity.Created.ToLocalTime();
                                var completed = DateOnly.FromDateTime(activity.Completed);
                            }
                            <MudText Typo="Typo.body2">
                                Added on @created.ToShortDateString() at @created.ToShortTimeString() (@created.Humanize())
                            </MudText>
                            <MudText Typo="Typo.body2" Class="pt-1">
                                Completed on @completed.ToShortDateString() (@(completed == DateOnly.FromDateTime(DateTime.Today) ? "today" : completed.Humanize()))
                                at @activity.TookPlaceAtLocationName
                            </MudText>
                        </ChildContent>
                    </MudListItem>
                    <MudDivider />
                }
                <MudListSubheader Class="d-flex justify-center mt-2">
                    <MudPagination Count="@activities.TotalPages" ShowFirstButton="true" ShowLastButton="true" SelectedChanged="OnPaginationChanged" />
                </MudListSubheader>
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Dialog.Cancel">@ConstantString.Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    PaginatedData<ActivitySummaryDto>? activities;
    //bool loading;

    [Parameter, EditorRequired]
    public required ActivitiesWithPagination.Query Model { get; set; }

    [CascadingParameter]
    public required MudDialogInstance Dialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //loading = true;
            await OnRefresh();

        }
        finally
        {
            //loading = false;
        }

        await base.OnInitializedAsync();
    }

    async Task OnRefresh()
    {
        Model.PageSize = 5;
        Model.OrderBy = "Created";
        Model.SortDirection = $"{SortDirection.Descending}";

        activities = await GetNewMediator().Send(Model);
    }

    Task OnPaginationChanged(int arg)
    {
        Model.PageNumber = arg;
        return OnRefresh();
    }

    Task OnDateRangeChanged(DateRange range)
    {
        Model.CompletedStart = range.Start;
        Model.CompletedEnd = range.End;
        return OnRefresh();
    }

    Task OnLocationChanged(LocationDto location)
    {
        Model.Location = location;
        return OnRefresh();
    }

    Task OnActivityTypesChanged(IReadOnlyCollection<ActivityType>? types)
    {
        Model.IncludeTypes = types?.ToList();
        return OnRefresh();
    }

}
