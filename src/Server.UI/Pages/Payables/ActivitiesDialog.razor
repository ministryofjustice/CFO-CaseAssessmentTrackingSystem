@using Cfo.Cats.Application.Features.Locations.DTOs
@using Cfo.Cats.Application.Features.PathwayPlans.DTOs
@using Cfo.Cats.Application.Features.Payables.DTOs
@using Cfo.Cats.Application.Features.Payables.Queries
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Payables.Components
@using Humanizer

@inherits CatsComponentBase

<style>
    .mud-list-item:focus,
    .mud-list-item:hover {
    background-color: initial !important;
    }
</style>

<MudDialog>
    <DialogContent>
        <MudList T="ActivitySummaryDto" ReadOnly>
            <MudListSubheader>
                <MudGrid>
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Info" Class="pa-2 mb-1">
                            @if (Task is not null)
                            {
                                <MudText Typo="Typo.body1" Class="mb-1">Viewing all activities for task</MudText>
                                <MudText Typo="Typo.subtitle2">@Task.DisplayName</MudText>
                            }
                            else if (Objective is not null)
                            {
                                <MudText Typo="Typo.body1" Class="mb-1">Viewing all activities for objective</MudText>
                                <MudText Typo="Typo.subtitle2">@Objective.DisplayName</MudText>
                            }
                        </MudAlert>
                    </MudItem>
                    <MudItem xs="12">
                        <MudDateRangePicker 
                        Label="Completed from/to range" 
                        DateRangeChanged="OnDateRangeChanged" 
                        Clearable 
                        MaxDate="DateTime.Today" />
                    </MudItem>
                    <MudItem xs="12">
                        <AvailableLocationsDropdown LocationChanged="OnLocationChanged" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudChipSet T="ActivityType"
                        SelectedValuesChanged="OnActivityTypesChanged"
                        SelectionMode="SelectionMode.MultiSelection">
                            @foreach (var type in ActivityType.List)
                            {
                                <MudChip Value="type"
                                SelectedColor="Color.Info"
                                Text="@type.Name" />
                            }
                        </MudChipSet>
                    </MudItem>
                    <MudItem xs="12">
                        <MudCheckBox T="bool" ValueChanged="OnExcludeNotInProgress" Label="Hide activities that don't require my attention" />
                    </MudItem>
                </MudGrid>
            </MudListSubheader>
            @if(activities is not null)
            {
                foreach (var activity in activities.Items)
                {
                    var created = activity.Created.ToLocalTime();
                    var completed = DateOnly.FromDateTime(activity.Completed);
                    <MudListItem Class="flex-row-reverse">
                        <ChildContent>
                            <div class="d-flex justify-space-between align-center ml-2">
                                <div class="d-flex align-center">
                                    @if (Task is null)
                                    {
                                        var task = Objective.Tasks.Single(task => task.Id == activity.TaskId);

                                        <div class="d-flex align-center flex-column mr-3">
                                            <MudText Typo="Typo.body1">Task</MudText>
                                            <MudText Typo="Typo.body1">@string.Format("{0}.", task.Index)</MudText>
                                        </div>
                                    }
                                    <div class="pr-2">
                                        <div class="d-flex gap-2 align-center">
                                            <MudChip T="string" Size="Size.Small" Text="@activity.Definition.Type.Name" Color="Color.Secondary" />
                                            <MudText Typo="Typo.body2">@activity.Definition.Category.Name</MudText>
                                        </div>
                                        <MudText Typo="Typo.body2">
                                            Added on @created.ToShortDateString() at @created.ToShortTimeString() (@created.Humanize())
                                        </MudText>
                                        <MudText Typo="Typo.body2" Class="pt-1">
                                            Completed on @completed.ToShortDateString() (@(completed == DateOnly.FromDateTime(DateTime.Today) ? "today" : completed.Humanize()))
                                            at @activity.TookPlaceAtLocationName
                                        </MudText>

                                        @{
                                            Color color = activity.Status switch
                                            {
                                                _ when activity.Status == ActivityStatus.PendingStatus => Color.Warning,
                                                _ when activity.Status == ActivityStatus.ApprovedStatus => Color.Success,
                                                _ => Color.Default
                                            };
                                        }

                                        <MudChip Color="color" Size="Size.Small">@activity.Status.Name</MudChip>
                                    </div>
                                </div>
                                @if (activity.Status.AllowsChanges)
                                {
                                    <MudTooltip Text="Edit">
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small" />
                                    </MudTooltip>
                                }
                            </div>
                        </ChildContent>
                        <NestedList>
                            <MudListItem>
                                <MudTextField Label="Additional Information"
                                Value="@activity.AdditionalInformation"
                                Lines="5"
                                Class="mt-0"
                                Disabled />
                            </MudListItem>
                        </NestedList>
                    </MudListItem>
                    <MudDivider />
                }
                <MudListSubheader Class="d-flex justify-center mt-2">
                    <MudPagination Count="@activities.TotalPages" ShowFirstButton="true" ShowLastButton="true" SelectedChanged="OnPaginationChanged" />
                </MudListSubheader>
            }
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Dialog.Cancel">@ConstantString.Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    PaginatedData<ActivitySummaryDto>? activities;
    //bool loading;

    [Parameter, EditorRequired]
    public required ActivitiesWithPagination.Query Model { get; set; }

    [Parameter, EditorRequired]
    public required ObjectiveDto Objective { get; set; }

    [CascadingParameter]
    public required MudDialogInstance Dialog { get; set; }

    [Parameter]
    public ObjectiveTaskDto? Task { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //loading = true;
            await OnRefresh();

        }
        finally
        {
            //loading = false;
        }

        await base.OnInitializedAsync();
    }

    async Task OnRefresh()
    {
        Model.PageSize = 5;
        Model.OrderBy = "Created";
        Model.SortDirection = $"{SortDirection.Descending}";

        activities = await GetNewMediator().Send(Model);
    }

    Task OnPaginationChanged(int arg)
    {
        Model.PageNumber = arg;
        return OnRefresh();
    }

    Task OnDateRangeChanged(DateRange range)
    {
        Model.CompletedStart = range.Start;
        Model.CompletedEnd = range.End;
        return OnRefresh();
    }

    Task OnLocationChanged(LocationDto location)
    {
        Model.Location = location;
        return OnRefresh();
    }

    Task OnActivityTypesChanged(IReadOnlyCollection<ActivityType>? types)
    {
        Model.IncludeTypes = types?.ToList();
        return OnRefresh();
    }

    Task OnExcludeNotInProgress(bool exclude)
    {
        Model.Status = exclude ? ActivityStatus.PendingStatus : null;
        return OnRefresh();
    }

}
