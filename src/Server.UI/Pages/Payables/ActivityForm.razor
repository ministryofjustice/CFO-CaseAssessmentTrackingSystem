@using Cfo.Cats.Application.Common.Interfaces.Locations
@using Cfo.Cats.Application.Features.Locations.DTOs
@using Cfo.Cats.Application.Features.Payables.DTOs
@using Cfo.Cats.Application.Features.Payables.Commands
@using Cfo.Cats.Application.Features.Payables.Queries
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Payables.Components

@inherits CatsComponentBase

@inject ILocationService Locations;
@inject ICurrentUserService CurrentUser;

<MudGrid>
    <MudItem xs="12">
        <MudSelect @bind-Value="Model.Location" 
                   @bind-Value:after="LocationChanged" 
                   Label="@Model.GetMemberDescription(x => x.Location)"
                   For="() => Model.Location"
                   Clearable="true">
            @foreach (var location in locations)
            {
                <MudSelectItem Value="location">@location.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12">
        <MudChipSet @bind-SelectedValues="filteredTypes"
        Disabled="Disabled"
        SelectionMode="SelectionMode.MultiSelection">
            @foreach (var type in ActivityType.List)
            {
                <MudChip Value="type"
                SelectedColor="Color.Info"
                Text="@type.Name"
                OnClick="ClearSelectedActivity"
                Disabled="IsAvailableAtSelectedLocation(type) is false" />
            }
        </MudChipSet>
    </MudItem>
    <MudItem xs="12">
        <MudSelect @ref="activityDropdown"
        @bind-Value="Model.Definition"
        @bind-Value:after="ActivityChanged"
        Disabled="Disabled"
        Label="@Model.GetMemberDescription(x => x.Definition)"
        For="() => Model.Definition">
            @foreach (var activity in activities
            .Where(activity => filteredTypes.Count is 0 || filteredTypes.Contains(activity.Type))
            .OrderBy(activity => activity.Name))
            {
                <MudSelectItem Value="activity">
                    <div class="d-flex gap-2 align-center">
                        <MudChip T="string" Size="Size.Small" Text="@activity.Type.Name" Color="Color.Secondary" />
                        @activity.Category.Name
                    </div>
                </MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    @if (hasSelectedActivityAlreadyBeenAddedToday)
    {
        <MudItem xs="12">
            <MudAlert Severity="Severity.Warning">
                This activity was added recently. Did you mean to choose a different activity?
            </MudAlert>
        </MudItem>
    }

    <MudItem xs="12">
        <MudDatePicker @bind-Date="Model.Completed"
        For="() => Model.Completed"
        MaxDate="DateTime.UtcNow"
        Label="@Model.GetMemberDescription(x => x.Completed)"
        PickerVariant="PickerVariant.Dialog"
        ImmediateText="true"
        Editable="true" />
    </MudItem>
    <MudItem xs="12">
        <MudTextField @bind-Value="Model.AdditionalInformation"
                      Label="@Model.GetMemberDescription(x => x.AdditionalInformation)"
                      For="() => Model.AdditionalInformation"
                      Lines="5" />
    </MudItem>
    @if (Model.Definition is { Classification.RequiresFurtherInformation: true })
    {
        <MudItem xs="12">
            <MudAlert Class="mb-2" Severity="Severity.Info">Further information is required for this type of activity</MudAlert>

            @if (Model.Definition.Classification == ClassificationType.Employment)
            {
                <Employment Model="Model.EmploymentTemplate" />
            }
            else if (Model.Definition.Classification == ClassificationType.EducationAndTraining)
            {
                <EducationTraining Model="Model.EducationTrainingTemplate" />
            }
            else if (Model.Definition.Classification == ClassificationType.ISWActivity)
            {
                <Isw Model="Model.ISWTemplate" />
            }

            <MudItem xs="12">
                <div class="mt-4">
                    <MudFileUpload @bind-Files="Model.Document"
                    For="() => Model.Document"
                    MaximumFileCount="1"
                    Accept=".pdf">
                        <ActivatorContent>
                            <MudLoadingButton Loading="uploading"
                            Variant="Variant.Outlined"
                            Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.Upload">
                                @string.Format("{0} Template", uploading ? ConstantString.Uploading : ConstantString.Upload)
                            </MudLoadingButton>
                        </ActivatorContent>
                        <SelectedTemplate>
                            <br />
                            @if (context != null)
                            {
                                <MudText>
                                    Template uploaded: @context.Name
                                </MudText>
                            }
                            else
                            {
                                <MudText>No Files</MudText>
                            }
                            <br />
                        </SelectedTemplate>
                    </MudFileUpload>
                </div>
            </MudItem>

        </MudItem>
    }
    @if(Model.Definition is { RequiresQa: true })
    {
        <MudItem xs="12">
            <MudAlert Severity="Severity.Warning">
                Submission of this type of Activity/ETE is subject to Quality Assurance (QA) checks. 
                Are you sure you would like to submit to Provider QA?
            </MudAlert>
        </MudItem>
    }
</MudGrid>

@code {
    IEnumerable<ActivityDefinition> activities = [];
    MudSelect<ActivityDefinition?> activityDropdown = new();
    MudForm form = new();
    bool uploading = false;
    IReadOnlyCollection<ActivityType> filteredTypes = [];
    IEnumerable<LocationDto> locations = [];

    bool hasSelectedActivityAlreadyBeenAddedToday;
    bool Disabled => Model.Location is null;

    [Parameter, EditorRequired]
    public required AddActivity.Command Model { get; set; }

    protected override void OnInitialized()
    {
        SetActivities();

        locations = Locations
                .GetVisibleLocations(CurrentUser.TenantId!)
                .ToList();

        base.OnInitialized();
    }

    void SetActivities() => activities = Model.Location is null ? [] : ActivityDefinition.GetActivitiesForLocation(Model.Location.LocationType);

    void LocationChanged()
    {
        SetActivities();
        filteredTypes = [];
        ClearSelectedActivity();
    }

    async Task ActivityChanged()
    {
        hasSelectedActivityAlreadyBeenAddedToday = Model.Definition is not null && await GetNewMediator().Send(new ExistsByCategory.Query()
        {
            Category = Model.Definition.Category,
            ParticipantId = Model.ParticipantId,
            AddedOn = DateTime.UtcNow.Date
        });

        ClearTemplates();
    }

    void ClearTemplates()
    {
        Model.ISWTemplate = new();
        Model.EducationTrainingTemplate = new();
        Model.EmploymentTemplate = new();
    }

    void ClearSelectedActivity()
    {
        if (activityDropdown.Value is not null)
        {
            activityDropdown.Clear();
        }
    }

    bool IsAvailableAtSelectedLocation(ActivityType type) => activities.Any(activity => activity.Type == type);
}
