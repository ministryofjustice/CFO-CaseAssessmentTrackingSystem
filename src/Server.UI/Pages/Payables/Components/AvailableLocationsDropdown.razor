@using Cfo.Cats.Application.Common.Interfaces.Locations
@using Cfo.Cats.Application.Features.Locations.DTOs

@inherits CatsComponentBase

@inject ILocationService Locations;
@inject ICurrentUserService CurrentUser;

@if(loading is false)
{
    <MudSelect T="LocationDto" ValueChanged="LocationChanged">
        @foreach (var location in locations)
        {
            <MudSelectItem Value="location">@location.Name</MudSelectItem>
        }
    </MudSelect>

    if(locations is { Count: > 0 })
    {
        <MudAlert Severity="Severity.Warning">
            No locations available.
        </MudAlert>
    }
}

@code {
    bool loading = false;
    List<LocationDto> locations = [];

    [Parameter]
    public EventCallback<LocationDto> LocationChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            locations = Locations
                .GetVisibleLocations(CurrentUser.TenantId!)
                .ToList();
        }
        finally
        {
            loading = false;
        }

        await base.OnInitializedAsync();
    }
}