@using Cfo.Cats.Application.Features.Payables.Commands
@using Cfo.Cats.Application.Features.Payables.DTOs
@using Cfo.Cats.Domain.Common.Enums
@using Cfo.Cats.Server.UI.Pages.Payables.Components
@using Humanizer
@inherits CatsComponentBase

@inject IStringLocalizer<Isw> L
@if (Model is not null)
{
        <MudGrid>
            <MudItem xs="12">
                <MudDatePicker @bind-Date="Model.WraparoundSupportStartDate"
                For="() => Model.WraparoundSupportStartDate"
                Label="@Model.GetMemberDescription(x => x.WraparoundSupportStartDate)"
                Editable="true"
                PickerVariant="PickerVariant.Dialog" />
            </MudItem>
            <MudItem xs="12">
                <MudDatePicker @bind-Date="Model.BaselineAchievedDate"
                For="() => Model.BaselineAchievedDate"
                Label="@Model.GetMemberDescription(x => x.BaselineAchievedDate)"
                Editable="true"
                PickerVariant="PickerVariant.Dialog" />
            </MudItem>
            <MudItem xs="12">
                <MudNumericField Label="@Model.GetMemberDescription(x => x.TotalHoursPerformedPreIntervention)" @bind-Value="@Model.TotalHoursPerformedPreIntervention" For="() => Model.TotalHoursPerformedPreIntervention" Step=".25M" />
            </MudItem>
            <MudItem xs="12">
                <MudNumericField Label="@Model.GetMemberDescription(x => x.TotalHoursPerformedDuringIntervention)" @bind-Value="@Model.TotalHoursPerformedDuringIntervention" For="() => Model.TotalHoursPerformedDuringIntervention" Step=".25M" />
            </MudItem>
            <MudItem xs="12">
                <MudNumericField Label="@Model.GetMemberDescription(x => x.TotalHoursPerformedAfterIntervention)" @bind-Value="@Model.TotalHoursPerformedAfterIntervention" For="() => Model.TotalHoursPerformedAfterIntervention" Step=".25M" />
            </MudItem>
            <MudItem xs="12">
                <MudText>Total Intervention Hours (pre, during and after): @(Model.TotalHoursPerformedPreIntervention + Model.TotalHoursPerformedDuringIntervention + Model.TotalHoursPerformedAfterIntervention)</MudText>
                @if ((Model.TotalHoursPerformedPreIntervention + Model.TotalHoursPerformedDuringIntervention + Model.TotalHoursPerformedAfterIntervention) < 10)
                {
                    <MudAlert Class="mb-2" Severity="MudBlazor.Severity.Error" Variant="Variant.Outlined" Dense="false">Total Intervention Hours (pre, during and after) must be atleast 10 hours or more</MudAlert>
                }
            </MudItem>
            <MudItem xs="12">
                <div class="mb-4 mt-8">
                    <MudFileUpload @bind-Files="Model.Document"
                        For="() => Model.Document"
                        MaximumFileCount="1"
                        Accept=".pdf" Disabled="Disabled">
                            <ActivatorContent>
                                <MudLoadingButton Loading="uploading"
                                Variant="Variant.Outlined"
                                Color="Color.Primary"
                                StartIcon="@Icons.Material.Filled.Upload">
                                    @if (uploading)
                                {
                                    @ConstantString.Uploading
                                }
                                else
                                {
                                    @ConstantString.Upload
                                }
                            </MudLoadingButton>
                        </ActivatorContent>
                        <SelectedTemplate>
                            <br />
                            @if (context != null)
                            {
                                <MudText>
                                    Employment template uploaded:  @context.Name
                                </MudText>
                            }
                            else
                            {
                                <MudText>No Files</MudText>
                            }
                            <br />
                        </SelectedTemplate>
                    </MudFileUpload>
                </div>
            </MudItem>
        </MudGrid>
}
@code {
    private bool uploading = false;

    [Inject]
    private IPicklistService PicklistService { get; set; } = default!;

    [Parameter, EditorRequired]
    public required AddIsw.Command Model { get; set; }
    public MudForm form = new();

    bool Disabled = false;

}
