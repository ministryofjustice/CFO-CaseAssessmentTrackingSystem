@attribute [Authorize(Roles = $"{RoleNames.SystemSupport}, {RoleNames.Finance}")]

@page "/pages/analytics/outcome-quality-dip-sampling"

@using Cfo.Cats.Application.SecurityConstants
@using Cfo.Cats.Domain.Common.Enums
@using Humanizer

@inherits CatsComponentBase

<MudText Typo="Typo.h5">
    Outcome Qualitiy Dip Sample
</MudText>

@if(Query is not null)
{
    <MudForm Model="Query" FieldChanged="ReloadAsync">
        <MudGrid Class="my-2">
            <MudItem xs="12" md="2">
                <MudSelect Label="Month" @bind-Value="Query.Month">
                    @foreach (var month in Enumerable.Range(1, 12))
                    {
                        <MudSelectItem Value="month">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month)</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="1">
                <MudSelect Label="Year" @bind-Value="Query.Year">
                    @foreach (var year in Enumerable.Range(2024, DateTime.Now.Year - 2023))
                    {
                        <MudSelectItem Value="year">@year</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="2">
                <ContractAutoComplete TenantId="@(CurrentUser?.TenantId ?? "xxx")" @bind-Value="Query.Contract" />
            </MudItem>
            <MudItem xs="12" md="2">
                <MudSwitch T="bool" Value="false" Label="Only show in progress" Color="Color.Primary" />
            </MudItem>
        </MudGrid>
    </MudForm>
}

<MudGrid Class="mt-2">

    @if(isLoading)
    {
        <MudLoading Loading="isLoading" />
    }
    else
    {
        foreach(var sample in samples)
        {
            <MudItem xs="12" md="6" lg="4">
                <MudCard>
                    <MudCardHeader Class="justify-space-between">
                        <MudText Typo="Typo.h4">@sample.ContractDescription (@($"{sample.PeriodFrom:MMM yyyy}"))</MudText>
                        @{
                            var color = sample.Status switch
                            {
                                var type when type == DipSampleStatus.InProgress => Color.Warning,
                                var type when type == DipSampleStatus.Completed => Color.Success,
                                _ => Color.Primary
                            };
                        }
                        <MudChip T="string" Color="color" Size="Size.Small">
                            @sample.Status.Name
                        </MudChip>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>Sample size of <b>@sample.Size</b> participant(s)</MudText>
                        <MudText>Generated @sample.CreatedOn.Humanize() (@sample.CreatedOn.ToShortDateString())</MudText>
                        @*@if(sample.Contributors is { Length: > 0 })
                        {
                            <div class="d-flex">
                                <MudText>Contributors</MudText>
                                <MudAvatarGroup Max="3" Spacing="3">
                                    @foreach(var contributor in sample.Contributors)
                                    {
                                        <MudTooltip Text="@contributor">
                                            <MudAvatar Size="Size.Small">@string.Join(string.Empty, contributor!.ToUpper().Split(' ').Select(name => name[0]))</MudAvatar>
                                        </MudTooltip>
                                    }
                                </MudAvatarGroup>
                            </div>
                        } *@
                    </MudCardContent>
                    <MudCardActions Class="justify-space-between">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Href="@($"/pages/analytics/outcome-quality-dip-sampling/{sample.Id}")">
                            Review 
                        </MudButton>
                        @if(sample.ScoreAvg.HasValue)
                        {
                            int score = sample.ScoreAvg switch
                            {
                                >= 91 => 5,
                                >= 81 => 4,
                                >= 71 => 3,
                                >= 61 => 2,
                                >= 51 => 1,
                                _ => 0
                            };

                            <MudTooltip Text="@($"{sample.ScoreAvg}%")">
                                <MudRating SelectedValue="score" ReadOnly />
                            </MudTooltip>
                        }
                        else
                        {
                            <MudTooltip Text="Score will become available after completion">
                                <MudSkeleton Animation="Animation.Wave" Width="120px" />
                            </MudTooltip>
                        }
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    }
</MudGrid>
