@inherits CatsComponentBase

@if(Model is not null)
{
    <MudContainer Class="d-flex flex-column align-center justify-center">
    <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
        We have found a match: @(string.Join(' ', new [] { Candidate.FirstName, Candidate.SecondName, Candidate.LastName})) (@Candidate.Identifier)
        We have them located at @(Candidate.LocationDescription ?? "Unmapped Location")
    </MudAlert>
    <MudForm Model="@Model" @ref="@_form" Validation="@(Validator.ValidateValue(Model))">
        <MudGrid>
            <MudItem xs="12">
                <CandidateComparisonComponent Comparisons="_comparisons" />
            </MudItem>
            <MudItem xs="12">
                <MudSelect @bind-Value="Model.ReferralSource"
                           For="() => Model.ReferralSource"
                           Label="@Model.GetMemberDescription(x => x.ReferralSource)">
                    @foreach (var referralSource in PicklistService.DataSource
                                    .Where(c => c.Name == Picklist.ReferralSource)
                                    .OrderBy(c => c.Text))
                    {
                        <MudSelectItem Value="@referralSource.Value">@referralSource.Text</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

                <MudItem xs="12">
                    <MudTextField Value="Model.ReferralComments"
                                  ValueChanged="@((string newValue) => UpdateCharacterCount(newValue))"
                                  Label="@Model.GetMemberDescription(x => x.ReferralComments)"
                                  MaxLength="1000"
                                  Immediate="true"
                                  Lines="8">
                    </MudTextField>
                    <MudText Class="ml-2">Characters: @characterCount / 1000</MudText> 

                </MudItem>

            <MudItem xs="12">
                <MudCheckBox @bind-Value="Model.Confirmation"
                             For="() => Model.Confirmation"
                             Label="@Model.GetMemberDescription(x => x.Confirmation)"
                             Class="mt-4" />
            </MudItem>
        </MudGrid>
    </MudForm>
    
    <MudContainer Class="d-flex px-0 mt-8 justify-space-between">
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="BackToSearch">Back to Search</MudButton>
        <MudLoadingButton 
                    Loading="loading"
                    Color="Color.Success" 
                    Variant="Variant.Filled"
                    OnClick="EnrolCandidate"
                    Disabled="@(Model.Confirmation is false)">
            Enrol Candidate
        </MudLoadingButton>
    </MudContainer>

    </MudContainer>   
}

@code {
    private int characterCount = 0;

    // Method to update character count dynamically as user types
    private void UpdateCharacterCount(string newValue)
    {
        Model!.ReferralComments = newValue;
        characterCount = newValue?.Length ?? 0;
    }
}