@using Cfo.Cats.Application.Features.Candidates.Queries.Search
@using Cfo.Cats.Application.Features.Participants.Queries
@inherits CatsComponentBase

@if (_selectedType is not null)
{
    <DynamicComponent Type="_selectedType" Parameters="_selectedParameters"/>
}

@code {

    private Type? _selectedType = null;
    private Dictionary<string, object> _selectedParameters = [];
    
    private bool Confirmation { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnCancelled { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<string> OnCandidateEnrolled { get; set; }

    [Parameter, EditorRequired] public SearchResult[] SearchResults { get; set; } = default!;
    [Parameter, EditorRequired] public CandidateSearchQuery Query { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        _selectedParameters = new Dictionary<string, object>()
        {
            {
                "OnCanceled", EventCallback.Factory.Create(this, HandleOnCancelledClick)
            }
        };

        if (SearchReturnedNoCandidates())
        {
            ShowNoResultsFound();
        }
        else if (SearchReturnedMultipleAmbiguousCandidates())
        {
            ShowTooManyResultsFound();
        }
        else if (SearchReturnedIdenticalCandidate())
        {
            await BeginEnrolmentIfNotAlreadyEnrolled();
        }
        else if (SearchReturnedSingleCandidate())
        {
            if(CandidateMeetsMinimumPrecedence(10))
            {
                await BeginEnrolmentIfNotAlreadyEnrolled();
            }
            else
            {
                ShowMoreInformationRequired();
            }
        }
    }

    bool SearchReturnedNoCandidates() => SearchResults is { Length: 0 };
    bool SearchReturnedSingleCandidate() => SearchResults is { Length: 1 };
    bool SearchReturnedIdenticalCandidate() => SearchResults.Any(result => result.Precedence is 1);
    bool SearchReturnedMultipleAmbiguousCandidates() => SearchResults is { Length: > 1 } && SearchReturnedIdenticalCandidate() is false;

    void ShowCandidateFound()
    {
        _selectedParameters.Add("CandidateId", Candidate.Upci);
        _selectedParameters.Add("Query", Query);
        _selectedParameters.Add("OnParticipantEnrolled", EventCallback.Factory.Create(this, OnParticipantEnrolledHandler));
        _selectedType = typeof(MatchFound);
    }

    void ShowCandidateAlreadyEnrolled() 
    {
        _selectedParameters.Add("CandidateId", Candidate.Upci);
        _selectedType = typeof(AlreadyEnrolled); 
    }

    void ShowNoResultsFound() => _selectedType = typeof(NoResults);
    void ShowMoreInformationRequired() => _selectedType = typeof(MoreInformationRequired);
    void ShowTooManyResultsFound() => _selectedType = typeof(TooManyResults);

    async Task BeginEnrolmentIfNotAlreadyEnrolled()
    {
        var result = SearchResults
            .OrderBy(candidate => candidate.Precedence)
            .First();

        var enrolled = await GetNewMediator().Send(new CheckParticipantExistsById.Query
        {
            Id = result.Upci
        });

        if (enrolled)
        {
            ShowCandidateAlreadyEnrolled();
        }
        else
        {
            ShowCandidateFound();
        }
    }

    bool CandidateMeetsMinimumPrecedence(int precedence) => Candidate.Precedence <= precedence;

    SearchResult Candidate => SearchResults.OrderBy(candidate => candidate.Precedence).First();

    private Task HandleOnCancelledClick()
        => OnCancelled.InvokeAsync();

    private Task OnParticipantEnrolledHandler()
        => OnCandidateEnrolled.InvokeAsync(Candidate.Upci);
}