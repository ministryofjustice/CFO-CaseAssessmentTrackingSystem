@using System.Runtime.CompilerServices
@using Cfo.Cats.Application.Features.Candidates
@using Cfo.Cats.Application.Features.Candidates.DTOs
@using Cfo.Cats.Application.Features.Candidates.Queries.Search
@using Faker

<MudGrid>
    <MudItem xs="12">
        @if (Query is not null)
        {
            <MudForm Model="@Query" @ref="_form" Validation="@(Validator.ValidateValue(Query))">
                <MudItem xs="12">
                    <MudTextField Label="External Identifier (PNomis/NDelius Id)" @bind-Value="Query.ExternalIdentifier" For="(() => Query.ExternalIdentifier)" Immediate="true"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="First Name" @bind-Value="Query.FirstName" For="(() => Query.FirstName)" Immediate="true"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Label="Last Name" @bind-Value="Query.LastName" For="(() => Query.LastName)" Immediate="true"/>
                </MudItem>
                <MudItem xs="12">
                    <MudDatePicker Label="Date Of Birth" @bind-Date="Query.DateOfBirth" For="(() => Query.DateOfBirth)" ImmediateText="true" Editable="true" MaxDate="DateTime.Now.Date"/>
                </MudItem>
            </MudForm>
            <MudContainer Class="d-flex px-0 pt-8">
                <MudSpacer/>
                <MudLoadingButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Search" Loading="false" Disabled="false">
                    Search
                </MudLoadingButton>
            </MudContainer>
        }
    </MudItem>
</MudGrid>

@code {

    private MudForm? _form;

    [Inject]
    public ICandidateService CandidateService { get; set; } = default!;

    [EditorRequired]
    [Parameter]
    public EventCallback<SearchResult[]> OnSearch { get; set; }

    [EditorRequired]
    [Parameter]
    public CandidateSearchQuery? Query { get; set; }

    [CascadingParameter]
    private UserProfile? UserProfile { get; set; }

    CandidateFluentValidator candidateValidator = new();

    public async Task Search()
    {
        await _form!.Validate().ConfigureAwait(false);
        if (_form.IsValid)
        {
            var result = await CandidateService.SearchAsync(Query!);
            await OnSearch.InvokeAsync(result?.ToArray() ?? []);
        }
    }

}