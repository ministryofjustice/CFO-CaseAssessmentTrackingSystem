@page "/pages/participants/activePRIs"

@using Cfo.Cats.Application.Common.Interfaces.Locations
@using Cfo.Cats.Application.Features.PRI.DTOs
@using Cfo.Cats.Application.Features.PRI.Queries
@using Cfo.Cats.Application.Features.PRI.Specifications
@using Cfo.Cats.Application.SecurityConstants
@using Cfo.Cats.Infrastructure.Services.Identity
@using Humanizer

@inject IStringLocalizer<ActivePRIs> L
@inject ICurrentUserService CurrentUser;

@inherits CatsComponentBase

@attribute [Authorize(Policy = SecurityPolicies.AuthorizedUser)]

<PageTitle>@Title</PageTitle>

<h3>ActivePRIs</h3>

<style>
    .mud-table-toolbar {
        height: 120px !important;
    }

    .pointer-cursor {
        cursor: pointer;
    }
</style>

 <MudDataGrid ServerData="@(ServerReload)"
                 FixedHeader="true"
                 FixedFooter="true"
                 Virtualize="true"
                 @bind-RowsPerPage="_defaultPageSize"
                 Height="calc(100vh - 260px)"
                 Loading="@_loading"
                 MultiSelection="true"
                 @bind-SelectedItems="_selectedItems"
                 @bind-SelectedItem="_currentDto"
                 Hover="true"
                 @ref="_table"
                 Breakpoint="Breakpoint.Sm">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Large" />
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption">Active PRI's</MudText>
                </div>
            </div>
            <div class="d-flex flex-column">
                <MudSwitch T="bool" Class="mt-10" Value="@Query!.JustMyCustodyPRIs" Label="Just My Custody PRI's'" Color="Color.Primary" ValueChanged="OnShowCustodyPRIChanged"></MudSwitch>
            </div>
            <div class="d-flex flex-column">
                <MudSwitch T="bool" Class="mt-10" Value="@Query.JustMyCommunityPRIs" Label="Just My Community PRI's'" Color="Color.Primary" ValueChanged="OnShowCommunityPRIChanged"></MudSwitch>
            </div>
            <div class="flex-grow-1"></div>
            <div class="d-flex flex-column justify-end">
                <div class="d-flex">
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="@(() => OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">
                            @ConstantString.Refresh
                        </MudButton>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">

                    </MudHidden>
                </div>
       
                <MudTextField T="string" ValueChanged="@(OnSearch)" Value="@Query!.Keyword" Placeholder="@ConstantString.Search" Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small">
                </MudTextField>
            </div>
        </div>
    </ToolBarContent>
    <Columns>
        <TemplateColumn CellClass="width:60px;" Title="@ConstantString.Actions" Sortable="false">
            <CellTemplate>
                <MudMenu Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small"
                         Dense="true"
                         EndIcon="@Icons.Material.Filled.KeyboardArrowDown" IconColor="Color.Info" AnchorOrigin="Origin.CenterLeft">              
                        <MudMenuItem OnClick="@(()=> Edit(context.Item))">
                            @ConstantString.Edit
                        </MudMenuItem>
              
                </MudMenu>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.ParticipantId" Title="@L["Participant"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    @* <MudText Typo="Typo.body2">@context.Item.ParticipantName</MudText> *@
                    <MudText Typo="Typo.body2">@context.Item.ParticipantId</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        @* <PropertyColumn Property="x => x.ParticipantName" Title="@L["Participant"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.body2">@context.Item.ParticipantName</MudText>
                    <MudText Typo="Typo.body2">@context.Item.ParticipantId</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn> *@
        <PropertyColumn Property="x => x.CreatedBy" Title="@L["Custody Support Worker"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    @* <MudText Typo="Typo.body2"> @UserService.GetDisplayName(@context.Item.CreatedBy!)</MudText> *@
                    <MudText Typo="Typo.body2"> @context.Item.CreatedBy</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.AssignedTo" Title="@L["Community Support Worker"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    @* <MudText Typo="Typo.body2"> @UserService.GetDisplayName(@context.Item.CreatedBy!)</MudText> *@
                    <MudText Typo="Typo.body2"> @context.Item.AssignedTo</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.ExpectedReleaseRegion" Title="@L["Release Region"]">
            <CellTemplate>
                <div class="d-flex flex-column">
                    @* <MudText Typo="Typo.body2"> @UserService.GetDisplayName(@context.Item.CreatedBy!)</MudText> *@
                    <MudText Typo="Typo.body2"> @context.Item.ExpectedReleaseRegion!.Name</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        
        <PropertyColumn Property="x => x.ExpectedReleaseDate" Title="@L["Expected Release Date"]">
            <CellTemplate>
                <div class="d-flex flex-column">

                    <MudText Typo="Typo.body2">
                        @context.Item.ExpectedReleaseDate
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @context.Item.ExpectedReleaseDate.Humanize()
                    </MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.ActualReleaseDate" Title="@L["Actual Release Date"]">
            <CellTemplate>
                <div class="d-flex flex-column">

                    <MudText Typo="Typo.body2">
                        @context.Item.ActualReleaseDate
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @context.Item.ActualReleaseDate.Humanize()
                    </MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
    </Columns>
    <NoRecordsContent>
        <MudText>@ConstantString.NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ConstantString.Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new[] { 10, 15, 30, 50 })" />
    </PagerContent>
</MudDataGrid>


@code {
    [CascadingParameter] private UserProfile? UserProfile { get; set; }

    // [SupplyParameterFromQuery(Name = "ListView")]
    // public string? ListView { get; set; }
    [SupplyParameterFromQuery(Name = "ListView")]
    public string? ListView { get; set; }

    public string? Title { get; private set; }
    private int _defaultPageSize = 15;


    private HashSet<PRIPaginationDto> _selectedItems = new();

    private MudDataGrid<PRIPaginationDto> _table = default!;
    private bool _loading;

    private PRIPaginationDto _currentDto = new() { Id = default };

    private GetActivePRIsByUserId.Query? Query { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Title = L["PRIs"];      

        Query = new GetActivePRIsByUserId.Query()
            {
                CurrentUser = UserProfile        
            };        

        await Task.CompletedTask;
    }


    private async Task<GridData<PRIPaginationDto>> ServerReload(GridState<PRIPaginationDto> state)
    {
        try
        {
            _loading = true;
            Query!.CurrentUser = UserProfile;
            Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            var result = await GetNewMediator().Send(Query).ConfigureAwait(false);
            return new GridData<PRIPaginationDto> { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnRefresh()
    {
        _selectedItems = [];
        Query!.Keyword = string.Empty;
        await _table.ReloadServerData();
    }

    private async Task OnSearch(string text)
    {
        if (_loading)
        {
            return;
        }
        _selectedItems = new();
        Query!.Keyword = text;
        await _table.ReloadServerData();
    }

    private async Task OnShowCustodyPRIChanged(bool value)
    {    
        if (value) // Only toggle the other off if this one is turned on
        {
            Query!.JustMyCommunityPRIs = false;
        }
        Query!.JustMyCustodyPRIs = value;
        await _table.ReloadServerData();
    }

    private async Task OnShowCommunityPRIChanged(bool value)
    {
        if (value) // Only toggle the other off if this one is turned on
        {
            Query!.JustMyCustodyPRIs = false;
        }
        Query!.JustMyCommunityPRIs = value;
        await _table.ReloadServerData();
    }

    private void Edit(PRIPaginationDto PRI)
    {
        Navigation.NavigateTo($"/pages/PRI/{PRI.Id}");
    }
}